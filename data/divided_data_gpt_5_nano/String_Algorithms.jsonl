{"question_id": "abc358_a", "question_title": "Welcome to AtCoder Land", "question_content": "Takahashi is heading to AtCoder Land.\r\nThere is a signboard in front of him, and he wants to determine whether it says AtCoder Land.\n\nYou are given two strings S and T separated by a space.\r\nDetermine whether S= AtCoder and T= Land.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS T\n\nOutput\n\nIf S= AtCoder and T= Land, print Yes; otherwise, print No.\n\nConstraints\n\n\n- S and T are strings consisting of uppercase and lowercase English letters, with lengths between 1 and 10, inclusive.\n\nSample Input 1\n\nAtCoder Land\n\nSample Output 1\n\nYes\r\n\nS= AtCoder and T= Land.\n\nSample Input 2\n\nCodeQUEEN Land\n\nSample Output 2\n\nNo\r\n\nS is not AtCoder.\n\nSample Input 3\n\naTcodeR lANd\n\nSample Output 3\n\nNo\r\n\nUppercase and lowercase letters are distinguished.", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"AtCoder Land\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"CodeQUEEN Land\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}, {\"input\": \"aTcodeR lANd\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc360_a", "question_title": "A Healthy Breakfast", "question_content": "Takahashi eats three plates for breakfast: rice, miso soup, and salad.\nHis table is long and narrow, so he arranged the three plates in a row. The arrangement is given by a string S, where the i-th plate from the left is rice if S_i is R, miso soup if S_i is M, and salad if S_i is S.\nDetermine whether the plate of rice is to the left of the plate of miso soup.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\n\nOutput\n\nPrint Yes if the plate of rice is to the left of the plate of miso soup, and No otherwise.\n\nConstraints\n\n\n- |S| = 3\n- S contains one R, one M, and one S.\n\nSample Input 1\n\nRSM\n\nSample Output 1\n\nYes\r\n\nThe plate of rice is at the 1st position from the left, and the plate of miso soup is at the 3rd position from the left. Since the plate of rice is to the left, print Yes.\n\nSample Input 2\n\nSMR\n\nSample Output 2\n\nNo\r\n\nThe plates are arranged as salad, miso soup, and rice from left to right.", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"RSM\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"SMR\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "3468", "question_title": "find-the-encrypted-string", "question_content": "You are given a string s and an integer k. Encrypt the string using the following algorithm:\n\nFor each character c in s, replace c with the k^th character after c in the string (in a cyclic manner).\n\nReturn the encrypted string.\n \nExample 1:\n\nInput: s = \"dart\", k = 3\nOutput: \"tdar\"\nExplanation:\n\nFor i = 0, the 3^rd character after 'd' is 't'.\nFor i = 1, the 3^rd character after 'a' is 'd'.\nFor i = 2, the 3^rd character after 'r' is 'a'.\nFor i = 3, the 3^rd character after 't' is 'r'.\n\n\nExample 2:\n\nInput: s = \"aaa\", k = 1\nOutput: \"aaa\"\nExplanation:\nAs all the characters are the same, the encrypted string will also be the same.\n\n \nConstraints:\n\n1 <= s.length <= 100\n1 <= k <= 10^4\ns consists only of lowercase English letters.", "difficulty": "easy", "starter_code": "class Solution:\n    def getEncryptedString(self, s: str, k: int) -> str:\n        ", "public_test_cases": "[{\"input\": \"\\\"dart\\\"\\n3\", \"output\": \"\\\"tdar\\\"\", \"testtype\": \"functional\"}, {\"input\": \"\\\"aaa\\\"\\n1\", \"output\": \"\\\"aaa\\\"\", \"testtype\": \"functional\"}]"}
{"question_id": "2819", "question_title": "remove-trailing-zeros-from-a-string", "question_content": "Given a positive integer num represented as a string, return the integer num without trailing zeros as a string.\n \nExample 1:\n\nInput: num = \"51230100\"\nOutput: \"512301\"\nExplanation: Integer \"51230100\" has 2 trailing zeros, we remove them and return integer \"512301\".\n\nExample 2:\n\nInput: num = \"123\"\nOutput: \"123\"\nExplanation: Integer \"123\" has no trailing zeros, we return integer \"123\".\n\n \nConstraints:\n\n1 <= num.length <= 1000\nnum consists of only digits.\nnum doesn't have any leading zeros.", "difficulty": "easy", "starter_code": "class Solution:\n    def removeTrailingZeros(self, num: str) -> str:\n        ", "public_test_cases": "[{\"input\": \"\\\"51230100\\\"\", \"output\": \"\\\"512301\\\"\", \"testtype\": \"functional\"}, {\"input\": \"\\\"123\\\"\", \"output\": \"\\\"123\\\"\", \"testtype\": \"functional\"}]"}
{"question_id": "2881", "question_title": "split-strings-by-separator", "question_content": "Given an array of strings words and a character separator, split each string in words by separator.\nReturn an array of strings containing the new strings formed after the splits, excluding empty strings.\nNotes\n\nseparator is used to determine where the split should occur, but it is not included as part of the resulting strings.\nA split may result in more than two strings.\nThe resulting strings must maintain the same order as they were initially given.\n\n \nExample 1:\n\nInput: words = [\"one.two.three\",\"four.five\",\"six\"], separator = \".\"\nOutput: [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"]\nExplanation: In this example we split as follows:\n\n\"one.two.three\" splits into \"one\", \"two\", \"three\"\n\"four.five\" splits into \"four\", \"five\"\n\"six\" splits into \"six\" \n\nHence, the resulting array is [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"].\nExample 2:\n\nInput: words = [\"$easy$\",\"$problem$\"], separator = \"$\"\nOutput: [\"easy\",\"problem\"]\nExplanation: In this example we split as follows: \n\n\"$easy$\" splits into \"easy\" (excluding empty strings)\n\"$problem$\" splits into \"problem\" (excluding empty strings)\n\nHence, the resulting array is [\"easy\",\"problem\"].\n\nExample 3:\n\nInput: words = [\"|||\"], separator = \"|\"\nOutput: []\nExplanation: In this example the resulting split of \"|||\" will contain only empty strings, so we return an empty array []. \n \nConstraints:\n\n1 <= words.length <= 100\n1 <= words[i].length <= 20\ncharacters in words[i] are either lowercase English letters or characters from the string \".,|$#@\" (excluding the quotes)\nseparator is a character from the string \".,|$#@\" (excluding the quotes)", "difficulty": "easy", "starter_code": "class Solution:\n    def splitWordsBySeparator(self, words: List[str], separator: str) -> List[str]:\n        ", "public_test_cases": "[{\"input\": \"[\\\"one.two.three\\\", \\\"four.five\\\", \\\"six\\\"]\\n\\\".\\\"\", \"output\": \"[\\\"one\\\", \\\"two\\\", \\\"three\\\", \\\"four\\\", \\\"five\\\", \\\"six\\\"]\", \"testtype\": \"functional\"}, {\"input\": \"[\\\"$easy$\\\", \\\"$problem$\\\"]\\n\\\"$\\\"\", \"output\": \"[\\\"easy\\\", \\\"problem\\\"]\", \"testtype\": \"functional\"}, {\"input\": \"[\\\"|||\\\"]\\n\\\"|\\\"\", \"output\": \"[]\", \"testtype\": \"functional\"}]"}
{"question_id": "2887", "question_title": "sort-vowels-in-a-string", "question_content": "Given a 0-indexed string s, permute s to get a new string t such that:\n\nAll consonants remain in their original places. More formally, if there is an index i with 0 <= i < s.length such that s[i] is a consonant, then t[i] = s[i].\nThe vowels must be sorted in the nondecreasing order of their ASCII values. More formally, for pairs of indices i, j with 0 <= i < j < s.length such that s[i] and s[j] are vowels, then t[i] must not have a higher ASCII value than t[j].\n\nReturn the resulting string.\nThe vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in lowercase or uppercase. Consonants comprise all letters that are not vowels.\n \nExample 1:\n\nInput: s = \"lEetcOde\"\nOutput: \"lEOtcede\"\nExplanation: 'E', 'O', and 'e' are the vowels in s; 'l', 't', 'c', and 'd' are all consonants. The vowels are sorted according to their ASCII values, and the consonants remain in the same places.\n\nExample 2:\n\nInput: s = \"lYmpH\"\nOutput: \"lYmpH\"\nExplanation: There are no vowels in s (all characters in s are consonants), so we return \"lYmpH\".\n\n \nConstraints:\n\n1 <= s.length <= 10^5\ns consists only of letters of the English alphabet in uppercase and lowercase.", "difficulty": "medium", "starter_code": "class Solution:\n    def sortVowels(self, s: str) -> str:\n        ", "public_test_cases": "[{\"input\": \"\\\"lEetcOde\\\"\", \"output\": \"\\\"lEOtcede\\\"\", \"testtype\": \"functional\"}, {\"input\": \"\\\"lYmpH\\\"\", \"output\": \"\\\"lYmpH\\\"\", \"testtype\": \"functional\"}]"}
{"question_id": "2977", "question_title": "check-if-a-string-is-an-acronym-of-words", "question_content": "Given an array of strings words and a string s, determine if s is an acronym of words.\nThe string s is considered an acronym of words if it can be formed by concatenating the first character of each string in words in order. For example, \"ab\" can be formed from [\"apple\", \"banana\"], but it can't be formed from [\"bear\", \"aardvark\"].\nReturn true if s is an acronym of words, and false otherwise. \n \nExample 1:\n\nInput: words = [\"alice\",\"bob\",\"charlie\"], s = \"abc\"\nOutput: true\nExplanation: The first character in the words \"alice\", \"bob\", and \"charlie\" are 'a', 'b', and 'c', respectively. Hence, s = \"abc\" is the acronym. \n\nExample 2:\n\nInput: words = [\"an\",\"apple\"], s = \"a\"\nOutput: false\nExplanation: The first character in the words \"an\" and \"apple\" are 'a' and 'a', respectively. \nThe acronym formed by concatenating these characters is \"aa\". \nHence, s = \"a\" is not the acronym.\n\nExample 3:\n\nInput: words = [\"never\",\"gonna\",\"give\",\"up\",\"on\",\"you\"], s = \"ngguoy\"\nOutput: true\nExplanation: By concatenating the first character of the words in the array, we get the string \"ngguoy\". \nHence, s = \"ngguoy\" is the acronym.\n\n \nConstraints:\n\n1 <= words.length <= 100\n1 <= words[i].length <= 10\n1 <= s.length <= 100\nwords[i] and s consist of lowercase English letters.", "difficulty": "easy", "starter_code": "class Solution:\n    def isAcronym(self, words: List[str], s: str) -> bool:\n        ", "public_test_cases": "[{\"input\": \"[\\\"alice\\\", \\\"bob\\\", \\\"charlie\\\"]\\n\\\"abc\\\"\", \"output\": \"true\", \"testtype\": \"functional\"}, {\"input\": \"[\\\"an\\\", \\\"apple\\\"]\\n\\\"a\\\"\", \"output\": \"false\", \"testtype\": \"functional\"}, {\"input\": \"[\\\"never\\\", \\\"gonna\\\", \\\"give\\\", \\\"up\\\", \\\"on\\\", \\\"you\\\"]\\n\\\"ngguoy\\\"\", \"output\": \"true\", \"testtype\": \"functional\"}]"}
{"question_id": "3267", "question_title": "find-longest-special-substring-that-occurs-thrice-i", "question_content": "You are given a string s that consists of lowercase English letters.\nA string is called special if it is made up of only a single character. For example, the string \"abc\" is not special, whereas the strings \"ddd\", \"zz\", and \"f\" are special.\nReturn the length of the longest special substring of s which occurs at least thrice, or -1 if no special substring occurs at least thrice.\nA substring is a contiguous non-empty sequence of characters within a string.\n \nExample 1:\n\nInput: s = \"aaaa\"\nOutput: 2\nExplanation: The longest special substring which occurs thrice is \"aa\": substrings \"aaaa\", \"aaaa\", and \"aaaa\".\nIt can be shown that the maximum length achievable is 2.\n\nExample 2:\n\nInput: s = \"abcdef\"\nOutput: -1\nExplanation: There exists no special substring which occurs at least thrice. Hence return -1.\n\nExample 3:\n\nInput: s = \"abcaba\"\nOutput: 1\nExplanation: The longest special substring which occurs thrice is \"a\": substrings \"abcaba\", \"abcaba\", and \"abcaba\".\nIt can be shown that the maximum length achievable is 1.\n\n \nConstraints:\n\n3 <= s.length <= 50\ns consists of only lowercase English letters.", "difficulty": "medium", "starter_code": "class Solution:\n    def maximumLength(self, s: str) -> int:\n        ", "public_test_cases": "[{\"input\": \"\\\"aaaa\\\"\", \"output\": \"2\", \"testtype\": \"functional\"}, {\"input\": \"\\\"abcdef\\\"\", \"output\": \"-1\", \"testtype\": \"functional\"}, {\"input\": \"\\\"abcaba\\\"\", \"output\": \"1\", \"testtype\": \"functional\"}]"}
{"question_id": "3309", "question_title": "count-prefix-and-suffix-pairs-i", "question_content": "You are given a 0-indexed string array words.\nLet's define a boolean function isPrefixAndSuffix that takes two strings, str1 and str2:\n\nisPrefixAndSuffix(str1, str2) returns true if str1 is both a prefix and a suffix of str2, and false otherwise.\n\nFor example, isPrefixAndSuffix(\"aba\", \"ababa\") is true because \"aba\" is a prefix of \"ababa\" and also a suffix, but isPrefixAndSuffix(\"abc\", \"abcd\") is false.\nReturn an integer denoting the number of index pairs (i, j) such that i < j, and isPrefixAndSuffix(words[i], words[j]) is true.\n \nExample 1:\n\nInput: words = [\"a\",\"aba\",\"ababa\",\"aa\"]\nOutput: 4\nExplanation: In this example, the counted index pairs are:\ni = 0 and j = 1 because isPrefixAndSuffix(\"a\", \"aba\") is true.\ni = 0 and j = 2 because isPrefixAndSuffix(\"a\", \"ababa\") is true.\ni = 0 and j = 3 because isPrefixAndSuffix(\"a\", \"aa\") is true.\ni = 1 and j = 2 because isPrefixAndSuffix(\"aba\", \"ababa\") is true.\nTherefore, the answer is 4.\nExample 2:\n\nInput: words = [\"pa\",\"papa\",\"ma\",\"mama\"]\nOutput: 2\nExplanation: In this example, the counted index pairs are:\ni = 0 and j = 1 because isPrefixAndSuffix(\"pa\", \"papa\") is true.\ni = 2 and j = 3 because isPrefixAndSuffix(\"ma\", \"mama\") is true.\nTherefore, the answer is 2.  \nExample 3:\n\nInput: words = [\"abab\",\"ab\"]\nOutput: 0\nExplanation: In this example, the only valid index pair is i = 0 and j = 1, and isPrefixAndSuffix(\"abab\", \"ab\") is false.\nTherefore, the answer is 0.\n \nConstraints:\n\n1 <= words.length <= 50\n1 <= words[i].length <= 10\nwords[i] consists only of lowercase English letters.", "difficulty": "easy", "starter_code": "class Solution:\n    def countPrefixSuffixPairs(self, words: List[str]) -> int:\n        ", "public_test_cases": "[{\"input\": \"[\\\"a\\\", \\\"aba\\\", \\\"ababa\\\", \\\"aa\\\"]\", \"output\": \"4\", \"testtype\": \"functional\"}, {\"input\": \"[\\\"pa\\\", \\\"papa\\\", \\\"ma\\\", \\\"mama\\\"]\", \"output\": \"2\", \"testtype\": \"functional\"}, {\"input\": \"[\\\"abab\\\", \\\"ab\\\"]\", \"output\": \"0\", \"testtype\": \"functional\"}]"}
{"question_id": "abc301_c", "question_title": "AtCoder Cards", "question_content": "A single-player card game is popular in AtCoder Inc.\r\nEach card in the game has a lowercase English letter or the symbol @ written on it. There is plenty number of cards for each kind.\r\nThe game goes as follows.\n\n- Arrange the same number of cards in two rows.\n- Replace each card with @ with one of the following cards: a, t, c, o, d, e, r.\n- If the two rows of cards coincide, you win. Otherwise, you lose.\n\nTo win this game, you will do the following cheat.\n\n- Freely rearrange the cards within a row whenever you want after step 1.\n\nYou are given two strings S and T, representing the two rows you have after step 1. Determine whether it is possible to win with cheating allowed.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\r\nT\n\nOutput\n\nIf it is possible to win with cheating allowed, print Yes; otherwise, print No.\n\nConstraints\n\n\n- S and T consist of lowercase English letters and @.\n- The lengths of S and T are equal and between 1 and 2\\times 10^5, inclusive.\n\nSample Input 1\n\nch@ku@ai\r\nchoku@@i\n\nSample Output 1\n\nYes\r\n\nYou can replace the @s so that both rows become chokudai.\n\nSample Input 2\n\nch@kud@i\r\nakidu@ho\n\nSample Output 2\n\nYes\r\n\nYou can cheat and replace the @s so that both rows become chokudai.\n\nSample Input 3\n\naoki\r\n@ok@\n\nSample Output 3\n\nNo\r\n\nYou cannot win even with cheating.\n\nSample Input 4\n\naa\r\nbb\n\nSample Output 4\n\nNo", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"ch@ku@ai\\nchoku@@i\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"ch@kud@i\\nakidu@ho\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"aoki\\n@ok@\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}, {\"input\": \"aa\\nbb\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc303_a", "question_title": "Similar String", "question_content": "Two characters x and y are called similar characters if and only if one of the following conditions is satisfied:\n\n- x and y are the same character.\n- One of x and y is 1 and the other is l.\n- One of x and y is 0 and the other is o.\n\nTwo strings S and T, each of length N, are called similar strings if and only if:\n\n- for all i\\ (1\\leq i\\leq N), the i-th character of S and the i-th character of T are similar characters.\n\nGiven two length-N strings S and T consisting of lowercase English letters and digits, determine if S and T are similar strings.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\nS\nT\n\nOutput\n\nPrint Yes if S and T are similar strings, and No otherwise.\n\nConstraints\n\n\n- N is an integer between 1 and 100.\n- Each of S and T is a string of length N consisting of lowercase English letters and digits.\n\nSample Input 1\n\n3\nl0w\n1ow\n\nSample Output 1\n\nYes\n\nThe 1-st character of S is l, and the 1-st character of T is 1.  These are similar characters.\nThe 2-nd character of S is 0, and the 2-nd character of T is o.  These are similar characters.\nThe 3-rd character of S is w, and the 3-rd character of T is w.  These are similar characters.\nThus, S and T are similar strings.\n\nSample Input 2\n\n3\nabc\narc\n\nSample Output 2\n\nNo\n\nThe 2-nd character of S is b, and the 2-nd character of T is r.  These are not similar characters.\nThus, S and T are not similar strings.\n\nSample Input 3\n\n4\nnok0\nn0ko\n\nSample Output 3\n\nYes", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"3\\nl0w\\n1ow\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3\\nabc\\narc\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}, {\"input\": \"4\\nnok0\\nn0ko\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc307_b", "question_title": "racecar", "question_content": "You are given N strings S_1,S_2,\\ldots,S_N consisting of lowercase English letters.\r\nDetermine if there are distinct integers i and j between 1 and N, inclusive, such that the concatenation of S_i and S_j in this order is a palindrome.\nA string T of length M is a palindrome if and only if the i-th character and the (M+1-i)-th character of T are the same for every 1\\leq i\\leq M.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nS_1\r\nS_2\r\n\\vdots\r\nS_N\n\nOutput\n\nIf there are i and j that satisfy the condition in the problem statement, print Yes; otherwise, print No.\n\nConstraints\n\n\n- 2\\leq N\\leq 100\n- 1\\leq \\lvert S_i\\rvert \\leq 50\n- N is an integer.\n- S_i is a string consisting of lowercase English letters.\n- All S_i are distinct.\n\nSample Input 1\n\n5\r\nab\r\nccef\r\nda\r\na\r\nfe\n\nSample Output 1\n\nYes\r\n\nIf we take (i,j)=(1,4), the concatenation of S_1=ab and S_4=a in this order is aba, which is a palindrome, satisfying the condition.\r\nThus, print Yes.  \nHere, we can also take (i,j)=(5,2), for which the concatenation of S_5=fe and S_2=ccef in this order is feccef, satisfying the condition.\n\nSample Input 2\n\n3\r\na\r\nb\r\naba\n\nSample Output 2\n\nNo\r\n\nNo two distinct strings among S_1, S_2, and S_3 form a palindrome when concatenated.\r\nThus, print No.\r\nNote that the i and j in the statement must be distinct.\n\nSample Input 3\n\n2\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n\nSample Output 3\n\nYes", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"5\\nab\\nccef\\nda\\na\\nfe\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3\\na\\nb\\naba\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}, {\"input\": \"2\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc307_d", "question_title": "Mismatched Parentheses", "question_content": "You are given a string S of length N consisting of lowercase English letters and the characters ( and ).\r\nPrint the string S after performing the following operation as many times as possible.\n\n- Choose and delete a contiguous substring of S that starts with (, ends with ), and does not contain ( or ) other than the first and last characters.\n\nIt can be proved that the string S after performing the operation as many times as possible is uniquely determined without depending on how it is performed.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nS\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- 1 \\leq N \\leq 2 \\times 10^5\n- N is an integer.\n- S is a string of length N consisting of lowercase English letters and the characters ( and ).\n\nSample Input 1\n\n8\r\na(b(d))c\n\nSample Output 1\n\nac\r\n\nHere is one possible procedure, after which S will be ac.\n\n- Delete the substring (d) formed by the fourth to sixth characters of S, making it a(b)c.\n- Delete the substring (b) formed by the second to fourth characters of S, making it ac.\n- The operation can no longer be performed.\n\nSample Input 2\n\n5\r\na(b)(\n\nSample Output 2\n\na(\n\nSample Input 3\n\n2\r\n()\n\nSample Output 3\n\n\r\n\nThe string S after the procedure may be empty.\n\nSample Input 4\n\n6\r\n)))(((\n\nSample Output 4\n\n)))(((", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"8\\na(b(d))c\\n\", \"output\": \"ac\\n\", \"testtype\": \"stdin\"}, {\"input\": \"5\\na(b)(\\n\", \"output\": \"a(\\n\", \"testtype\": \"stdin\"}, {\"input\": \"2\\n()\\n\", \"output\": \"\\n\", \"testtype\": \"stdin\"}, {\"input\": \"6\\n)))(((\\n\", \"output\": \")))(((\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc308_c", "question_title": "Standings", "question_content": "N people numbered 1 through N tossed a coin several times.  We know that person i's tosses resulted in A_i heads and B_i tails.\nPerson i's success rate of the tosses is defined by \\displaystyle\\frac{A_i}{A_i+B_i}.  Sort people 1,\\ldots,N in descending order of their success rates, with ties broken in ascending order of their assigned numbers.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nA_1 B_1\r\n\\vdots\r\nA_N B_N\n\nOutput\n\nPrint the numbers of people 1,\\ldots,N in descending order of their success rates, with ties broken in ascending order of their assigned numbers.\n\nConstraints\n\n\n- 2\\leq N \\leq 2\\times 10^5\n- 0\\leq A_i, B_i\\leq 10^9\n- A_i+B_i \\geq 1\n- All input values are integers.\n\nSample Input 1\n\n3\r\n1 3\r\n3 1\r\n2 2\n\nSample Output 1\n\n2 3 1\r\n\nPerson 1's success rate is 0.25, person 2's is 0.75, and person 3's is 0.5.\nSort them in descending order of their success rates to obtain the order in Sample Output.\n\nSample Input 2\n\n2\r\n1 3\r\n2 6\n\nSample Output 2\n\n1 2\r\n\nNote that person 1 and 2 should be printed in ascending order of their numbers, as they have the same success rates.\n\nSample Input 3\n\n4\r\n999999999 1000000000\r\n333333333 999999999\r\n1000000000 999999997\r\n999999998 1000000000\n\nSample Output 3\n\n3 1 4 2", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"3\\n1 3\\n3 1\\n2 2\\n\", \"output\": \"2 3 1\\n\", \"testtype\": \"stdin\"}, {\"input\": \"2\\n1 3\\n2 6\\n\", \"output\": \"1 2\\n\", \"testtype\": \"stdin\"}, {\"input\": \"4\\n999999999 1000000000\\n333333333 999999999\\n1000000000 999999997\\n999999998 1000000000\\n\", \"output\": \"3 1 4 2\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc310_c", "question_title": "Reversible", "question_content": "There are N sticks with several balls stuck onto them. Each ball has a lowercase English letter written on it.\nFor each i = 1, 2, \\ldots, N, the letters written on the balls stuck onto the i-th stick are represented by a string S_i.\r\nSpecifically, the number of balls stuck onto the i-th stick is the length |S_i| of the string S_i, and S_i is the sequence of letters on the balls starting from one end of the stick.\nTwo sticks are considered the same when the sequence of letters on the balls starting from one end of one stick is equal to the sequence of letters starting from one end of the other stick.\r\nMore formally, for integers i and j between 1 and N, inclusive, the i-th and j-th sticks are considered the same if and only if S_i equals S_j or its reversal.\nPrint the number of different sticks among the N sticks.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nS_1\r\nS_2\r\n\\vdots\r\nS_N\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- N is an integer.\n- 2 \\leq N \\leq 2 \\times 10^5\n- S_i is a string consisting of lowercase English letters.\n- |S_i| \\geq 1\n- \\sum_{i = 1}^N |S_i| \\leq 2 \\times 10^5\n\nSample Input 1\n\n6\r\na\r\nabc\r\nde\r\ncba\r\nde\r\nabc\n\nSample Output 1\n\n3\r\n\n\n- S_2 = abc equals the reversal of S_4 = cba, so the second and fourth sticks are considered the same.\n- S_2 = abc equals S_6 = abc, so the second and sixth sticks are considered the same.\n- S_3 = de equals S_5 = de, so the third and fifth sticks are considered the same.\n\nTherefore, there are three different sticks among the six: the first, second (same as the fourth and sixth), and third (same as the fifth).", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"6\\na\\nabc\\nde\\ncba\\nde\\nabc\\n\", \"output\": \"3\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc312_a", "question_title": "Chord", "question_content": "Given a length-3 string S consisting of uppercase English letters, print Yes if S equals one of ACE, BDF, CEG, DFA, EGB, FAC, and GBD; print No otherwise.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\n\nOutput\n\nPrint Yes if S equals one of ACE, BDF, CEG, DFA, EGB, FAC, and GBD; print No otherwise.\n\nConstraints\n\n\n- S is a length-3 string consisting of uppercase English letters.\n\nSample Input 1\n\nABC\n\nSample Output 1\n\nNo\r\n\nWhen S = ABC, S does not equal any of ACE, BDF, CEG, DFA, EGB, FAC, and GBD, so No should be printed.\n\nSample Input 2\n\nFAC\n\nSample Output 2\n\nYes\n\nSample Input 3\n\nXYX\n\nSample Output 3\n\nNo", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"ABC\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}, {\"input\": \"FAC\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"XYX\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc314_a", "question_title": "3.14", "question_content": "The number pi to the 100-th decimal place is\n3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679.\nYou are given an integer N between 1 and 100, inclusive.\nPrint the value of pi to the N-th decimal place.\nMore precisely, truncate the value of pi to N decimal places and print the result without removing the trailing 0s.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\n\nOutput\n\nPrint the value of pi to the N-th decimal place in a single line.\n\nConstraints\n\n\n- 1\\leq N\\leq 100\n- N is an integer.\n\nSample Input 1\n\n2\n\nSample Output 1\n\n3.14\n\nTruncating the value of pi to 2 decimal places results in 3.14. Thus, you should print 3.14.\n\nSample Input 2\n\n32\n\nSample Output 2\n\n3.14159265358979323846264338327950\n\nDo not remove the trailing 0s.\n\nSample Input 3\n\n100\n\nSample Output 3\n\n3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"2\\n\", \"output\": \"3.14\\n\", \"testtype\": \"stdin\"}, {\"input\": \"32\\n\", \"output\": \"3.14159265358979323846264338327950\\n\", \"testtype\": \"stdin\"}, {\"input\": \"100\\n\", \"output\": \"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc315_a", "question_title": "tcdr", "question_content": "You are given a string S consisting of lowercase English letters.\r\nRemove all occurrences of a, e, i, o, u from S and print the resulting string.\nS contains at least one character other than a, e, i, o, u.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- S is a string of length between 1 and 100, inclusive, consisting of lowercase English letters.\n- S contains at least one character other than a, e, i, o, u.\n\nSample Input 1\n\natcoder\n\nSample Output 1\n\ntcdr\r\n\nFor S = atcoder, remove the 1-st, 4-th, and 6-th characters to get tcdr.\n\nSample Input 2\n\nxyz\n\nSample Output 2\n\nxyz\n\nSample Input 3\n\naaaabbbbcccc\n\nSample Output 3\n\nbbbbcccc", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"atcoder\\n\", \"output\": \"tcdr\\n\", \"testtype\": \"stdin\"}, {\"input\": \"xyz\\n\", \"output\": \"xyz\\n\", \"testtype\": \"stdin\"}, {\"input\": \"aaaabbbbcccc\\n\", \"output\": \"bbbbcccc\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc319_b", "question_title": "Measure", "question_content": "You are given a positive integer N. Print a string of length (N+1), s_0s_1\\ldots s_N, defined as follows.\n\nFor each i = 0, 1, 2, \\ldots, N,\n\n- if there is a divisor j of N that is between 1 and 9, inclusive, and i is a multiple of N/j, then s_i is the digit corresponding to the smallest such j (s_i will thus be one of 1, 2, ..., 9);\n- if no such j exists, then s_i is -.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- 1 \\leq N \\leq 1000\n- All input values are integers.\n\nSample Input 1\n\n12\n\nSample Output 1\n\n1-643-2-346-1\r\n\nWe will explain how to determine s_i for some i.\n\n- \r\nFor i = 0, the divisors j of N between 1 and 9 such that i is a multiple of N/j are 1, 2, 3, 4, 6. The smallest of these is 1, so s_0 =  1.\n\n- \r\nFor i = 4, the divisors j of N between 1 and 9 such that i is a multiple of N/j are 3, 6. The smallest of these is 3, so s_4 =  3.\n\n- \r\nFor i = 11, there are no divisors j of N between 1 and 9 such that i is a multiple of N/j, so s_{11} =  -.\n\nSample Input 2\n\n7\n\nSample Output 2\n\n17777771\n\nSample Input 3\n\n1\n\nSample Output 3\n\n11", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"12\\n\", \"output\": \"1-643-2-346-1\\n\", \"testtype\": \"stdin\"}, {\"input\": \"7\\n\", \"output\": \"17777771\\n\", \"testtype\": \"stdin\"}, {\"input\": \"1\\n\", \"output\": \"11\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc321_a", "question_title": "321", "question_content": "A positive integer x is called a 321-like Number when it satisfies the following condition.\n\n- The digits of x are strictly decreasing from top to bottom.\n- In other words, if x has d digits, it satisfies the following for every integer i such that 1 \\le i < d:\n- (the i-th digit from the top of x) > (the (i+1)-th digit from the top of x).\n\n\n\nNote that all one-digit positive integers are 321-like Numbers.\nFor example, 321, 96410, and 1 are 321-like Numbers, but 123, 2109, and 86411 are not.\nYou are given N as input. Print Yes if N is a 321-like Number, and No otherwise.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\n\nOutput\n\nPrint Yes if N is a 321-like Number, and No otherwise.\n\nConstraints\n\n\n- All input values are integers.\n- 1 \\le N \\le 99999\n\nSample Input 1\n\n321\n\nSample Output 1\n\nYes\n\nFor N=321, the following holds:\n\n- The first digit from the top, 3, is greater than the second digit from the top, 2.\n- The second digit from the top, 2, is greater than the third digit from the top, 1.\n\nThus, 321 is a 321-like Number.\n\nSample Input 2\n\n123\n\nSample Output 2\n\nNo\n\nFor N=123, the following holds:\n\n- The first digit from the top, 1, is not greater than the second digit from the top, 2.\n\nThus, 123 is not a 321-like Number.\n\nSample Input 3\n\n1\n\nSample Output 3\n\nYes\n\nSample Input 4\n\n86411\n\nSample Output 4\n\nNo", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"321\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"123\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}, {\"input\": \"1\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"86411\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc322_b", "question_title": "Prefix and Suffix", "question_content": "You are given two strings S and T consisting of lowercase English letters. The lengths of S and T are N and M, respectively. (The constraints guarantee that N \\leq M.)\nS is said to be a prefix of T when the first N characters of T coincide S.\nS is said to be a suffix of T when the last N characters of T coincide S.\nIf S is both a prefix and a suffix of T, print 0;\r\nIf S is a prefix of T but not a suffix, print 1;\r\nIf S is a suffix of T but not a prefix, print 2;\r\nIf S is neither a prefix nor a suffix of T, print 3.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN M\r\nS\r\nT\n\nOutput\n\nPrint the answer according to the instructions in the problem statement.\n\nConstraints\n\n\n- 1 \\leq N \\leq M \\leq 100\n- S is a string of length N consisting of lowercase English letters.\n- T is a string of length M consisting of lowercase English letters.\n\nSample Input 1\n\n3 7\r\nabc\r\nabcdefg\n\nSample Output 1\n\n1\r\n\nS is a prefix of T but not a suffix, so you should print 1.\n\nSample Input 2\n\n3 4\r\nabc\r\naabc\n\nSample Output 2\n\n2\r\n\nS is a suffix of T but not a prefix.\n\nSample Input 3\n\n3 3\r\nabc\r\nxyz\n\nSample Output 3\n\n3\r\n\nS is neither a prefix nor a suffix of T.\n\nSample Input 4\n\n3 3\r\naaa\r\naaa\n\nSample Output 4\n\n0\r\n\nS and T may coincide, in which case S is both a prefix and a suffix of T.", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"3 7\\nabc\\nabcdefg\\n\", \"output\": \"1\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3 4\\nabc\\naabc\\n\", \"output\": \"2\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3 3\\nabc\\nxyz\\n\", \"output\": \"3\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3 3\\naaa\\naaa\\n\", \"output\": \"0\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc323_a", "question_title": "Weak Beats", "question_content": "You are given a string S of length 16 consisting of 0 and 1.\nIf the i-th character of S is 0 for every even number i from 2 through 16, print Yes; otherwise, print No.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\n\nOutput\n\nIf the i-th character of S is 0 for every even number i from 2 through 16, print Yes; otherwise, print No.\n\nConstraints\n\n\n- S is a string of length 16 consisting of 0 and 1.\n\nSample Input 1\n\n1001000000001010\n\nSample Output 1\n\nNo\n\nThe 4-th character of S= 1001000000001010 is 1, so you should print No.\n\nSample Input 2\n\n1010100000101000\n\nSample Output 2\n\nYes\n\nEvery even-positioned character in S= 1010100000101000 is 0, so you should print Yes.\n\nSample Input 3\n\n1111111111111111\n\nSample Output 3\n\nNo\n\nEvery even-positioned character in S is 1.\nParticularly, they are not all 0, so you should print No.", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"1001000000001010\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}, {\"input\": \"1010100000101000\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"1111111111111111\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc324_c", "question_title": "Error Correction", "question_content": "Takahashi sent a string T consisting of lowercase English letters to Aoki. As a result, Aoki received a string T' consisting of lowercase English letters.\nT' may have been altered from T. Specifically, exactly one of the following four conditions is known to hold.\n\n- T' is equal to T.\n- T' is a string obtained by inserting one lowercase English letter at one position (possibly the beginning and end) in T.\n- T' is a string obtained by deleting one character from T.\n- T' is a string obtained by changing one character in T to another lowercase English letter.\n\nYou are given the string T' received by Aoki and N strings S_1, S_2, \\ldots, S_N consisting of lowercase English letters. Find all the strings among S_1, S_2, \\ldots, S_N that could equal the string T sent by Takahashi.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN T'\r\nS_1\r\nS_2\r\n\\vdots\r\nS_N\n\nOutput\n\nLet (i_1, i_2, \\ldots, i_K) be the sequence of indices of all the strings among S_1, S_2, \\ldots, S_N that could be equal to T, in ascending order.\r\nPrint the length K of this sequence, and the sequence itself, in the following format:\nK\r\ni_1 i_2 \\ldots i_K\n\nConstraints\n\n\n- N is an integer.\n- 1 \\leq N \\leq 5 \\times 10^5\n- S_i and T' are strings of length between 1 and 5 \\times 10^5, inclusive, consisting of lowercase English letters.\n- The total length of S_1, S_2, \\ldots, S_N is at most 5 \\times 10^5.\n\nSample Input 1\n\n5 ababc\r\nababc\r\nbabc\r\nabacbc\r\nabdbc\r\nabbac\n\nSample Output 1\n\n4\r\n1 2 3 4\r\n\nAmong S_1, S_2, \\ldots, S_5, the strings that could be equal to T are S_1, S_2, S_3, S_4, as explained below.\n\n- S_1 could be equal to T, because T' =  ababc is equal to S_1 =  ababc.\n- S_2 could be equal to T, because T' =  ababc is obtained by inserting the letter a at the beginning of S_2 =  babc.\n- S_3 could be equal to T, because T' =  ababc is obtained by deleting the fourth character c from S_3 =  abacbc.\n- S_4 could be equal to T, because T' =  ababc is obtained by changing the third character d in S_4 =  abdbc to b.\n- S_5 could not be equal to T, because if we take S_5 =  abbac as T, then T' =  ababc does not satisfy any of the four conditions in the problem statement.\n\nSample Input 2\n\n1 aoki\r\ntakahashi\n\nSample Output 2\n\n0\n\nSample Input 3\n\n9 atcoder\r\natoder\r\natcode\r\nathqcoder\r\natcoder\r\ntacoder\r\njttcoder\r\natoder\r\natceoder\r\natcoer\n\nSample Output 3\n\n6\r\n1 2 4 7 8 9", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"5 ababc\\nababc\\nbabc\\nabacbc\\nabdbc\\nabbac\\n\", \"output\": \"4\\n1 2 3 4\\n\", \"testtype\": \"stdin\"}, {\"input\": \"1 aoki\\ntakahashi\\n\", \"output\": \"0\\n\\n\", \"testtype\": \"stdin\"}, {\"input\": \"9 atcoder\\natoder\\natcode\\nathqcoder\\natcoder\\ntacoder\\njttcoder\\natoder\\natceoder\\natcoer\\n\", \"output\": \"6\\n1 2 4 7 8 9\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc327_a", "question_title": "ab", "question_content": "You are given a string S of length N consisting of lowercase English letters.\r\nIf there are any adjacent occurrences of a and b in S, print Yes; otherwise, print No. (The order of a and b does not matter.)\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nS\n\nOutput\n\nIf there are any adjacent occurrences of a and b in S, print Yes; otherwise, print No.\n\nConstraints\n\n\n- 2 \\leq N \\leq 100\n- S is a string of length N consisting of lowercase English letters.\n\nSample Input 1\n\n3\r\nabc\n\nSample Output 1\n\nYes\r\n\nThe string abc has a as the first character and b as the second character, which are adjacent. Thus, print Yes.\n\nSample Input 2\n\n2\r\nba\n\nSample Output 2\n\nYes\r\n\nThe string ba has a as the second character and b as the first character, which are adjacent. (Note that the order of a and b does not matter.)\n\nSample Input 3\n\n7\r\natcoder\n\nSample Output 3\n\nNo", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"3\\nabc\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"2\\nba\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"7\\natcoder\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc329_a", "question_title": "Spread", "question_content": "You are given a string S consisting of uppercase English letters. Separate each character of S with a space and print them one by one in order.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\n\nOutput\n\nSeparate each character of S with a space and print them one by one.\n\nConstraints\n\n\n- S is a string consisting of uppercase English letters with a length between 2 and 100, inclusive.\n\nSample Input 1\n\nABC\n\nSample Output 1\n\nA B C\r\n\nSeparate A, B, and C with spaces and print them one by one.\nThere is no need to print a space after C.\n\nSample Input 2\n\nZZZZZZZ\n\nSample Output 2\n\nZ Z Z Z Z Z Z\n\nSample Input 3\n\nOOXXOO\n\nSample Output 3\n\nO O X X O O", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"ABC\\n\", \"output\": \"A B C\\n\", \"testtype\": \"stdin\"}, {\"input\": \"ZZZZZZZ\\n\", \"output\": \"Z Z Z Z Z Z Z\\n\", \"testtype\": \"stdin\"}, {\"input\": \"OOXXOO\\n\", \"output\": \"O O X X O O\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc329_e", "question_title": "Stamp", "question_content": "You are given two strings: S, which consists of uppercase English letters and has length N, and T, which also consists of uppercase English letters and has length M\\ (\\leq N).\nThere is a string X of length N consisting only of the character #. Determine whether it is possible to make X match S by performing the following operation any number of times:\n\n- Choose M consecutive characters in X and replace them with T.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN M\nS\nT\n\nOutput\n\nPrint Yes if it is possible to make X match S; print No otherwise.\n\nConstraints\n\n\n- 1 \\leq N \\leq 2\\times 10^5\n- 1 \\leq M \\leq \\min(N, 5)\n- S is a string consisting of uppercase English letters with length N.\n- T is a string consisting of uppercase English letters with length M.\n\nSample Input 1\n\n7 3\nABCBABC\nABC\n\nSample Output 1\n\nYes\n\nBelow, let X[l:r] denote the part from the l-th through the r-th character of X.\nYou can make X match S by operating as follows.\n\n- Replace X[3:5] with T. X becomes ##ABC##.\n- Replace X[1:3] with T. X becomes ABCBC##.\n- Replace X[5:7] with T. X becomes ABCBABC.\n\nSample Input 2\n\n7 3\nABBCABC\nABC\n\nSample Output 2\n\nNo\n\nNo matter how you operate, it is impossible to make X match S.\n\nSample Input 3\n\n12 2\nXYXXYXXYYYXY\nXY\n\nSample Output 3\n\nYes", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"7 3\\nABCBABC\\nABC\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"7 3\\nABBCABC\\nABC\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}, {\"input\": \"12 2\\nXYXXYXXYYYXY\\nXY\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc335_a", "question_title": "202<s>3</s>", "question_content": "You are given a string S consisting of lowercase English letters and digits.\nS is guaranteed to end with 2023.\r\nChange the last character of S to 4 and print the modified string.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- S is a string of length between 4 and 100, inclusive, consisting of lowercase English letters and digits.\n- S ends with 2023.\n\nSample Input 1\n\nhello2023\n\nSample Output 1\n\nhello2024\r\n\nChanging the last character of hello2023 to 4 yields hello2024.\n\nSample Input 2\n\nworldtourfinals2023\n\nSample Output 2\n\nworldtourfinals2024\n\nSample Input 3\n\n2023\n\nSample Output 3\n\n2024\r\n\nS is guaranteed to end with 2023, possibly being 2023 itself.\n\nSample Input 4\n\n20232023\n\nSample Output 4\n\n20232024", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"hello2023\\n\", \"output\": \"hello2024\\n\", \"testtype\": \"stdin\"}, {\"input\": \"worldtourfinals2023\\n\", \"output\": \"worldtourfinals2024\\n\", \"testtype\": \"stdin\"}, {\"input\": \"2023\\n\", \"output\": \"2024\\n\", \"testtype\": \"stdin\"}, {\"input\": \"20232023\\n\", \"output\": \"20232024\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc337_b", "question_title": "Extended ABC", "question_content": "We define Extended A strings, Extended B strings, Extended C strings, and Extended ABC strings as follows:\n\n- A string S is an Extended A string if all characters in S are A.\n- A string S is an Extended B string if all characters in S are B.\n- A string S is an Extended C string if all characters in S are C.\n- A string S is an Extended ABC string if there is an Extended A string S_A, an Extended B string S_B, and an Extended C string S_C such that the string obtained by concatenating S_A, S_B, S_C in this order equals S.\n\nFor example, ABC, A, and AAABBBCCCCCCC are Extended ABC strings, but ABBAAAC and BBBCCCCCCCAAA are not.\r\nNote that the empty string is an Extended A string, an Extended B string, and an Extended C string.\nYou are given a string S consisting of A, B, and C.\r\nIf S is an Extended ABC string, print Yes; otherwise, print No.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\n\nOutput\n\nIf S is an Extended ABC string, print Yes; otherwise, print No.\n\nConstraints\n\n\n- S is a string consisting of A, B, and C.\n- 1\\leq|S|\\leq 100 (|S| is the length of the string S.)\n\nSample Input 1\n\nAAABBBCCCCCCC\n\nSample Output 1\n\nYes\r\n\nAAABBBCCCCCCC is an Extended ABC string because it is a concatenation of an Extended A string of length 3, AAA, an Extended B string of length 3, BBB, and an Extended C string of length 7, CCCCCCC, in this order.\nThus, print Yes.\n\nSample Input 2\n\nACABABCBC\n\nSample Output 2\n\nNo\r\n\nThere is no triple of Extended A string S_A, Extended B string S_B, and Extended C string S_C such that the string obtained by concatenating S_A, S_B, and S_C in this order equals ACABABCBC.\nTherefore, print No.\n\nSample Input 3\n\nA\n\nSample Output 3\n\nYes\n\nSample Input 4\n\nABBBBBBBBBBBBBCCCCCC\n\nSample Output 4\n\nYes", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"AAABBBCCCCCCC\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"ACABABCBC\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}, {\"input\": \"A\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"ABBBBBBBBBBBBBCCCCCC\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc338_a", "question_title": "Capitalized?", "question_content": "You are given a non-empty string S consisting of uppercase and lowercase English letters. Determine whether the following condition is satisfied:\n\n- The first character of S is uppercase, and all other characters are lowercase.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\n\nOutput\n\nIf the condition is satisfied, print Yes; otherwise, print No.\n\nConstraints\n\n\n- 1 \\leq |S| \\leq 100 (|S| is the length of the string S.)\n- Each character of S is an uppercase or lowercase English letter.\n\nSample Input 1\n\nCapitalized\n\nSample Output 1\n\nYes\r\n\nThe first character C of Capitalized is uppercase, and all other characters apitalized are lowercase, so you should print Yes.\n\nSample Input 2\n\nAtCoder\n\nSample Output 2\n\nNo\r\n\nAtCoder contains an uppercase letter C that is not at the beginning, so you should print No.\n\nSample Input 3\n\nyes\n\nSample Output 3\n\nNo\r\n\nThe first character y of yes is not uppercase, so you should print No.\n\nSample Input 4\n\nA\n\nSample Output 4\n\nYes", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"Capitalized\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"AtCoder\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}, {\"input\": \"yes\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}, {\"input\": \"A\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc338_b", "question_title": "Frequency", "question_content": "You are given a string S consisting of lowercase English letters. Find the character that appears most frequently in S. If multiple such characters exist, report the one that comes earliest in alphabetical order.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\n\nOutput\n\nAmong the characters that appear most frequently in S, print the one that comes earliest in alphabetical order.\n\nConstraints\n\n\n- 1 \\leq |S| \\leq 1000 (|S| is the length of the string S.)\n- Each character in S is a lowercase English letter.\n\nSample Input 1\n\nfrequency\n\nSample Output 1\n\ne\r\n\nIn frequency, the letter e appears twice, which is more than any other character, so you should print e.\n\nSample Input 2\n\natcoder\n\nSample Output 2\n\na\r\n\nIn atcoder, each of the letters a, t, c, o, d, e, and r appears once, so you should print the earliest in alphabetical order, which is a.\n\nSample Input 3\n\npseudopseudohypoparathyroidism\n\nSample Output 3\n\no", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"frequency\\n\", \"output\": \"e\\n\", \"testtype\": \"stdin\"}, {\"input\": \"atcoder\\n\", \"output\": \"a\\n\", \"testtype\": \"stdin\"}, {\"input\": \"pseudopseudohypoparathyroidism\\n\", \"output\": \"o\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc339_a", "question_title": "TLD", "question_content": "You are given a string S consisting of lowercase English letters and the character ..\r\nPrint the last substring when S is split by .s.\r\nIn other words, print the longest suffix of S that does not contain ..\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- S is a string of length between 2 and 100, inclusive, consisting of lowercase English letters and ..\n- S contains at least one ..\n- S does not end with ..\n\nSample Input 1\n\natcoder.jp\n\nSample Output 1\n\njp\r\n\nThe longest suffix of atcoder.jp that does not contain . is jp.\n\nSample Input 2\n\ntranslate.google.com\n\nSample Output 2\n\ncom\r\n\nS may contain multiple .s.\n\nSample Input 3\n\n.z\n\nSample Output 3\n\nz\r\n\nS may start with ..\n\nSample Input 4\n\n..........txt\n\nSample Output 4\n\ntxt\r\n\nS may contain consecutive .s.", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"atcoder.jp\\n\", \"output\": \"jp\\n\", \"testtype\": \"stdin\"}, {\"input\": \"translate.google.com\\n\", \"output\": \"com\\n\", \"testtype\": \"stdin\"}, {\"input\": \".z\\n\", \"output\": \"z\\n\", \"testtype\": \"stdin\"}, {\"input\": \"..........txt\\n\", \"output\": \"txt\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc341_a", "question_title": "Print 341", "question_content": "Given a positive integer N, print a string of N zeros and N+1 ones where 0 and 1 alternate.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- N is an integer.\n- 1 \\leq N \\leq 100\n\nSample Input 1\n\n4\n\nSample Output 1\n\n101010101\r\n\nA string of four zeros and five ones where 0 and 1 alternate is 101010101.\n\nSample Input 2\n\n1\n\nSample Output 2\n\n101\n\nSample Input 3\n\n10\n\nSample Output 3\n\n101010101010101010101", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"4\\n\", \"output\": \"101010101\\n\", \"testtype\": \"stdin\"}, {\"input\": \"1\\n\", \"output\": \"101\\n\", \"testtype\": \"stdin\"}, {\"input\": \"10\\n\", \"output\": \"101010101010101010101\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc374_b", "question_title": "Unvarnished Report", "question_content": "KEYENCE has a culture of reporting things as they are, whether good or bad.\nSo we want to check whether the reported content is exactly the same as the original text.\n\nYou are given two strings S and T, consisting of lowercase English letters.\nIf S and T are equal, print 0; otherwise, print the position of the first character where they differ.\nHere, if the i-th character exists in only one of S and T, consider that the i-th characters are different.\nMore precisely, if S and T are not equal, print the smallest integer i satisfying one of the following conditions:\n\n- 1\\leq i\\leq |S|, 1\\leq i\\leq |T|, and S_i\\neq T_i.\n- |S| < i \\leq |T|.\n- |T| < i \\leq |S|.\n\nHere, |S| and |T| denote the lengths of S and T, respectively, and S_i and T_i denote the i-th characters of S and T, respectively.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\nT\n\nOutput\n\nIf S and T are equal, print 0; otherwise, print the position of the first character where they differ.\n\nConstraints\n\n\n- S and T are strings of length between 1 and 100, inclusive, consisting of lowercase English letters.\n\nSample Input 1\n\nabcde\nabedc\n\nSample Output 1\n\n3\n\nWe have S= abcde and T= abedc.\nS and T have the same first and second characters, but differ at the third character, so print 3.\n\nSample Input 2\n\nabcde\nabcdefg\n\nSample Output 2\n\n6\n\nWe have S= abcde and T= abcdefg.\nS and T are equal up to the fifth character, but only T has a sixth character, so print 6.\n\nSample Input 3\n\nkeyence\nkeyence\n\nSample Output 3\n\n0\n\nS and T are equal, so print 0.", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"abcde\\nabedc\\n\", \"output\": \"3\\n\", \"testtype\": \"stdin\"}, {\"input\": \"abcde\\nabcdefg\\n\", \"output\": \"6\\n\", \"testtype\": \"stdin\"}, {\"input\": \"keyence\\nkeyence\\n\", \"output\": \"0\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc374_a", "question_title": "Takahashi san 2", "question_content": "KEYENCE has a culture of addressing everyone with the suffix \"-san,\" regardless of roles, age, or positions.\nYou are given a string S consisting of lowercase English letters.\nIf S ends with san, print Yes; otherwise, print No.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\n\nOutput\n\nIf S ends with san, print Yes; otherwise, print No.\n\nConstraints\n\n\n- S is a string of length between 4 and 30, inclusive, consisting of lowercase English letters.\n\nSample Input 1\n\ntakahashisan\n\nSample Output 1\n\nYes\n\nThe string S= takahashisan ends with san, so print Yes.\n\nSample Input 2\n\naokikun\n\nSample Output 2\n\nNo\n\nThe string S= aokikun does not end with san, so print No.", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"takahashisan\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"aokikun\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc377_a", "question_title": "Rearranging ABC", "question_content": "You are given a string S of length 3 consisting of uppercase English letters.\nDetermine whether it is possible to rearrange the characters in S to make it match the string ABC.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\n\nOutput\n\nPrint Yes if it is possible to rearrange the characters in S to make it match the string ABC, and No otherwise.\n\nConstraints\n\n\n- S is a string of length 3 consisting of uppercase English letters.\n\nSample Input 1\n\nBAC\n\nSample Output 1\n\nYes\n\nYou can make S match ABC by swapping the first and second characters of S.\n\nSample Input 2\n\nAAC\n\nSample Output 2\n\nNo\n\nYou cannot make S match ABC no matter how you rearrange the characters.\n\nSample Input 3\n\nABC\n\nSample Output 3\n\nYes\n\nSample Input 4\n\nARC\n\nSample Output 4\n\nNo", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"BAC\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"AAC\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}, {\"input\": \"ABC\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"ARC\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc381_a", "question_title": "11/22 String", "question_content": "The definition of an 11/22 string in this problem is the same as in Problems C and E.\n\nA string T is called an 11/22 string when it satisfies all of the following conditions:\n\n- |T| is odd. Here, |T| denotes the length of T.\n- The 1-st through (\\frac{|T|+1}{2} - 1)-th characters are all 1.\n- The (\\frac{|T|+1}{2})-th character is /.\n- The (\\frac{|T|+1}{2} + 1)-th through |T|-th characters are all 2.\n\nFor example, 11/22, 111/222, and / are 11/22 strings, but 1122, 1/22, 11/2222, 22/11, and //2/2/211 are not.\nGiven a string S of length N consisting of 1, 2, and /, determine whether S is an 11/22 string.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nS\n\nOutput\n\nIf S is an 11/22 string, print Yes; otherwise, print No.\n\nConstraints\n\n\n- 1 \\leq N \\leq 100\n- S is a string of length N consisting of 1, 2, and /.\n\nSample Input 1\n\n5\r\n11/22\n\nSample Output 1\n\nYes\r\n\n11/22 satisfies the conditions for an 11/22 string in the problem statement.\n\nSample Input 2\n\n1\r\n/\n\nSample Output 2\n\nYes\r\n\n/ satisfies the conditions for an 11/22 string.\n\nSample Input 3\n\n4\r\n1/22\n\nSample Output 3\n\nNo\r\n\n1/22 does not satisfy the conditions for an 11/22 string.\n\nSample Input 4\n\n5\r\n22/11\n\nSample Output 4\n\nNo", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"5\\n11/22\", \"output\": \"Yes\", \"testtype\": \"stdin\"}, {\"input\": \"1\\n/\", \"output\": \"Yes\", \"testtype\": \"stdin\"}, {\"input\": \"4\\n1/22\", \"output\": \"No\", \"testtype\": \"stdin\"}, {\"input\": \"5\\n22/11\", \"output\": \"No\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc381_b", "question_title": "1122 String", "question_content": "A string T is called a 1122 string if and only if it satisfies all of the following three conditions:\n\n- \\lvert T \\rvert is even. Here, \\lvert T \\rvert denotes the length of T.\n- For each integer i satisfying 1\\leq i\\leq \\frac{|T|}{2}, the (2i-1)-th and 2i-th characters of T are equal.\n- Each character appears in T exactly zero or two times. That is, every character contained in T appears exactly twice in T.\n\nGiven a string S consisting of lowercase English letters, print Yes if S is a 1122 string, and No otherwise.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\n\nOutput\n\nIf S is a 1122 string, print Yes; otherwise, print No.\n\nConstraints\n\n\n- S is a string of length between 1 and 100, inclusive, consisting of lowercase English letters.\n\nSample Input 1\n\naabbcc\n\nSample Output 1\n\nYes\n\nS=aabbcc satisfies all the conditions for a 1122 string, so print Yes.\n\nSample Input 2\n\naab\n\nSample Output 2\n\nNo\n\nS=aab has an odd length and does not satisfy the first condition, so print No.\n\nSample Input 3\n\nzzzzzz\n\nSample Output 3\n\nNo\n\nS=zzzzzz contains six zs and does not satisfy the third condition, so print No.", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"aabbcc\", \"output\": \"Yes\", \"testtype\": \"stdin\"}, {\"input\": \"aab\", \"output\": \"No\", \"testtype\": \"stdin\"}, {\"input\": \"zzzzzz\", \"output\": \"No\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc384_a", "question_title": "aaaadaa", "question_content": "You are given a string S of length N consisting of lowercase English letters, along with lowercase English letters c_1 and c_2.\nFind the string obtained by replacing every character of S that is not c_1 with c_2.\n\nInput\n\nThe input is given in the following format from Standard Input:\nN c_1 c_2\nS\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- 1\\le N\\le 100\n- N is an integer.\n- c_1 and c_2 are lowercase English letters.\n- S is a string of length N consisting of lowercase English letters.\n\nSample Input 1\n\n3 b g\nabc\n\nSample Output 1\n\ngbg\n\nReplacing a and c (which are not b) with g in S= abc results in gbg, so print gbg.\n\nSample Input 2\n\n1 s h\ns\n\nSample Output 2\n\ns\n\nIt is possible that the resulting string after replacement is the same as the original string.\n\nSample Input 3\n\n7 d a\natcoder\n\nSample Output 3\n\naaaadaa\n\nSample Input 4\n\n10 b a\nacaabcabba\n\nSample Output 4\n\naaaabaabba", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"3 b g\\nabc\", \"output\": \"gbg\", \"testtype\": \"stdin\"}, {\"input\": \"1 s h\\ns\", \"output\": \"s\", \"testtype\": \"stdin\"}, {\"input\": \"7 d a\\natcoder\", \"output\": \"aaaadaa\", \"testtype\": \"stdin\"}, {\"input\": \"10 b a\\nacaabcabba\", \"output\": \"aaaabaabba\", \"testtype\": \"stdin\"}]"}
{"question_id": "3684", "question_title": "substring-matching-pattern", "question_content": "You are given a string s and a pattern string p, where p contains exactly one '*' character.\nThe '*' in p can be replaced with any sequence of zero or more characters.\nReturn true if p can be made a substring of s, and false otherwise.\nA substring is a contiguous non-empty sequence of characters within a string.\n \nExample 1:\n\nInput: s = \"leetcode\", p = \"ee*e\"\nOutput: true\nExplanation:\nBy replacing the '*' with \"tcod\", the substring \"eetcode\" matches the pattern.\n\nExample 2:\n\nInput: s = \"car\", p = \"c*v\"\nOutput: false\nExplanation:\nThere is no substring matching the pattern.\n\nExample 3:\n\nInput: s = \"luck\", p = \"u*\"\nOutput: true\nExplanation:\nThe substrings \"u\", \"uc\", and \"uck\" match the pattern.\n\n \nConstraints:\n\n1 <= s.length <= 50\n1 <= p.length <= 50 \ns contains only lowercase English letters.\np contains only lowercase English letters and exactly one '*'", "difficulty": "easy", "starter_code": "class Solution:\n    def hasMatch(self, s: str, p: str) -> bool:\n        ", "public_test_cases": "[{\"input\": \"\\\"leetcode\\\"\\n\\\"ee*e\\\"\", \"output\": \"true\", \"testtype\": \"functional\"}, {\"input\": \"\\\"car\\\"\\n\\\"c*v\\\"\", \"output\": \"false\", \"testtype\": \"functional\"}, {\"input\": \"\\\"luck\\\"\\n\\\"u*\\\"\", \"output\": \"true\", \"testtype\": \"functional\"}]"}
{"question_id": "abc344_a", "question_title": "Spoiler", "question_content": "You are given a string S consisting of lowercase English letters and |. S is guaranteed to contain exactly two |s.\nRemove the characters between the two |s, including the |s themselves, and print the resulting string.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- S is a string of length between 2 and 100, inclusive, consisting of lowercase English letters and |.\n- S contains exactly two |s.\n\nSample Input 1\n\natcoder|beginner|contest\n\nSample Output 1\n\natcodercontest\r\n\nRemove all the characters between the two |s and print the result.\n\nSample Input 2\n\n|spoiler|\n\nSample Output 2\n\n\r\n\nIt is possible that all characters are removed.\n\nSample Input 3\n\n||xyz\n\nSample Output 3\n\nxyz", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"atcoder|beginner|contest\\n\", \"output\": \"atcodercontest\\n\", \"testtype\": \"stdin\"}, {\"input\": \"|spoiler|\\n\", \"output\": \"\\n\", \"testtype\": \"stdin\"}, {\"input\": \"||xyz\\n\", \"output\": \"xyz\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc347_b", "question_title": "Substring", "question_content": "You are given a string S consisting of lowercase English letters. How many different non-empty substrings does S have?\nA substring is a contiguous subsequence. For example, xxx is a substring of yxxxy but not of xxyxx.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- S is a string of length between 1 and 100, inclusive, consisting of lowercase English letters.\n\nSample Input 1\n\nyay\n\nSample Output 1\n\n5\r\n\nS has the following five different non-empty substrings:\n\n- a\n- y\n- ay\n- ya\n- yay\n\nSample Input 2\n\naababc\n\nSample Output 2\n\n17\n\nSample Input 3\n\nabracadabra\n\nSample Output 3\n\n54", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"yay\\n\", \"output\": \"5\\n\", \"testtype\": \"stdin\"}, {\"input\": \"aababc\\n\", \"output\": \"17\\n\", \"testtype\": \"stdin\"}, {\"input\": \"abracadabra\\n\", \"output\": \"54\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc348_a", "question_title": "Penalty Kick", "question_content": "Takahashi will have N penalty kicks in a soccer match.\nFor the i-th penalty kick, he will fail if i is a multiple of 3, and succeed otherwise.\nPrint the results of his penalty kicks.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\n\nOutput\n\nPrint a string of length N representing the results of Takahashi's penalty kicks. The i-th character (1 \\leq i \\leq N) should be o if Takahashi succeeds in the i-th penalty kick, and x if he fails.\n\nConstraints\n\n\n- 1 \\leq N \\leq 100\n- All inputs are integers.\n\nSample Input 1\n\n7\n\nSample Output 1\n\nooxooxo\r\n\nTakahashi fails the third and sixth penalty kicks, so the third and sixth characters will be x.\n\nSample Input 2\n\n9\n\nSample Output 2\n\nooxooxoox", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"7\\n\", \"output\": \"ooxooxo\\n\", \"testtype\": \"stdin\"}, {\"input\": \"9\\n\", \"output\": \"ooxooxoox\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc349_c", "question_title": "Airport Code", "question_content": "A string T of length 3 consisting of uppercase English letters is an airport code for a string S of lowercase English letters if and only if T can be derived from S by one of the following methods:\n\n- Take a subsequence of length 3 from S (not necessarily contiguous) and convert it to uppercase letters to form T.\n- Take a subsequence of length 2 from S (not necessarily contiguous), convert it to uppercase letters, and append X to the end to form T.\n\nGiven strings S and T, determine if T is an airport code for S.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\r\nT\n\nOutput\n\nPrint Yes if T is an airport code for S, and No otherwise.\n\nConstraints\n\n\n- S is a string of lowercase English letters with a length between 3 and 10^5, inclusive.\n- T is a string of uppercase English letters with a length of 3.\n\nSample Input 1\n\nnarita\r\nNRT\n\nSample Output 1\n\nYes\r\n\nThe subsequence nrt of narita, when converted to uppercase, forms the string NRT, which is an airport code for narita.\n\nSample Input 2\n\nlosangeles\r\nLAX\n\nSample Output 2\n\nYes\r\n\nThe subsequence la of losangeles, when converted to uppercase and appended with X, forms the string LAX, which is an airport code for losangeles.\n\nSample Input 3\n\nsnuke\r\nRNG\n\nSample Output 3\n\nNo", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"narita\\nNRT\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"losangeles\\nLAX\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"snuke\\nRNG\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc350_a", "question_title": "Past ABCs", "question_content": "You are given a string S of length 6. It is guaranteed that the first three characters of S are ABC and the last three characters are digits.\nDetermine if S is the abbreviation of a contest held and concluded on AtCoder before the start of this contest.\nHere, a string T is \"the abbreviation of a contest held and concluded on AtCoder before the start of this contest\" if and only if it equals one of the following 348 strings:\nABC001, ABC002, \\ldots, ABC314, ABC315, ABC317, ABC318, \\ldots, ABC348, ABC349.\nNote that ABC316 is not included.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\n\nOutput\n\nIf S is the abbreviation of a contest held and concluded on AtCoder before the start of this contest, print Yes; otherwise, print No.\n\nConstraints\n\n\n- S is a string of length 6 where the first three characters are ABC and the last three characters are digits.\n\nSample Input 1\n\nABC349\n\nSample Output 1\n\nYes\r\n\nABC349 is the abbreviation of a contest held and concluded on AtCoder last week.\n\nSample Input 2\n\nABC350\n\nSample Output 2\n\nNo\r\n\nABC350 is this contest, which has not concluded yet.\n\nSample Input 3\n\nABC316\n\nSample Output 3\n\nNo\r\n\nABC316 was not held on AtCoder.", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"ABC349\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"ABC350\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}, {\"input\": \"ABC316\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc353_e", "question_title": "Yet Another Sigma Problem", "question_content": "For strings x and y, define f(x, y) as follows:\n\n- f(x, y) is the length of the longest common prefix of x and y.\n\nYou are given N strings (S_1, \\ldots, S_N) consisting of lowercase English letters. Find the value of the following expression:\n\\displaystyle \\sum_{i=1}^{N-1}\\sum_{j=i+1}^N f(S_i,S_j).\n\nInput\n\nThe input is given from Standard Input in the following format:\nN \r\nS_1 \\ldots S_N\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- 2 \\leq N \\leq 3\\times 10^5\n- S_i is a string consisting of lowercase English letters.\n- 1 \\leq |S_i|\n- |S_1|+|S_2|+\\ldots+|S_N|\\leq 3\\times 10^5\n- All input numbers are integers.\n\nSample Input 1\n\n3\r\nab abc arc\n\nSample Output 1\n\n4\r\n\n\n- f(S_1,S_2)=2 \n- f(S_1,S_3)=1 \n- f(S_2,S_3)=1 \n\nThus, the answer is f(S_1,S_2) + f(S_1,S_3) + f(S_2,S_3) = 4.\n\nSample Input 2\n\n11\r\nab bb aaa bba baba babb aaaba aabbb a a b\n\nSample Output 2\n\n32", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"3\\nab abc arc\\n\", \"output\": \"4\\n\", \"testtype\": \"stdin\"}, {\"input\": \"11\\nab bb aaa bba baba babb aaaba aabbb a a b\\n\", \"output\": \"32\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc354_b", "question_title": "AtCoder Janken 2", "question_content": "N AtCoder users have gathered to play AtCoder RPS 2. The i-th user's name is S_i and their rating is C_i.\nAtCoder RPS 2 is played as follows:\n\n- Assign the numbers 0, 1, \\dots, N - 1 to the users in lexicographical order of their usernames.\n- Let T be the sum of the ratings of the N users. The user assigned the number T \\bmod N is the winner.\n\nPrint the winner's username.\n\nWhat is lexicographical order?\n\nLexicographical order, simply put, means \"the order in which words appear in a dictionary.\" More precisely, the algorithm to determine the order of two distinct strings S and T consisting of lowercase English letters is as follows:\n\nHere, \"the i-th character of S\" is denoted as S_i. If S is lexicographically smaller than T, we write S \\lt T, and if S is larger, we write S \\gt T.\n\n-  Let L be the length of the shorter string among S and T. Check if S_i and T_i match for i=1,2,\\dots,L. \n-  If there exists an i such that S_i \\neq T_i, let j be the smallest such i. Compare S_j and T_j. If S_j is alphabetically smaller than T_j, then S \\lt T. Otherwise, S \\gt T. The algorithm ends here.\n  \n-  If there is no i such that S_i \\neq T_i, compare the lengths of S and T. If S is shorter than T, then S \\lt T. If S is longer, then S \\gt T. The algorithm ends here.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\nS_1 C_1\nS_2 C_2\n\\vdots\nS_N C_N\n\nOutput\n\nPrint the answer on a single line.\n\nConstraints\n\n\n- 1 \\leq N \\leq 100\n- S_i is a string consisting of lowercase English letters with length between 3 and 16, inclusive.\n- S_1, S_2, \\dots, S_N are all distinct.\n- 1 \\leq C_i \\leq 4229\n- C_i is an integer.\n\nSample Input 1\n\n3\ntakahashi 2\naoki 6\nsnuke 5\n\nSample Output 1\n\nsnuke\n\nThe sum of the ratings of the three users is 13. Sorting their names in lexicographical order yields aoki, snuke, takahashi, so aoki is assigned number 0, snuke is 1, and takahashi is 2.\nSince 13 \\bmod 3 = 1, print snuke, who is assigned number 1.\n\nSample Input 2\n\n3\ntakahashi 2813\ntakahashixx 1086\ntakahashix 4229\n\nSample Output 2\n\ntakahashix", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"3\\ntakahashi 2\\naoki 6\\nsnuke 5\\n\", \"output\": \"snuke\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3\\ntakahashi 2813\\ntakahashixx 1086\\ntakahashix 4229\\n\", \"output\": \"takahashix\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "3356", "question_title": "shortest-uncommon-substring-in-an-array", "question_content": "You are given an array arr of size n consisting of non-empty strings.\nFind a string array answer of size n such that:\n\nanswer[i] is the shortest substring of arr[i] that does not occur as a substring in any other string in arr. If multiple such substrings exist, answer[i] should be the lexicographically smallest. And if no such substring exists, answer[i] should be an empty string.\n\nReturn the array answer.\n \nExample 1:\n\nInput: arr = [\"cab\",\"ad\",\"bad\",\"c\"]\nOutput: [\"ab\",\"\",\"ba\",\"\"]\nExplanation: We have the following:\n- For the string \"cab\", the shortest substring that does not occur in any other string is either \"ca\" or \"ab\", we choose the lexicographically smaller substring, which is \"ab\".\n- For the string \"ad\", there is no substring that does not occur in any other string.\n- For the string \"bad\", the shortest substring that does not occur in any other string is \"ba\".\n- For the string \"c\", there is no substring that does not occur in any other string.\n\nExample 2:\n\nInput: arr = [\"abc\",\"bcd\",\"abcd\"]\nOutput: [\"\",\"\",\"abcd\"]\nExplanation: We have the following:\n- For the string \"abc\", there is no substring that does not occur in any other string.\n- For the string \"bcd\", there is no substring that does not occur in any other string.\n- For the string \"abcd\", the shortest substring that does not occur in any other string is \"abcd\".\n\n \nConstraints:\n\nn == arr.length\n2 <= n <= 100\n1 <= arr[i].length <= 20\narr[i] consists only of lowercase English letters.", "difficulty": "medium", "starter_code": "class Solution:\n    def shortestSubstrings(self, arr: List[str]) -> List[str]:\n        ", "public_test_cases": "[{\"input\": \"[\\\"cab\\\", \\\"ad\\\", \\\"bad\\\", \\\"c\\\"]\", \"output\": \"[\\\"ab\\\", \\\"\\\", \\\"ba\\\", \\\"\\\"]\", \"testtype\": \"functional\"}, {\"input\": \"[\\\"abc\\\", \\\"bcd\\\", \\\"abcd\\\"]\", \"output\": \"[\\\"\\\", \\\"\\\", \\\"abcd\\\"]\", \"testtype\": \"functional\"}]"}
{"question_id": "3353", "question_title": "existence-of-a-substring-in-a-string-and-its-reverse", "question_content": "Given a string s, find any substring of length 2 which is also present in the reverse of s.\nReturn true if such a substring exists, and false otherwise.\n \nExample 1:\n\nInput: s = \"leetcode\"\nOutput: true\nExplanation: Substring \"ee\" is of length 2 which is also present in reverse(s) == \"edocteel\".\n\nExample 2:\n\nInput: s = \"abcba\"\nOutput: true\nExplanation: All of the substrings of length 2 \"ab\", \"bc\", \"cb\", \"ba\" are also present in reverse(s) == \"abcba\".\n\nExample 3:\n\nInput: s = \"abcd\"\nOutput: false\nExplanation: There is no substring of length 2 in s, which is also present in the reverse of s.\n\n \nConstraints:\n\n1 <= s.length <= 100\ns consists only of lowercase English letters.", "difficulty": "easy", "starter_code": "class Solution:\n    def isSubstringPresent(self, s: str) -> bool:\n        ", "public_test_cases": "[{\"input\": \"\\\"leetcode\\\"\", \"output\": \"true\", \"testtype\": \"functional\"}, {\"input\": \"\\\"abcba\\\"\", \"output\": \"true\", \"testtype\": \"functional\"}, {\"input\": \"\\\"abcd\\\"\", \"output\": \"false\", \"testtype\": \"functional\"}]"}
{"question_id": "3408", "question_title": "count-the-number-of-special-characters-i", "question_content": "You are given a string word. A letter is called special if it appears both in lowercase and uppercase in word.\nReturn the number of special letters in word.\n \nExample 1:\n\nInput: word = \"aaAbcBC\"\nOutput: 3\nExplanation:\nThe special characters in word are 'a', 'b', and 'c'.\n\nExample 2:\n\nInput: word = \"abc\"\nOutput: 0\nExplanation:\nNo character in word appears in uppercase.\n\nExample 3:\n\nInput: word = \"abBCab\"\nOutput: 1\nExplanation:\nThe only special character in word is 'b'.\n\n \nConstraints:\n\n1 <= word.length <= 50\nword consists of only lowercase and uppercase English letters.", "difficulty": "easy", "starter_code": "class Solution:\n    def numberOfSpecialChars(self, word: str) -> int:\n        ", "public_test_cases": "[{\"input\": \"\\\"aaAbcBC\\\"\", \"output\": \"3\", \"testtype\": \"functional\"}, {\"input\": \"\\\"abc\\\"\", \"output\": \"0\", \"testtype\": \"functional\"}, {\"input\": \"\\\"abBCab\\\"\", \"output\": \"1\", \"testtype\": \"functional\"}]"}
{"question_id": "3451", "question_title": "string-compression-iii", "question_content": "Given a string word, compress it using the following algorithm:\n\nBegin with an empty string comp. While word is not empty, use the following operation:\n\n\t\nRemove a maximum length prefix of word made of a single character c repeating at most 9 times.\nAppend the length of the prefix followed by c to comp.\n\n\n\nReturn the string comp.\n \nExample 1:\n\nInput: word = \"abcde\"\nOutput: \"1a1b1c1d1e\"\nExplanation:\nInitially, comp = \"\". Apply the operation 5 times, choosing \"a\", \"b\", \"c\", \"d\", and \"e\" as the prefix in each operation.\nFor each prefix, append \"1\" followed by the character to comp.\n\nExample 2:\n\nInput: word = \"aaaaaaaaaaaaaabb\"\nOutput: \"9a5a2b\"\nExplanation:\nInitially, comp = \"\". Apply the operation 3 times, choosing \"aaaaaaaaa\", \"aaaaa\", and \"bb\" as the prefix in each operation.\n\nFor prefix \"aaaaaaaaa\", append \"9\" followed by \"a\" to comp.\nFor prefix \"aaaaa\", append \"5\" followed by \"a\" to comp.\nFor prefix \"bb\", append \"2\" followed by \"b\" to comp.\n\n\n \nConstraints:\n\n1 <= word.length <= 2 * 10^5\nword consists only of lowercase English letters.", "difficulty": "medium", "starter_code": "class Solution:\n    def compressedString(self, word: str) -> str:\n        ", "public_test_cases": "[{\"input\": \"\\\"abcde\\\"\", \"output\": \"\\\"1a1b1c1d1e\\\"\", \"testtype\": \"functional\"}, {\"input\": \"\\\"aaaaaaaaaaaaaabb\\\"\", \"output\": \"\\\"9a5a2b\\\"\", \"testtype\": \"functional\"}]"}
{"question_id": "abc367_b", "question_title": "Cut .0", "question_content": "A real number X is given to the third decimal place.\nPrint the real number X under the following conditions.\n\n- The decimal part must not have trailing 0s.\n- There must not be an unnecessary trailing decimal point.\n\nInput\n\nThe input is given from Standard Input in the following format:\nX\n\nOutput\n\nOutput the answer.\n\nConstraints\n\n\n- 0 \\le X < 100\n- X is given to the third decimal place.\n\nSample Input 1\n\n1.012\n\nSample Output 1\n\n1.012\r\n\n1.012 can be printed as it is.\n\nSample Input 2\n\n12.340\n\nSample Output 2\n\n12.34\r\n\nPrinting 12.340 without the trailing 0 results in 12.34.\n\nSample Input 3\n\n99.900\n\nSample Output 3\n\n99.9\r\n\nPrinting 99.900 without the trailing 0s results in 99.9.\n\nSample Input 4\n\n0.000\n\nSample Output 4\n\n0\r\n\nPrinting 0.000 without trailing 0s or an unnecessary decimal point results in 0.", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"1.012\\n\", \"output\": \"1.012\\n\", \"testtype\": \"stdin\"}, {\"input\": \"12.340\\n\", \"output\": \"12.34\\n\", \"testtype\": \"stdin\"}, {\"input\": \"99.900\\n\", \"output\": \"99.9\\n\", \"testtype\": \"stdin\"}, {\"input\": \"0.000\\n\", \"output\": \"0\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc372_c", "question_title": "Count ABC Again", "question_content": "You are given a string S of length N. You are also given Q queries, which you should process in order.\nThe i-th query is as follows:\n\n- Given an integer X_i and a character C_i, replace the X_i-th character of S with C_i. Then, print the number of times the string ABC appears as a substring in S.\n\nHere, a substring of S is a string obtained by deleting zero or more characters from the beginning and zero or more characters from the end of S.\nFor example, ab is a substring of abc, but ac is not a substring of abc.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN Q\nS\nX_1 C_1\nX_2 C_2\n\\vdots\nX_Q C_Q\n\nOutput\n\nPrint Q lines.\nThe i-th line (1 \\le i \\le Q) should contain the answer to the i-th query.\n\nConstraints\n\n\n- 3 \\le N \\le 2 \\times 10^5\n- 1 \\le Q \\le 2 \\times 10^5\n- S is a string of length N consisting of uppercase English letters.\n- 1 \\le X_i \\le N\n- C_i is an uppercase English letter.\n\nSample Input 1\n\n7 4\nABCDABC\n4 B\n3 A\n5 C\n4 G\n\nSample Output 1\n\n2\n1\n1\n0\n\nAfter processing each query, S becomes as follows.\n\n- After the first query: S= ABCBABC. In this string, ABC appears twice as a substring.\n- After the second query: S= ABABABC. In this string, ABC appears once as a substring.\n- After the third query: S= ABABCBC. In this string, ABC appears once as a substring.\n- After the fourth query: S= ABAGCBC. In this string, ABC appears zero times as a substring.\n\nSample Input 2\n\n3 3\nABC\n1 A\n2 B\n3 C\n\nSample Output 2\n\n1\n1\n1\n\nThere are cases where S does not change through processing a query.\n\nSample Input 3\n\n15 10\nBBCCBCACCBACACA\n9 C\n11 B\n5 B\n11 B\n4 A\n8 C\n8 B\n5 B\n7 B\n14 B\n\nSample Output 3\n\n0\n0\n0\n0\n1\n1\n2\n2\n1\n1", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"7 4\\nABCDABC\\n4 B\\n3 A\\n5 C\\n4 G\\n\", \"output\": \"2\\n1\\n1\\n0\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3 3\\nABC\\n1 A\\n2 B\\n3 C\\n\", \"output\": \"1\\n1\\n1\\n\", \"testtype\": \"stdin\"}, {\"input\": \"15 10\\nBBCCBCACCBACACA\\n9 C\\n11 B\\n5 B\\n11 B\\n4 A\\n8 C\\n8 B\\n5 B\\n7 B\\n14 B\\n\", \"output\": \"0\\n0\\n0\\n0\\n1\\n1\\n2\\n2\\n1\\n1\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc372_a", "question_title": "delete .", "question_content": "You are given a string S consisting of lowercase English letters and ..\r\nFind the string obtained by removing all . from S.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\n\nOutput\n\nPrint the string obtained by removing all . from S.\n\nConstraints\n\n\n- S is a string of length between 1 and 100, inclusive, consisting of lowercase English letters and ..\n\nSample Input 1\n\n.v.\n\nSample Output 1\n\nv\r\n\nRemoving all . from .v. yields v, so print v.\n\nSample Input 2\n\nchokudai\n\nSample Output 2\n\nchokudai\r\n\nThere are cases where S does not contain ..\n\nSample Input 3\n\n...\n\nSample Output 3\n\n\r\n\r\n\nThere are also cases where all characters in S are ..", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \".v.\\n\", \"output\": \"v\\n\", \"testtype\": \"stdin\"}, {\"input\": \"chokudai\\n\", \"output\": \"chokudai\\n\", \"testtype\": \"stdin\"}, {\"input\": \"...\\n\", \"output\": \"\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "arc181_b", "question_title": "Annoying String Problem", "question_content": "For strings S and T consisting of lowercase English letters, and a string X consisting of 0 and 1, define the string f(S,T,X) consisting of lowercase English letters as follows:\n\n- Starting with an empty string, for each i=1,2,\\dots,|X|, append S to the end if the i-th character of X is 0, and append T to the end if it is 1.\n\nYou are given a string S consisting of lowercase English letters, and strings X and Y consisting of 0 and 1.\nDetermine if there exists a string T (which can be empty) such that f(S,T,X)=f(S,T,Y).\nYou have t test cases to solve.\n\nInput\n\nThe input is given from Standard Input in the following format:\nt\r\n\\mathrm{case}_1\r\n\\vdots\r\n\\mathrm{case}_t\r\n\nEach case is given in the following format:\nS\r\nX\r\nY\n\nOutput\n\nPrint t lines. The i-th line should contain Yes if there exists a T that satisfies the condition for the i-th test case, and No otherwise.\n\nConstraints\n\n\n- 1 \\leq t \\leq 5 \\times 10^5\n- 1 \\leq |S| \\leq 5\\times 10^5\n- 1 \\leq |X|,|Y| \\leq 5\\times 10^5\n- S is a string consisting of lowercase English letters.\n- X and Y are strings consisting of 0 and 1.\n- The sum of |S| across all test cases in a single input is at most 5 \\times 10^5.\n- The sum of |X| across all test cases in a single input is at most 5 \\times 10^5.\n- The sum of |Y| across all test cases in a single input is at most 5 \\times 10^5.\n\nSample Input 1\n\n3\r\naraara\r\n01\r\n111\r\naraaaa\r\n100100\r\n0010111\r\nabacabac\r\n0\r\n1111\n\nSample Output 1\n\nYes\r\nNo\r\nNo\r\n\nBelow, string concatenation is represented using +.\nFor the 1st test case, if T=ara, then f(S,T,X)=S+T=araaraara and f(S,T,Y)=T+T+T=araaraara, so f(S,T,X)=f(S,T,Y).\nFor the 2nd and 3rd test cases, there is no T that satisfies the condition.\n\nSample Input 2\n\n2\r\nempty\r\n10101\r\n00\r\nempty\r\n11111\r\n111\n\nSample Output 2\n\nYes\r\nYes\r\n\nT can be empty.", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"3\\naraara\\n01\\n111\\naraaaa\\n100100\\n0010111\\nabacabac\\n0\\n1111\\n\", \"output\": \"Yes\\nNo\\nNo\\n\", \"testtype\": \"stdin\"}, {\"input\": \"2\\nempty\\n10101\\n00\\nempty\\n11111\\n111\\n\", \"output\": \"Yes\\nYes\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "3540", "question_title": "hash-divided-string", "question_content": "You are given a string s of length n and an integer k, where n is a multiple of k. Your task is to hash the string s into a new string called result, which has a length of n / k.\nFirst, divide s into n / k substrings, each with a length of k. Then, initialize result as an empty string.\nFor each substring in order from the beginning:\n\nThe hash value of a character is the index of that character in the English alphabet (e.g., 'a' → 0, 'b' → 1, ..., 'z' → 25).\nCalculate the sum of all the hash values of the characters in the substring.\nFind the remainder of this sum when divided by 26, which is called hashedChar.\nIdentify the character in the English lowercase alphabet that corresponds to hashedChar.\nAppend that character to the end of result.\n\nReturn result.\n \nExample 1:\n\nInput: s = \"abcd\", k = 2\nOutput: \"bf\"\nExplanation:\nFirst substring: \"ab\", 0 + 1 = 1, 1 % 26 = 1, result[0] = 'b'.\nSecond substring: \"cd\", 2 + 3 = 5, 5 % 26 = 5, result[1] = 'f'.\n\nExample 2:\n\nInput: s = \"mxz\", k = 3\nOutput: \"i\"\nExplanation:\nThe only substring: \"mxz\", 12 + 23 + 25 = 60, 60 % 26 = 8, result[0] = 'i'.\n\n \nConstraints:\n\n1 <= k <= 100\nk <= s.length <= 1000\ns.length is divisible by k.\ns consists only of lowercase English letters.", "difficulty": "medium", "starter_code": "class Solution:\n    def stringHash(self, s: str, k: int) -> str:\n        ", "public_test_cases": "[{\"input\": \"\\\"abcd\\\"\\n2\", \"output\": \"\\\"bf\\\"\", \"testtype\": \"functional\"}, {\"input\": \"\\\"mxz\\\"\\n3\", \"output\": \"\\\"i\\\"\", \"testtype\": \"functional\"}]"}
{"question_id": "3570", "question_title": "count-of-substrings-containing-every-vowel-and-k-consonants-i", "question_content": "You are given a string word and a non-negative integer k.\nReturn the total number of substrings of word that contain every vowel ('a', 'e', 'i', 'o', and 'u') at least once and exactly k consonants.\n \nExample 1:\n\nInput: word = \"aeioqq\", k = 1\nOutput: 0\nExplanation:\nThere is no substring with every vowel.\n\nExample 2:\n\nInput: word = \"aeiou\", k = 0\nOutput: 1\nExplanation:\nThe only substring with every vowel and zero consonants is word[0..4], which is \"aeiou\".\n\nExample 3:\n\nInput: word = \"ieaouqqieaouqq\", k = 1\nOutput: 3\nExplanation:\nThe substrings with every vowel and one consonant are:\n\nword[0..5], which is \"ieaouq\".\nword[6..11], which is \"qieaou\".\nword[7..12], which is \"ieaouq\".\n\n\n \nConstraints:\n\n5 <= word.length <= 250\nword consists only of lowercase English letters.\n0 <= k <= word.length - 5", "difficulty": "medium", "starter_code": "class Solution:\n    def countOfSubstrings(self, word: str, k: int) -> int:\n        ", "public_test_cases": "[{\"input\": \"\\\"aeioqq\\\"\\n1\", \"output\": \"0\", \"testtype\": \"functional\"}, {\"input\": \"\\\"aeiou\\\"\\n0\", \"output\": \"1\", \"testtype\": \"functional\"}, {\"input\": \"\\\"ieaouqqieaouqq\\\"\\n1\", \"output\": \"3\", \"testtype\": \"functional\"}]"}
{"question_id": "abc388_a", "question_title": "?UPC", "question_content": "You are given a string S. Here, the first character of S is an uppercase English letter, and the second and subsequent characters are lowercase English letters.\nPrint the string formed by concatenating the first character of S and UPC in this order.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\n\nOutput\n\nPrint the string formed by concatenating the first character of S and UPC in this order.\n\nConstraints\n\n\n- S is a string of length between 1 and 100, inclusive.\n- The first character of S is an uppercase English letter.\n- The second and subsequent characters of S are lowercase English letters.\n\nSample Input 1\n\nKyoto\n\nSample Output 1\n\nKUPC\r\n\nThe first character of Kyoto is K, so concatenate K and UPC, and print KUPC.\n\nSample Input 2\n\nTohoku\n\nSample Output 2\n\nTUPC", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"Kyoto\", \"output\": \"KUPC\", \"testtype\": \"stdin\"}, {\"input\": \"Tohoku\", \"output\": \"TUPC\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc394_c", "question_title": "Debug", "question_content": "You are given a string S consisting of uppercase English letters.\nApply the following procedure to S, and then output the resulting string:\n\nAs long as the string contains WA as a (contiguous) substring, repeat the following operation:\n\n- Among all occurrences of WA in the string, replace the leftmost one with AC.\n\n\nIt can be proved under the constraints of this problem that this operation is repeated at most a finite number of times.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\n\nOutput\n\nPrint the resulting string after performing the procedure described in the problem statement on S.\n\nConstraints\n\n\n- S is a string of uppercase English letters with length between 1 and 3\\times 10^5, inclusive.\n\nSample Input 1\n\nWACWA\n\nSample Output 1\n\nACCAC\n\nInitially, the string is S= WACWA.\nThis string contains WA as a substring in two places: from the 1st to the 2nd character, and from the 4th to the 5th character.\nIn the first operation, we replace the leftmost occurrence (the substring from the 1st to the 2nd character) with AC, resulting in ACCWA.\nAfter the first operation, the string contains WA as a substring in exactly one place: from the 4th to the 5th character.\nIn the second operation, we replace it with AC, resulting in ACCAC.\nSince ACCAC does not contain WA as a substring, the procedure ends. Therefore, we output ACCAC.\n\nSample Input 2\n\nWWA\n\nSample Output 2\n\nACC\n\nInitially, the string is S= WWA.\nThis string contains WA as a substring in exactly one place: from the 2nd to the 3rd character.\nIn the first operation, we replace it with AC, resulting in WAC.\nThen, after the first operation, the string contains WA in exactly one place: from the 1st to the 2nd character.\nIn the second operation, we replace it with AC, resulting in ACC.\nSince ACC does not contain WA as a substring, the procedure ends. Therefore, we output ACC.\n\nSample Input 3\n\nWWWWW\n\nSample Output 3\n\nWWWWW\n\nSince S does not contain WA as a substring from the start, no operations are performed and the procedure ends immediately. Therefore, we output WWWWW.", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"WACWA\", \"output\": \"ACCAC\", \"testtype\": \"stdin\"}, {\"input\": \"WWA\", \"output\": \"ACC\", \"testtype\": \"stdin\"}, {\"input\": \"WWWWW\", \"output\": \"WWWWW\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc394_d", "question_title": "Colorful Bracket Sequence", "question_content": "You are given a string S consisting of six types of characters: (, ), [, ], <, >.\nA string T is called a colorful bracket sequence if it satisfies the following condition:\n\nIt is possible to turn T into an empty string by repeating the following operation any number of times (possibly zero):\n\n- If there exists a contiguous substring of T that is one of (), [], or <>, choose one such substring and delete it.\n- If the deleted substring was at the beginning or end of T, the remainder becomes the new T.\n- Otherwise, concatenate the part before the deleted substring and the part after the deleted substring, and that becomes the new T.\n\n\nDetermine whether S is a colorful bracket sequence.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\n\nOutput\n\nIf S is a colorful bracket sequence, print Yes; otherwise, print No.\n\nConstraints\n\n\n- S is a string of length between 1 and 2\\times 10^5, inclusive.\n- S consists of (, ), [, ], <, >.\n\nSample Input 1\n\n([])<>()\n\nSample Output 1\n\nYes\n\nFor S=([])<>(), it is possible to turn it into an empty string by repeating the operation as follows:\n\n- Delete the substring [] from the 2nd to the 3rd character in ([])<>(), then concatenate the parts before and after it. The string becomes ()<>().\n- Delete the substring () from the 1st to the 2nd character in ()<>(). The string becomes <>().\n- Delete the substring <> from the 1st to the 2nd character in <>(). The string becomes ().\n- Delete the substring () from the 1st to the 2nd character in (). The string becomes empty.\n\nThus, S=([])<>() is a colorful bracket sequence, so print Yes.\n\nSample Input 2\n\n([<)]>\n\nSample Output 2\n\nNo\n\nSince S=([<)]> does not contain (), [], or <> as a contiguous substring, we cannot perform the 1st operation, and in particular S is not a colorful bracket sequence. Therefore, print No.\n\nSample Input 3\n\n())\n\nSample Output 3\n\nNo\n\nIt is impossible to turn S into an empty string by repeating the operations.\nTherefore, S is not a colorful bracket sequence, so print No.", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"([])<>()\", \"output\": \"Yes\", \"testtype\": \"stdin\"}, {\"input\": \"([<)]>\", \"output\": \"No\", \"testtype\": \"stdin\"}, {\"input\": \"())\", \"output\": \"No\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc396_a", "question_title": "Triple Four", "question_content": "You are given an integer sequence of length N: A = (A_1,A_2,\\ldots,A_N).\nDetermine whether there is a place in A where the same element appears three or more times in a row.\nMore formally, determine whether there exists an integer i with 1 \\le i \\le N-2 such that A_i = A_{i+1} = A_{i+2}.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nA_1 A_2 \\ldots A_N\n\nOutput\n\nIf there is a place in A where the same element appears three or more times in a row, print Yes. Otherwise, print No.\n\nConstraints\n\n\n- 3 \\le N \\le 100\n- 1 \\le A_i \\le 100\n- All input values are integers.\n\nSample Input 1\n\n5\r\n1 4 4 4 2\n\nSample Output 1\n\nYes\r\n\nWe have A=(1,4,4,4,2). There is a place where 4 appears three times in a row, so print Yes.\n\nSample Input 2\n\n6\r\n2 4 4 2 2 4\n\nSample Output 2\n\nNo\r\n\nWe have A=(2,4,4,2,2,4). There is no place where the same element appears three or more times in a row, so print No.\n\nSample Input 3\n\n8\r\n1 4 2 5 7 7 7 2\n\nSample Output 3\n\nYes\n\nSample Input 4\n\n10\r\n1 2 3 4 5 6 7 8 9 10\n\nSample Output 4\n\nNo\n\nSample Input 5\n\n13\r\n1 1 1 1 1 1 1 1 1 1 1 1 1\n\nSample Output 5\n\nYes", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"5\\n1 4 4 4 2\", \"output\": \"Yes\", \"testtype\": \"stdin\"}, {\"input\": \"6\\n2 4 4 2 2 4\", \"output\": \"No\", \"testtype\": \"stdin\"}, {\"input\": \"8\\n1 4 2 5 7 7 7 2\", \"output\": \"Yes\", \"testtype\": \"stdin\"}, {\"input\": \"10\\n1 2 3 4 5 6 7 8 9 10\", \"output\": \"No\", \"testtype\": \"stdin\"}, {\"input\": \"13\\n1 1 1 1 1 1 1 1 1 1 1 1 1\", \"output\": \"Yes\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc398_f", "question_title": "ABCBA", "question_content": "Find one shortest palindrome that has S as its prefix.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\n\nOutput\n\nPrint the answer.\r\nIf multiple solutions exist, any of them is accepted.\n\nConstraints\n\n\n- S is a string of length between 1 and 500000, inclusive, consisting of uppercase English letters.\n\nSample Input 1\n\nABC\n\nSample Output 1\n\nABCBA\r\n\nABCBA is a shortest palindrome that has S= ABC as its prefix.\n\nSample Input 2\n\nZ\n\nSample Output 2\n\nZ\r\n\nZ is a shortest palindrome that has S= Z as its prefix.\n\nSample Input 3\n\nTREE\n\nSample Output 3\n\nTREERT\r\n\nTREERT is a shortest palindrome that has S= TREE as its prefix.", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"ABC\", \"output\": \"ABCBA\", \"testtype\": \"stdin\"}, {\"input\": \"Z\", \"output\": \"Z\", \"testtype\": \"stdin\"}, {\"input\": \"TREE\", \"output\": \"TREERT\", \"testtype\": \"stdin\"}]"}
{"question_id": "3709", "question_title": "find-special-substring-of-length-k", "question_content": "You are given a string s and an integer k.\nDetermine if there exists a substring of length exactly k in s that satisfies the following conditions:\n\nThe substring consists of only one distinct character (e.g., \"aaa\" or \"bbb\").\nIf there is a character immediately before the substring, it must be different from the character in the substring.\nIf there is a character immediately after the substring, it must also be different from the character in the substring.\n\nReturn true if such a substring exists. Otherwise, return false.\n \nExample 1:\n\nInput: s = \"aaabaaa\", k = 3\nOutput: true\nExplanation:\nThe substring s[4..6] == \"aaa\" satisfies the conditions.\n\nIt has a length of 3.\nAll characters are the same.\nThe character before \"aaa\" is 'b', which is different from 'a'.\nThere is no character after \"aaa\".\n\n\nExample 2:\n\nInput: s = \"abc\", k = 2\nOutput: false\nExplanation:\nThere is no substring of length 2 that consists of one distinct character and satisfies the conditions.\n\n \nConstraints:\n\n1 <= k <= s.length <= 100\ns consists of lowercase English letters only.", "difficulty": "easy", "starter_code": "class Solution:\n    def hasSpecialSubstring(self, s: str, k: int) -> bool:\n        ", "public_test_cases": "[{\"input\": \"\\\"aaabaaa\\\"\\n3\", \"output\": \"true\", \"testtype\": \"functional\"}, {\"input\": \"\\\"abc\\\"\\n2\", \"output\": \"false\", \"testtype\": \"functional\"}]"}
{"question_id": "3736", "question_title": "find-valid-pair-of-adjacent-digits-in-string", "question_content": "You are given a string s consisting only of digits. A valid pair is defined as two adjacent digits in s such that:\n\nThe first digit is not equal to the second.\nEach digit in the pair appears in s exactly as many times as its numeric value.\n\nReturn the first valid pair found in the string s when traversing from left to right. If no valid pair exists, return an empty string.\n \nExample 1:\n\nInput: s = \"2523533\"\nOutput: \"23\"\nExplanation:\nDigit '2' appears 2 times and digit '3' appears 3 times. Each digit in the pair \"23\" appears in s exactly as many times as its numeric value. Hence, the output is \"23\".\n\nExample 2:\n\nInput: s = \"221\"\nOutput: \"21\"\nExplanation:\nDigit '2' appears 2 times and digit '1' appears 1 time. Hence, the output is \"21\".\n\nExample 3:\n\nInput: s = \"22\"\nOutput: \"\"\nExplanation:\nThere are no valid adjacent pairs.\n\n \nConstraints:\n\n2 <= s.length <= 100\ns only consists of digits from '1' to '9'.", "difficulty": "easy", "starter_code": "class Solution:\n    def findValidPair(self, s: str) -> str:\n        ", "public_test_cases": "[{\"input\": \"\\\"2523533\\\"\", \"output\": \"\\\"23\\\"\", \"testtype\": \"functional\"}, {\"input\": \"\\\"221\\\"\", \"output\": \"\\\"21\\\"\", \"testtype\": \"functional\"}, {\"input\": \"\\\"22\\\"\", \"output\": \"\\\"\\\"\", \"testtype\": \"functional\"}]"}
