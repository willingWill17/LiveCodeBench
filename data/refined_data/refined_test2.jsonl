{"question_id": "abc344_d", "question_title": "String Bags", "question_content": "You initially have an empty string S.\r\nAdditionally, there are bags 1, 2, \\dots, N, each containing some strings.\r\nBag i contains A_i strings S_{i,1}, S_{i,2}, \\dots, S_{i,A_i}.\nYou will repeat the following steps for i = 1, 2, \\dots, N:\n\n- Choose and perform one of the following two actions:\n- Pay 1 yen, select exactly one string from bag i, and concatenate it to the end of S.\n- Do nothing.\n\n\n\nGiven a string T, find the minimum amount of money required to make the final S equal T.\r\nIf there is no way to make the final S equal T, print -1.\n\nInput\n\nThe input is given from Standard Input in the following format:\nT\r\nN\r\nA_1 S_{1,1} S_{1,2} \\dots S_{1,A_1}\r\nA_2 S_{2,1} S_{2,2} \\dots S_{2,A_2}\r\n\\vdots\r\nA_N S_{N,1} S_{N,2} \\dots S_{N,A_N}\n\nOutput\n\nPrint the answer as an integer.\n\nConstraints\n\n\n- T is a string consisting of lowercase English letters with length between 1 and 100, inclusive.\n- N is an integer between 1 and 100, inclusive.\n- A_i is an integer between 1 and 10, inclusive.\n- S_{i,j} is a string consisting of lowercase English letters with length between 1 and 10, inclusive.\n\nSample Input 1\n\nabcde\r\n3\r\n3 ab abc abcd\r\n4 f c cd bcde\r\n2 e de\n\nSample Output 1\n\n2\r\n\nFor example, doing the following makes the final S equal T with two yen, which can be shown to be the minimum amount required.\n\n- For i=1, select abc from bag 1 and concatenate it to the end of S, making S= abc.\n- For i=2, do nothing.\n- For i=3, select de from bag 3 and concatenate it to the end of S, making S= abcde.\n\nSample Input 2\n\nabcde\r\n3\r\n2 ab abc\r\n3 f c bcde\r\n1 e\n\nSample Output 2\n\n-1\r\n\nThere is no way to make the final S equal T, so print -1.\n\nSample Input 3\n\naaabbbbcccc\r\n6\r\n2 aa aaa\r\n2 dd ddd\r\n2 ab aabb\r\n4 bbaa bbbc bbb bbcc\r\n2 cc bcc\r\n3 ccc cccc ccccc\n\nSample Output 3\n\n4", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"abcde\\n3\\n3 ab abc abcd\\n4 f c cd bcde\\n2 e de\\n\", \"output\": \"2\\n\", \"testtype\": \"stdin\"}, {\"input\": \"abcde\\n3\\n2 ab abc\\n3 f c bcde\\n1 e\\n\", \"output\": \"-1\\n\", \"testtype\": \"stdin\"}, {\"input\": \"aaabbbbcccc\\n6\\n2 aa aaa\\n2 dd ddd\\n2 ab aabb\\n4 bbaa bbbc bbb bbcc\\n2 cc bcc\\n3 ccc cccc ccccc\\n\", \"output\": \"4\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc344_a", "question_title": "Spoiler", "question_content": "You are given a string S consisting of lowercase English letters and |. S is guaranteed to contain exactly two |s.\nRemove the characters between the two |s, including the |s themselves, and print the resulting string.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- S is a string of length between 2 and 100, inclusive, consisting of lowercase English letters and |.\n- S contains exactly two |s.\n\nSample Input 1\n\natcoder|beginner|contest\n\nSample Output 1\n\natcodercontest\r\n\nRemove all the characters between the two |s and print the result.\n\nSample Input 2\n\n|spoiler|\n\nSample Output 2\n\n\r\n\nIt is possible that all characters are removed.\n\nSample Input 3\n\n||xyz\n\nSample Output 3\n\nxyz", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"atcoder|beginner|contest\\n\", \"output\": \"atcodercontest\\n\", \"testtype\": \"stdin\"}, {\"input\": \"|spoiler|\\n\", \"output\": \"\\n\", \"testtype\": \"stdin\"}, {\"input\": \"||xyz\\n\", \"output\": \"xyz\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc344_c", "question_title": "A+B+C", "question_content": "You are given three sequences A=(A_1,\\ldots,A_N), B=(B_1,\\ldots,B_M), and C=(C_1,\\ldots,C_L).\nAdditionally, a sequence X=(X_1,\\ldots,X_Q) is given. For each i=1,\\ldots,Q, solve the following problem:\nProblem: Is it possible to select one element from each of A, B, and C so that their sum is X_i?\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\nA_1 \\ldots A_N\nM\nB_1 \\ldots B_M\nL \nC_1 \\ldots C_L\nQ\nX_1 \\ldots X_Q\n\nOutput\n\nPrint Q lines.\nThe i-th line should contain Yes if it is possible to select one element from each of A, B, and C so that their sum is X_i, and No otherwise.\n\nConstraints\n\n\n- 1 \\leq N,M,L \\leq 100\n- 0 \\leq A_i, B_i ,C_i \\leq 10^8\n- 1 \\leq Q \\leq 2\\times 10^5\n- 0 \\leq X_i \\leq 3\\times 10^8\n- All input values are integers.\n\nSample Input 1\n\n3\n1 2 3\n2\n2 4\n6\n1 2 4 8 16 32\n4\n1 5 10 50\n\nSample Output 1\n\nNo\nYes\nYes\nNo\n\n\n- It is impossible to select one element from each of A, B, and C so that their sum is 1.\n- Selecting 1, 2, and 2 from A, B, and C, respectively, makes the sum 5.\n- Selecting 2, 4, and 4 from A, B, and C, respectively, makes the sum 10.\n- It is impossible to select one element from each of A, B, and C so that their sum is 50.", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"3\\n1 2 3\\n2\\n2 4\\n6\\n1 2 4 8 16 32\\n4\\n1 5 10 50\\n\", \"output\": \"No\\nYes\\nYes\\nNo\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc344_b", "question_title": "Delimiter", "question_content": "You are given N integers A_1,A_2,\\dots,A_N, one per line, over N lines. However, N is not given in the input.\r\nFurthermore, the following is guaranteed:\n\n- A_i \\neq 0 ( 1 \\le i \\le N-1 )\n- A_N = 0\n\nPrint A_N, A_{N-1},\\dots,A_1 in this order.\n\nInput\n\nThe input is given from Standard Input in the following format:\nA_1\r\nA_2\r\n\\vdots\r\nA_N\n\nOutput\n\nPrint A_N, A_{N-1}, \\dots, A_1 in this order, as integers, separated by newlines.\n\nConstraints\n\n\n- All input values are integers.\n- 1 \\le N \\le 100\n- 1 \\le A_i \\le 10^9 ( 1 \\le i \\le N-1 )\n- A_N = 0\n\nSample Input 1\n\n3\r\n2\r\n1\r\n0\n\nSample Output 1\n\n0\r\n1\r\n2\r\n3\r\n\nNote again that N is not given in the input.\r\nHere, N=4 and A=(3,2,1,0).\n\nSample Input 2\n\n0\n\nSample Output 2\n\n0\r\n\nA=(0).\n\nSample Input 3\n\n123\r\n456\r\n789\r\n987\r\n654\r\n321\r\n0\n\nSample Output 3\n\n0\r\n321\r\n654\r\n987\r\n789\r\n456\r\n123", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"3\\n2\\n1\\n0\\n\", \"output\": \"0\\n1\\n2\\n3\\n\", \"testtype\": \"stdin\"}, {\"input\": \"0\\n\", \"output\": \"0\\n\", \"testtype\": \"stdin\"}, {\"input\": \"123\\n456\\n789\\n987\\n654\\n321\\n0\\n\", \"output\": \"0\\n321\\n654\\n987\\n789\\n456\\n123\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc344_e", "question_title": "Insert or Erase", "question_content": "You are given a sequence A=(A_1,\\ldots,A_N) of length N. The elements of A are distinct.\nProcess Q queries in the order they are given. Each query is of one of the following two types:\n\n- 1 x y : Insert y immediately after the element x in A. It is guaranteed that x exists in A when this query is given.\n- 2 x : Remove the element x from A. It is guaranteed that x exists in A when this query is given.\n\nIt is guaranteed that after processing each query, A will not be empty, and its elements will be distinct.\nPrint A after processing all the queries.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN \r\nA_1 \\ldots A_N\r\nQ\r\n\\mathrm{Query}_1\r\n\\vdots \r\n\\mathrm{Query}_Q\r\n\nHere, \\mathrm{Query}_i represents the i-th query and is given in one of the following formats:\n1 x y\r\n\n2 x\n\nOutput\n\nLet A=(A_1,\\ldots,A_K) be the sequence after processing all the queries. Print A_1,\\ldots,A_K in this order, separated by spaces.\n\nConstraints\n\n\n- 1 \\leq N \\leq 2\\times 10^5 \n- 1 \\leq Q \\leq 2\\times 10^5\n- 1 \\leq A_i \\leq 10^9\n- A_i \\neq A_j \n- For queries of the first type, 1 \\leq x,y \\leq 10^9.\n- When a query of the first type is given, x exists in A.\n- For queries of the second type, 1 \\leq x \\leq 10^9.\n- When a query of the second type is given, x exists in A.\n- After processing each query, A is not empty, and its elements are distinct.\n- All input values are integers.\n\nSample Input 1\n\n4\r\n2 1 4 3\r\n4\r\n2 1\r\n1 4 5\r\n2 2\r\n1 5 1\n\nSample Output 1\n\n4 5 1 3\r\n\nThe queries are processed as follows:\n\n- Initially, A=(2,1,4,3).\n- The first query removes 1, making A=(2,4,3).\n- The second query inserts 5 immediately after 4, making A=(2,4,5,3).\n- The third query removes 2, making A=(4,5,3).\n- The fourth query inserts 1 immediately after 5, making A=(4,5,1,3).\n\nSample Input 2\n\n6\r\n3 1 4 5 9 2\r\n7\r\n2 5\r\n1 3 5\r\n1 9 7\r\n2 9\r\n2 3\r\n1 2 3\r\n2 4\n\nSample Output 2\n\n5 1 7 2 3", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"4\\n2 1 4 3\\n4\\n2 1\\n1 4 5\\n2 2\\n1 5 1\\n\", \"output\": \"4 5 1 3\\n\", \"testtype\": \"stdin\"}, {\"input\": \"6\\n3 1 4 5 9 2\\n7\\n2 5\\n1 3 5\\n1 9 7\\n2 9\\n2 3\\n1 2 3\\n2 4\\n\", \"output\": \"5 1 7 2 3\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc345_d", "question_title": "Tiling", "question_content": "There is a grid of H rows and W columns, each cell having a side length of 1, and we have N tiles.\nThe i-th tile (1\\leq i\\leq N) is a rectangle of size A_i\\times B_i.\nDetermine whether it is possible to place the tiles on the grid so that all of the following conditions are satisfied:\n\n- Every cell is covered by exactly one tile.\n- It is fine to have unused tiles.\n- The tiles may be rotated or flipped when placed. However, each tile must be aligned with the edges of the cells without extending outside the grid.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN H W\nA_1 B_1\nA_2 B_2\n\\ldots\nA_N B_N\n\nOutput\n\nIf it is possible to place the tiles on the grid so that all of the conditions in the problem statement are satisfied, print Yes; otherwise, print No.\n\nConstraints\n\n\n- 1\\leq N\\leq 7\n- 1 \\leq H,W \\leq 10\n- 1\\leq A_i,B_i\\leq 10\n- All input values are integers.\n\nSample Input 1\n\n5 5 5\n1 1\n3 3\n4 4\n2 3\n2 5\n\nSample Output 1\n\nYes\n\nPlacing the 2-nd, 4-th, and 5-th tiles as shown below covers every cell of the grid by exactly one tile.\n\nHence, print Yes.\n\nSample Input 2\n\n1 1 2\n2 3\n\nSample Output 2\n\nNo\n\nIt is impossible to place the tile without letting it extend outside the grid.\nHence, print No.\n\nSample Input 3\n\n1 2 2\n1 1\n\nSample Output 3\n\nNo\n\nIt is impossible to cover all cells with the tile.\nHence, print No.\n\nSample Input 4\n\n5 3 3\n1 1\n2 2\n2 2\n2 2\n2 2\n\nSample Output 4\n\nNo\n\nNote that each cell must be covered by exactly one tile.", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"5 5 5\\n1 1\\n3 3\\n4 4\\n2 3\\n2 5\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"1 1 2\\n2 3\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}, {\"input\": \"1 2 2\\n1 1\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}, {\"input\": \"5 3 3\\n1 1\\n2 2\\n2 2\\n2 2\\n2 2\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc345_b", "question_title": "Integer Division Returns", "question_content": "Given an integer X between -10^{18} and 10^{18}, inclusive, print \\left\\lceil \\dfrac{X}{10} \\right\\rceil.\r\nHere, \\left\\lceil a \\right\\rceil denotes the smallest integer not less than a.\n\nInput\n\nThe input is given from Standard Input in the following format:\nX\n\nOutput\n\nPrint \\left\\lceil \\dfrac{X}{10} \\right\\rceil as an integer.\n\nConstraints\n\n\n- -10^{18} \\leq X \\leq 10^{18}\n- X is an integer.\n\nSample Input 1\n\n27\n\nSample Output 1\n\n3\r\n\nThe integers not less than \\frac{27}{10} = 2.7 are 3, 4, 5, \\dots. Among these, the smallest is 3, so \\left \\lceil \\frac{27}{10} \\right \\rceil = 3.\n\nSample Input 2\n\n-13\n\nSample Output 2\n\n-1\r\n\nThe integers not less than \\frac{-13}{10} = -1.3 are all positive integers, 0, and -1. Among these, the smallest is -1, so \\left \\lceil \\frac{-13}{10} \\right \\rceil = -1.\n\nSample Input 3\n\n40\n\nSample Output 3\n\n4\r\n\nThe smallest integer not less than \\frac{40}{10} = 4 is 4 itself.\n\nSample Input 4\n\n-20\n\nSample Output 4\n\n-2\n\nSample Input 5\n\n123456789123456789\n\nSample Output 5\n\n12345678912345679", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"27\\n\", \"output\": \"3\\n\", \"testtype\": \"stdin\"}, {\"input\": \"-13\\n\", \"output\": \"-1\\n\", \"testtype\": \"stdin\"}, {\"input\": \"40\\n\", \"output\": \"4\\n\", \"testtype\": \"stdin\"}, {\"input\": \"-20\\n\", \"output\": \"-2\\n\", \"testtype\": \"stdin\"}, {\"input\": \"123456789123456789\\n\", \"output\": \"12345678912345679\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc346_d", "question_title": "Gomamayo Sequence", "question_content": "You are given a string S of length N consisting of 0 and 1.\nA string T of length N consisting of 0 and 1 is a good string if and only if it satisfies the following condition:\n\n- There is exactly one integer i such that 1 \\leq i \\leq N - 1 and the i-th and (i + 1)-th characters of T are the same.\n\nFor each i = 1,2,\\ldots, N, you can choose whether or not to perform the following operation once:\n\n- If the i-th character of S is 0, replace it with 1, and vice versa. The cost of this operation, if performed, is C_i.\n\nFind the minimum total cost required to make S a good string.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nS\r\nC_1 C_2 \\ldots C_N\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- 2 \\leq N \\leq 2 \\times 10^5\n- S is a string of length N consisting of 0 and 1.\n- 1 \\leq C_i \\leq 10^9\n- N and C_i are integers.\n\nSample Input 1\n\n5\r\n00011\r\n3 9 2 6 4\n\nSample Output 1\n\n7\r\n\nPerforming the operation for i = 1, 5 and not performing it for i = 2, 3, 4 makes S = 10010, which is a good string. The cost incurred in this case is 7, and it is impossible to make S a good string for less than 7, so print 7.\n\nSample Input 2\n\n4\r\n1001\r\n1 2 3 4\n\nSample Output 2\n\n0\n\nSample Input 3\n\n11\r\n11111100111\r\n512298012 821282085 543342199 868532399 690830957 973970164 928915367 954764623 923012648 540375785 925723427\n\nSample Output 3\n\n2286846953", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"5\\n00011\\n3 9 2 6 4\\n\", \"output\": \"7\\n\", \"testtype\": \"stdin\"}, {\"input\": \"4\\n1001\\n1 2 3 4\\n\", \"output\": \"0\\n\", \"testtype\": \"stdin\"}, {\"input\": \"11\\n11111100111\\n512298012 821282085 543342199 868532399 690830957 973970164 928915367 954764623 923012648 540375785 925723427\\n\", \"output\": \"2286846953\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc346_b", "question_title": "Piano", "question_content": "There is an infinitely long piano keyboard.\nIs there a continuous segment within this keyboard that consists of W white keys and B black keys?\n\nLet S be the string formed by infinitely repeating the string wbwbwwbwbwbw.\nIs there a substring of S that consists of W occurrences of w and B occurrences of b?\n\nWhat is a substring of S?\nA substring of S is a string that can be formed by concatenating the l-th, (l+1)-th, \\dots, r-th characters of S in this order for some two positive integers l and r (l\\leq r).\n\nInput\n\nThe input is given from Standard Input in the following format:\nW B\n\nOutput\n\nIf there is a substring of S that consists of W occurrences of w and B occurrences of b, print Yes; otherwise, print No.\n\nConstraints\n\n\n- W and B are integers.\n- 0\\leq W,B \\leq 100\n- W+B \\geq 1\n\nSample Input 1\n\n3 2\n\nSample Output 1\n\nYes\n\nThe first 15 characters of S are wbwbwwbwbwbwwbw. You can take the 11-th through 15-th characters to form the string bwwbw, which is a substring consisting of three occurrences of w and two occurrences of b.\n\nSample Input 2\n\n3 0\n\nSample Output 2\n\nNo\n\nThe only string consisting of three occurrences of w and zero occurrences of b is www, which is not a substring of S.\n\nSample Input 3\n\n92 66\n\nSample Output 3\n\nYes", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"3 2\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3 0\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}, {\"input\": \"92 66\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc346_e", "question_title": "Paint", "question_content": "There is a grid with H rows and W columns. Initially, all cells are painted with color 0.\nYou will perform the following operations in the order i = 1, 2, \\ldots, M.\n\n- \nIf T_i = 1, repaint all cells in the A_i-th row with color X_i.\n\n- \nIf T_i = 2, repaint all cells in the A_i-th column with color X_i.\n\n\nAfter all operations are completed, for each color i that exists on the grid, find the number of cells that are painted with color i.\n\nInput\n\nThe input is given from Standard Input in the following format:\nH W M\nT_1 A_1 X_1\nT_2 A_2 X_2\n\\vdots\nT_M A_M X_M\n\nOutput\n\nLet K be the number of distinct integers i such that there are cells painted with color i. Print K + 1 lines.\nThe first line should contain the value of K.\nThe second and subsequent lines should contain, for each color i that exists on the grid, the color number i and the number of cells painted with that color.\nSpecifically, the (i + 1)-th line (1 \\leq i \\leq K) should contain the color number c_i and the number of cells x_i painted with color c_i, in this order, separated by a space.\nHere, print the color numbers in ascending order. That is, ensure that c_1 < c_2 < \\ldots < c_K. Note also that x_i > 0 is required.\n\nConstraints\n\n\n- 1 \\leq H, W, M \\leq 2 \\times 10^5\n- T_i \\in \\lbrace 1, 2 \\rbrace\n- 1 \\leq A_i \\leq H for each i such that T_i = 1,\n- 1 \\leq A_i \\leq W for each i such that T_i = 2.\n- 0 \\leq X_i \\leq 2 \\times 10^5\n- All input values are integers.\n\nSample Input 1\n\n3 4 4\n1 2 5\n2 4 0\n1 3 3\n1 3 2\n\nSample Output 1\n\n3\n0 5\n2 4\n5 3\n\nThe operations will change the colors of the cells in the grid as follows:\n0000   0000   0000   0000   0000\n0000 → 5555 → 5550 → 5550 → 5550 \n0000   0000   0000   3333   2222\n\nEventually, there are five cells painted with color 0, four with color 2, and three with color 5.\n\nSample Input 2\n\n1 1 5\n1 1 1\n1 1 10\n2 1 100\n1 1 1000\n2 1 10000\n\nSample Output 2\n\n1\n10000 1\n\nSample Input 3\n\n5 5 10\n1 1 1\n1 2 2\n1 3 3\n1 4 4\n1 5 5\n2 1 6\n2 2 7\n2 3 8\n2 4 9\n2 5 10\n\nSample Output 3\n\n5\n6 5\n7 5\n8 5\n9 5\n10 5", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"3 4 4\\n1 2 5\\n2 4 0\\n1 3 3\\n1 3 2\\n\", \"output\": \"3\\n0 5\\n2 4\\n5 3\\n\", \"testtype\": \"stdin\"}, {\"input\": \"1 1 5\\n1 1 1\\n1 1 10\\n2 1 100\\n1 1 1000\\n2 1 10000\\n\", \"output\": \"1\\n10000 1\\n\", \"testtype\": \"stdin\"}, {\"input\": \"5 5 10\\n1 1 1\\n1 2 2\\n1 3 3\\n1 4 4\\n1 5 5\\n2 1 6\\n2 2 7\\n2 3 8\\n2 4 9\\n2 5 10\\n\", \"output\": \"5\\n6 5\\n7 5\\n8 5\\n9 5\\n10 5\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc346_a", "question_title": "Adjacent Product", "question_content": "You are given N integers A_1, A_2, \\dots, A_N.\r\nAlso, define B_i = A_i \\times A_{i+1}\\ (1 \\leq i \\leq N-1).\nPrint B_1, B_2, \\dots, B_{N-1} in this order, separated by spaces.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nA_1 A_2 \\dots A_N\n\nOutput\n\nPrint B_1, B_2, \\dots, B_{N-1} in this order, separated by spaces.\n\nConstraints\n\n\n- 2 \\leq N \\leq 100\n- 1 \\leq A_i \\leq 100\n- All input values are integers.\n\nSample Input 1\n\n3\r\n3 4 6\n\nSample Output 1\n\n12 24\r\n\nWe have B_1 = A_1 \\times A_2 = 12, B_2 = A_2 \\times A_3 = 24.\n\nSample Input 2\n\n5\r\n22 75 26 45 72\n\nSample Output 2\n\n1650 1950 1170 3240", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"3\\n3 4 6\\n\", \"output\": \"12 24\\n\", \"testtype\": \"stdin\"}, {\"input\": \"5\\n22 75 26 45 72\\n\", \"output\": \"1650 1950 1170 3240\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc346_c", "question_title": "Σ", "question_content": "You are given a sequence of positive integers A=(A_1,A_2,\\dots,A_N) of length N and a positive integer K.\nFind the sum of the integers between 1 and K, inclusive, that do not appear in the sequence A.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN K\r\nA_1 A_2 \\dots A_N\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- 1\\leq N \\leq 2\\times 10^5\n- 1\\leq K \\leq 2\\times 10^9\n- 1\\leq A_i \\leq 2\\times 10^9\n- All input values are integers.\n\nSample Input 1\n\n4 5\r\n1 6 3 1\n\nSample Output 1\n\n11\r\n\nAmong the integers between 1 and 5, three numbers, 2, 4, and 5, do not appear in A.\nThus, print their sum: 2+4+5=11.\n\nSample Input 2\n\n1 3\r\n346\n\nSample Output 2\n\n6\n\nSample Input 3\n\n10 158260522\r\n877914575 24979445 623690081 262703497 24979445 1822804784 1430302156 1161735902 923078537 1189330739\n\nSample Output 3\n\n12523196466007058", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"4 5\\n1 6 3 1\\n\", \"output\": \"11\\n\", \"testtype\": \"stdin\"}, {\"input\": \"1 3\\n346\\n\", \"output\": \"6\\n\", \"testtype\": \"stdin\"}, {\"input\": \"10 158260522\\n877914575 24979445 623690081 262703497 24979445 1822804784 1430302156 1161735902 923078537 1189330739\\n\", \"output\": \"12523196466007058\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc347_c", "question_title": "Ideal Holidays", "question_content": "In the Kingdom of AtCoder, a week consists of A+B days, with the first through A-th days being holidays and the (A+1)-th through (A+B)-th being weekdays.\nTakahashi has N plans, and the i-th plan is scheduled D_i days later.\nHe has forgotten what day of the week it is today. Determine if it is possible for all of his N plans to be scheduled on holidays.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN A B\r\nD_1 D_2 \\ldots D_N\n\nOutput\n\nPrint Yes in a single line if it is possible for all of Takahashi's N plans to be scheduled on holidays, and No otherwise.\n\nConstraints\n\n\n- 1\\leq N\\leq 2\\times 10^5\n- 1\\leq A,B\\leq 10^9\n- 1\\leq D_1<D_2<\\ldots<D_N\\leq 10^9\n\nSample Input 1\n\n3 2 5\r\n1 2 9\n\nSample Output 1\n\nYes\r\n\nIn this input, a week consists of seven days, with the first through second days being holidays and the third through seventh days being weekdays.\nLet us assume today is the seventh day of the week. In this case, one day later would be the first day of the week, two days later would be the second day of the week, and nine days later would also be the second day of the week, making all plans scheduled on holidays. Therefore, it is possible for all of Takahashi's N plans to be scheduled on holidays.\n\nSample Input 2\n\n2 5 10\r\n10 15\n\nSample Output 2\n\nNo\n\nSample Input 3\n\n4 347 347\r\n347 700 705 710\n\nSample Output 3\n\nYes", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"3 2 5\\n1 2 9\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"2 5 10\\n10 15\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}, {\"input\": \"4 347 347\\n347 700 705 710\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc347_a", "question_title": "Divisible", "question_content": "You are given positive integers N and K, and a sequence of length N, A=(A_1,A_2,\\ldots,A_N).\nExtract all elements of A that are multiples of K, divide them by K, and print the quotients.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN K\r\nA_1 A_2 \\ldots A_N\n\nOutput\n\nDivide all elements of A that are multiples of K and print the quotients in ascending order with spaces in between.\n\nConstraints\n\n\n- 1\\leq N,K\\leq 100\n- 1\\leq A_1 < A_2 < \\ldots < A_N \\leq 100\n- A has at least one multiple of K.\n- All given numbers are integers.\n\nSample Input 1\n\n5 2\r\n2 5 6 7 10\n\nSample Output 1\n\n1 3 5\r\n\nThe multiples of 2 among the elements in A are 2, 6, and 10. Divide them by 2 to get 1, 3, and 5, and print them in ascending order with spaces in between.\n\nSample Input 2\n\n3 1\r\n3 4 7\n\nSample Output 2\n\n3 4 7\n\nSample Input 3\n\n5 10\r\n50 51 54 60 65\n\nSample Output 3\n\n5 6", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"5 2\\n2 5 6 7 10\\n\", \"output\": \"1 3 5\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3 1\\n3 4 7\\n\", \"output\": \"3 4 7\\n\", \"testtype\": \"stdin\"}, {\"input\": \"5 10\\n50 51 54 60 65\\n\", \"output\": \"5 6\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc347_e", "question_title": "Set Add Query", "question_content": "There is an integer sequence A=(A_1,A_2,\\ldots,A_N) of length N, where all elements are initially set to 0. Also, there is a set S, which is initially empty.\nPerform the following Q queries in order. Find the value of each element in the sequence A after processing all Q queries. The i-th query is in the following format:\n\n- An integer x_i is given. If the integer x_i is contained in S, remove x_i from S. Otherwise, insert x_i to S. Then, for each j=1,2,\\ldots,N, add |S| to A_j if j\\in S.\n\nHere, |S| denotes the number of elements in the set S. For example, if S=\\lbrace 3,4,7\\rbrace, then |S|=3.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN Q\nx_1 x_2 \\ldots x_Q\n\nOutput\n\nPrint the sequence A after processing all queries in the following format:\nA_1 A_2 \\ldots A_N\n\nConstraints\n\n\n- 1\\leq N,Q\\leq 2\\times10^5\n- 1\\leq x_i\\leq N\n- All given numbers are integers.\n\nSample Input 1\n\n3 4\n1 3 3 2\n\nSample Output 1\n\n6 2 2\n\nIn the first query, 1 is inserted to S, making S=\\lbrace 1\\rbrace. Then, |S|=1 is added to A_1. The sequence becomes A=(1,0,0).\nIn the second query, 3 is inserted to S, making S=\\lbrace 1,3\\rbrace. Then, |S|=2 is added to A_1 and A_3. The sequence becomes A=(3,0,2).\nIn the third query, 3 is removed from S, making S=\\lbrace 1\\rbrace. Then, |S|=1 is added to A_1. The sequence becomes A=(4,0,2).\nIn the fourth query, 2 is inserted to S, making S=\\lbrace 1,2\\rbrace. Then, |S|=2 is added to A_1 and A_2. The sequence becomes A=(6,2,2).\nEventually, the sequence becomes A=(6,2,2).\n\nSample Input 2\n\n4 6\n1 2 3 2 4 2\n\nSample Output 2\n\n15 9 12 7", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"3 4\\n1 3 3 2\\n\", \"output\": \"6 2 2\\n\", \"testtype\": \"stdin\"}, {\"input\": \"4 6\\n1 2 3 2 4 2\\n\", \"output\": \"15 9 12 7\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc347_b", "question_title": "Substring", "question_content": "You are given a string S consisting of lowercase English letters. How many different non-empty substrings does S have?\nA substring is a contiguous subsequence. For example, xxx is a substring of yxxxy but not of xxyxx.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- S is a string of length between 1 and 100, inclusive, consisting of lowercase English letters.\n\nSample Input 1\n\nyay\n\nSample Output 1\n\n5\r\n\nS has the following five different non-empty substrings:\n\n- a\n- y\n- ay\n- ya\n- yay\n\nSample Input 2\n\naababc\n\nSample Output 2\n\n17\n\nSample Input 3\n\nabracadabra\n\nSample Output 3\n\n54", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"yay\\n\", \"output\": \"5\\n\", \"testtype\": \"stdin\"}, {\"input\": \"aababc\\n\", \"output\": \"17\\n\", \"testtype\": \"stdin\"}, {\"input\": \"abracadabra\\n\", \"output\": \"54\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc348_c", "question_title": "Colorful Beans", "question_content": "There are N types of beans, one bean of each type. The i-th type of bean has a deliciousness of A_i and a color of C_i. The beans are mixed and can only be distinguished by color.\nYou will choose one color of beans and eat one bean of that color. By selecting the optimal color, maximize the minimum possible deliciousness of the bean you eat.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nA_1 C_1\r\nA_2 C_2\r\n\\vdots\r\nA_N C_N\n\nOutput\n\nPrint as an integer the maximum value of the minimum possible deliciousness of the bean you eat.\n\nConstraints\n\n\n- 1 \\leq N \\leq 2 \\times 10^{5}\n- 1 \\leq A_i \\leq 10^{9}\n- 1 \\leq C_i \\leq 10^{9}\n- All input values are integers.\n\nSample Input 1\n\n4\r\n100 1\r\n20 5\r\n30 5\r\n40 1\n\nSample Output 1\n\n40\r\n\nNote that beans of the same color cannot be distinguished from each other.\nYou can choose color 1 or color 5.\r\n\n- There are two types of beans of color 1, with deliciousness of 100 and 40. Thus, the minimum deliciousness when choosing color 1 is 40.\n- There are two types of beans of color 5, with deliciousness of 20 and 30. Thus, the minimum deliciousness when choosing color 5 is 20.\n\nTo maximize the minimum deliciousness, you should choose color 1, so print the minimum deliciousness in that case: 40.\n\nSample Input 2\n\n10\r\n68 3\r\n17 2\r\n99 2\r\n92 4\r\n82 4\r\n10 3\r\n100 2\r\n78 1\r\n3 1\r\n35 4\n\nSample Output 2\n\n35", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"4\\n100 1\\n20 5\\n30 5\\n40 1\\n\", \"output\": \"40\\n\", \"testtype\": \"stdin\"}, {\"input\": \"10\\n68 3\\n17 2\\n99 2\\n92 4\\n82 4\\n10 3\\n100 2\\n78 1\\n3 1\\n35 4\\n\", \"output\": \"35\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc348_b", "question_title": "Farthest Point", "question_content": "On the xy-plane, there are N points with ID numbers from 1 to N. Point i is located at coordinates (X_i, Y_i), and no two points have the same coordinates.\nFrom each point, find the farthest point and print its ID number.\r\nIf multiple points are the farthest, print the smallest of the ID numbers of those points.\nHere, we use the Euclidean distance: for two points (x_1,y_1) and (x_2,y_2), the distance between them is \\sqrt{(x_1-x_2)^{2}+(y_1-y_2)^{2}}.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nX_1 Y_1\r\nX_2 Y_2\r\n\\vdots\r\nX_N Y_N\n\nOutput\n\nPrint N lines. The i-th line should contain the ID number of the farthest point from point i.\n\nConstraints\n\n\n- 2 \\leq N \\leq 100\n- -1000 \\leq X_i, Y_i \\leq 1000\n- (X_i, Y_i) \\neq (X_j, Y_j) if i \\neq j.\n- All input values are integers.\n\nSample Input 1\n\n4\r\n0 0\r\n2 4\r\n5 0\r\n3 4\n\nSample Output 1\n\n3\r\n3\r\n1\r\n1\r\n\nThe following figure shows the arrangement of the points. Here, P_i represents point i.\r\n\r\nThe farthest point from point 1 are points 3 and 4, and point 3 has the smaller ID number.\nThe farthest point from point 2 is point 3.\nThe farthest point from point 3 are points 1 and 2, and point 1 has the smaller ID number.\nThe farthest point from point 4 is point 1.\n\nSample Input 2\n\n6\r\n3 2\r\n1 6\r\n4 5\r\n1 3\r\n5 5\r\n9 8\n\nSample Output 2\n\n6\r\n6\r\n6\r\n6\r\n6\r\n4", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"4\\n0 0\\n2 4\\n5 0\\n3 4\\n\", \"output\": \"3\\n3\\n1\\n1\\n\", \"testtype\": \"stdin\"}, {\"input\": \"6\\n3 2\\n1 6\\n4 5\\n1 3\\n5 5\\n9 8\\n\", \"output\": \"6\\n6\\n6\\n6\\n6\\n4\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc348_a", "question_title": "Penalty Kick", "question_content": "Takahashi will have N penalty kicks in a soccer match.\nFor the i-th penalty kick, he will fail if i is a multiple of 3, and succeed otherwise.\nPrint the results of his penalty kicks.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\n\nOutput\n\nPrint a string of length N representing the results of Takahashi's penalty kicks. The i-th character (1 \\leq i \\leq N) should be o if Takahashi succeeds in the i-th penalty kick, and x if he fails.\n\nConstraints\n\n\n- 1 \\leq N \\leq 100\n- All inputs are integers.\n\nSample Input 1\n\n7\n\nSample Output 1\n\nooxooxo\r\n\nTakahashi fails the third and sixth penalty kicks, so the third and sixth characters will be x.\n\nSample Input 2\n\n9\n\nSample Output 2\n\nooxooxoox", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"7\\n\", \"output\": \"ooxooxo\\n\", \"testtype\": \"stdin\"}, {\"input\": \"9\\n\", \"output\": \"ooxooxoox\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc348_d", "question_title": "Medicines on Grid", "question_content": "There is a grid with H rows and W columns. Let (i, j) denote the cell at the i-th row from the top and the j-th column from the left. The state of each cell is represented by the character A_{i,j}, which means the following:\n\n- .: An empty cell.\n- #: An obstacle.\n- S: An empty cell and the start point.\n- T: An empty cell and the goal point.\n\nTakahashi can move from his current cell to a vertically or horizontally adjacent empty cell by consuming 1 energy. He cannot move if his energy is 0, nor can he exit the grid.\nThere are N medicines in the grid. The i-th medicine is at the empty cell (R_i, C_i) and can be used to set the energy to E_i. Note that the energy does not necessarily increase. He can use the medicine in his current cell. The used medicine will disappear.\nTakahashi starts at the start point with 0 energy and wants to reach the goal point. Determine if this is possible.\n\nInput\n\nThe input is given from Standard Input in the following format:\nH W\r\nA_{1, 1}A_{1, 2}\\cdotsA_{1, W}\r\nA_{2, 1}A_{2, 2}\\cdotsA_{2, W}\r\n\\vdots\r\nA_{H, 1}A_{H, 2}\\cdotsA_{H, W}\r\nN\r\nR_1 C_1 E_1\r\nR_2 C_2 E_2\r\n\\vdots\r\nR_N C_N E_N\n\nOutput\n\nIf Takahashi can reach the goal point from the start point, print Yes; otherwise, print No.\n\nConstraints\n\n\n- 1 \\leq H, W \\leq 200\n- A_{i, j} is one of ., #, S, and T.\n- Each of S and T exists exactly once in A_{i, j}.\n- 1 \\leq N \\leq 300\n- 1 \\leq R_i \\leq H\n- 1 \\leq C_i \\leq W\n- (R_i, C_i) \\neq (R_j, C_j) if i \\neq j.\n- A_{R_i, C_i} is not #.\n- 1 \\leq E_i \\leq HW\n\nSample Input 1\n\n4 4\r\nS...\r\n#..#\r\n#...\r\n..#T\r\n4\r\n1 1 3\r\n1 3 5\r\n3 2 1\r\n2 3 1\n\nSample Output 1\n\nYes\r\n\nFor example, he can reach the goal point as follows:\n\n- Use medicine 1. Energy becomes 3.\n- Move to (1, 2). Energy becomes 2.\n- Move to (1, 3). Energy becomes 1.\n- Use medicine 2. Energy becomes 5.\n- Move to (2, 3). Energy becomes 4.\n- Move to (3, 3). Energy becomes 3.\n- Move to (3, 4). Energy becomes 2.\n- Move to (4, 4). Energy becomes 1.\n\nThere is also medicine at (2, 3) along the way, but using it will prevent him from reaching the goal.\n\nSample Input 2\n\n2 2\r\nS.\r\nT.\r\n1\r\n1 2 4\n\nSample Output 2\n\nNo\r\n\nTakahashi cannot move from the start point.\n\nSample Input 3\n\n4 5\r\n..#..\r\n.S##.\r\n.##T.\r\n.....\r\n3\r\n3 1 5\r\n1 2 3\r\n2 2 1\n\nSample Output 3\n\nYes", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"4 4\\nS...\\n#..#\\n#...\\n..#T\\n4\\n1 1 3\\n1 3 5\\n3 2 1\\n2 3 1\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"2 2\\nS.\\nT.\\n1\\n1 2 4\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}, {\"input\": \"4 5\\n..#..\\n.S##.\\n.##T.\\n.....\\n3\\n3 1 5\\n1 2 3\\n2 2 1\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc348_e", "question_title": "Minimize Sum of Distances", "question_content": "You are given a tree with N vertices. The vertices are numbered 1 to N, and the i-th edge connects vertices A_i and B_i.\nYou are also given a sequence of positive integers C = (C_1, C_2, \\ldots ,C_N) of length N. Let d(a, b) be the number of edges between vertices a and b, and for x = 1, 2, \\ldots, N, let \\displaystyle f(x) = \\sum_{i=1}^{N} (C_i \\times d(x, i)). Find \\displaystyle \\min_{1 \\leq v \\leq N} f(v).\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\nA_1 B_1\nA_2 B_2\n\\vdots\nA_{N - 1} B_{N - 1}\nC_1 C_2 \\cdots C_N\n\nOutput\n\nPrint the answer in one line.\n\nConstraints\n\n\n- 1 \\leq N \\leq 10^5\n- 1 \\leq A_i, B_i \\leq N\n- The given graph is a tree.\n- 1 \\leq C_i \\leq 10^9\n\nSample Input 1\n\n4\n1 2\n1 3\n2 4\n1 1 1 2\n\nSample Output 1\n\n5\n\nFor example, consider calculating f(1). We have d(1, 1) = 0, d(1, 2) = 1, d(1, 3) = 1, d(1, 4) = 2.\nThus, f(1) = 0 \\times 1 + 1 \\times 1 + 1 \\times 1 + 2 \\times 2 = 6.\nSimilarly, f(2) = 5, f(3) = 9, f(4) = 6. Since f(2) is the minimum, print 5.\n\nSample Input 2\n\n2\n2 1\n1 1000000000\n\nSample Output 2\n\n1\n\nf(2) = 1, which is the minimum.\n\nSample Input 3\n\n7\n7 3\n2 5\n2 4\n3 1\n3 6\n2 1\n2 7 6 9 3 4 6\n\nSample Output 3\n\n56", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"4\\n1 2\\n1 3\\n2 4\\n1 1 1 2\\n\", \"output\": \"5\\n\", \"testtype\": \"stdin\"}, {\"input\": \"2\\n2 1\\n1 1000000000\\n\", \"output\": \"1\\n\", \"testtype\": \"stdin\"}, {\"input\": \"7\\n7 3\\n2 5\\n2 4\\n3 1\\n3 6\\n2 1\\n2 7 6 9 3 4 6\\n\", \"output\": \"56\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc349_c", "question_title": "Airport Code", "question_content": "A string T of length 3 consisting of uppercase English letters is an airport code for a string S of lowercase English letters if and only if T can be derived from S by one of the following methods:\n\n- Take a subsequence of length 3 from S (not necessarily contiguous) and convert it to uppercase letters to form T.\n- Take a subsequence of length 2 from S (not necessarily contiguous), convert it to uppercase letters, and append X to the end to form T.\n\nGiven strings S and T, determine if T is an airport code for S.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\r\nT\n\nOutput\n\nPrint Yes if T is an airport code for S, and No otherwise.\n\nConstraints\n\n\n- S is a string of lowercase English letters with a length between 3 and 10^5, inclusive.\n- T is a string of uppercase English letters with a length of 3.\n\nSample Input 1\n\nnarita\r\nNRT\n\nSample Output 1\n\nYes\r\n\nThe subsequence nrt of narita, when converted to uppercase, forms the string NRT, which is an airport code for narita.\n\nSample Input 2\n\nlosangeles\r\nLAX\n\nSample Output 2\n\nYes\r\n\nThe subsequence la of losangeles, when converted to uppercase and appended with X, forms the string LAX, which is an airport code for losangeles.\n\nSample Input 3\n\nsnuke\r\nRNG\n\nSample Output 3\n\nNo", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"narita\\nNRT\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"losangeles\\nLAX\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"snuke\\nRNG\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc349_a", "question_title": "Zero Sum Game", "question_content": "There are N people labeled 1 to N, who have played several one-on-one games without draws. Initially, each person started with 0 points. In each game, the winner's score increased by 1 and the loser's score decreased by 1 (scores can become negative). Determine the final score of person N if the final score of person i\\ (1\\leq i\\leq N-1) is A_i. It can be shown that the final score of person N is uniquely determined regardless of the sequence of games.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nA_1 A_2 \\ldots A_{N-1}\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- 2 \\leq N \\leq 100\n- -100 \\leq A_i \\leq 100\n- All input values are integers.\n\nSample Input 1\n\n4\r\n1 -2 -1\n\nSample Output 1\n\n2\r\n\nHere is one possible sequence of games where the final scores of persons 1, 2, 3 are 1, -2, -1, respectively.\n\n- Initially, persons 1, 2, 3, 4 have 0, 0, 0, 0 points, respectively.\n- Persons 1 and 2 play, and person 1 wins. The players now have 1, -1, 0, 0 point(s).\n- Persons 1 and 4 play, and person 4 wins. The players now have 0, -1, 0, 1 point(s).\n- Persons 1 and 2 play, and person 1 wins. The players now have 1, -2, 0, 1 point(s).\n- Persons 2 and 3 play, and person 2 wins. The players now have 1, -1, -1, 1 point(s).\n- Persons 2 and 4 play, and person 4 wins. The players now have 1, -2, -1, 2 point(s).\n\nIn this case, the final score of person 4 is 2. Other possible sequences of games exist, but the score of person 4 will always be 2 regardless of the progression.\n\nSample Input 2\n\n3\r\n0 0\n\nSample Output 2\n\n0\n\nSample Input 3\n\n6\r\n10 20 30 40 50\n\nSample Output 3\n\n-150", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"4\\n1 -2 -1\\n\", \"output\": \"2\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3\\n0 0\\n\", \"output\": \"0\\n\", \"testtype\": \"stdin\"}, {\"input\": \"6\\n10 20 30 40 50\\n\", \"output\": \"-150\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc349_b", "question_title": "Commencement", "question_content": "A string S consisting of lowercase English letters is a good string if and only if it satisfies the following property for all integers i not less than 1:\n\n- There are exactly zero or exactly two different letters that appear exactly i times in S.\n\nGiven a string S, determine if it is a good string.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\n\nOutput\n\nPrint Yes if S is a good string, and No otherwise.\n\nConstraints\n\n\n- S is a string of lowercase English letters with a length between 1 and 100, inclusive.\n\nSample Input 1\n\ncommencement\n\nSample Output 1\n\nYes\r\n\nFor the string commencement, the number of different letters that appear exactly i times is as follows:\n\n- i=1: two letters (o and t)\n- i=2: two letters (c and n)\n- i=3: two letters (e and m)\n- i\\geq 4: zero letters\n\nTherefore, commencement satisfies the condition of a good string.\n\nSample Input 2\n\nbanana\n\nSample Output 2\n\nNo\r\n\nFor the string banana, there is only one letter that appears exactly one time, which is b, so it does not satisfy the condition of a good string.\n\nSample Input 3\n\nab\n\nSample Output 3\n\nYes", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"commencement\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"banana\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}, {\"input\": \"ab\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc349_d", "question_title": "Divide Interval", "question_content": "For non-negative integers l and r (l < r), let S(l, r) denote the sequence (l, l+1, \\ldots, r-2, r-1) formed by arranging integers from l through r-1 in order. Furthermore, a sequence is called a good sequence if and only if it can be represented as S(2^i j, 2^i (j+1)) using non-negative integers i and j.\nYou are given non-negative integers L and R (L < R). Divide the sequence S(L, R) into the fewest number of good sequences, and print that number of sequences and the division. More formally, find the minimum positive integer M for which there is a sequence of pairs of non-negative integers (l_1, r_1), (l_2, r_2), \\ldots, (l_M, r_M) that satisfies the following, and print such (l_1, r_1), (l_2, r_2), \\ldots, (l_M, r_M).\n\n- L = l_1 < r_1 = l_2 < r_2 = \\cdots = l_M < r_M = R\n- S(l_1, r_1), S(l_2, r_2), \\ldots, S(l_M, r_M) are good sequences.\n\nIt can be shown that there is only one division that minimizes M.\n\nInput\n\nThe input is given from Standard Input in the following format:\nL R\n\nOutput\n\nPrint the answer in the following format:\nM\nl_1 r_1\n\\vdots\nl_M r_M\n\nNote that the pairs (l_1, r_1), \\dots, (l_M, r_M) should be printed in ascending order.\n\nConstraints\n\n\n- 0 \\leq L < R \\leq 2^{60}\n- All input values are integers.\n\nSample Input 1\n\n3 19\n\nSample Output 1\n\n5\n3 4\n4 8\n8 16\n16 18\n18 19\n\nS(3,19)=(3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18) can be divided into the following five good sequences, which is the minimum possible number:\n\n- S(3,4)=S(2^0\\cdot 3,2^0\\cdot4)=(3)\n- S(4,8)=S(2^2\\cdot 1,2^2\\cdot 2)=(4,5,6,7)\n- S(8,16)=S(2^3\\cdot 1,2^3\\cdot 2)=(8,9,10,11,12,13,14,15)\n- S(16,18)=S(2^1\\cdot 8,2^1\\cdot 9)=(16,17)\n- S(18,19)=S(2^0\\cdot 18,2^0\\cdot 19)=(18)\n\nSample Input 2\n\n0 1024\n\nSample Output 2\n\n1\n0 1024\n\nSample Input 3\n\n3940649673945088 11549545024454656\n\nSample Output 3\n\n8\n3940649673945088 3940649673949184\n3940649673949184 4503599627370496\n4503599627370496 9007199254740992\n9007199254740992 11258999068426240\n11258999068426240 11540474045136896\n11540474045136896 11549270138159104\n11549270138159104 11549545016066048\n11549545016066048 11549545024454656", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"3 19\\n\", \"output\": \"5\\n3 4\\n4 8\\n8 16\\n16 18\\n18 19\\n\", \"testtype\": \"stdin\"}, {\"input\": \"0 1024\\n\", \"output\": \"1\\n0 1024\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3940649673945088 11549545024454656\\n\", \"output\": \"8\\n3940649673945088 3940649673949184\\n3940649673949184 4503599627370496\\n4503599627370496 9007199254740992\\n9007199254740992 11258999068426240\\n11258999068426240 11540474045136896\\n11540474045136896 11549270138159104\\n11549270138159104 11549545016066048\\n11549545016066048 11549545024454656\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc349_e", "question_title": "Weighted Tic", "question_content": "There is a 3 \\times 3 grid. Let (i, j) denote the cell at the i-th row from the top and j-th column from the left (1 \\leq i, j \\leq 3). Cell (i, j) contains an integer A_{i,j}. It is guaranteed that \\sum_{i=1}^3 \\sum_{j=1}^3 A_{i,j} is odd. Additionally, all cells are initially painted white.\nTakahashi and Aoki will play a game using this grid. Takahashi goes first, and they take turns performing the following operation:\n\n- Choose a cell (i, j) (1\\leq i, j \\leq 3) that is still painted white (it can be shown that such a cell always exists at the time of the operation). The player performing the operation scores A_{i,j} points. Then, if the player is Takahashi, he paints the cell (i, j) red; if the player is Aoki, he paints it blue.\n\nAfter each operation, the following checks are made:\n\n- Check if there are three consecutive cells painted the same color (red or blue) in any row, column, or diagonal. If such a sequence exists, the game ends immediately, and the player whose color forms the sequence wins.\n- Check if there are white cells left. If no white cells remain, the game ends, and the player with the higher total score wins.\n\nIt can be shown that the game will always end after a finite number of moves, and either Takahashi or Aoki will win. Determine which player wins if both play optimally for victory.\n\nInput\n\nThe input is given from Standard Input in the following format:\nA_{1,1} A_{1,2} A_{1,3}\r\nA_{2,1} A_{2,2} A_{2,3}\r\nA_{3,1} A_{3,2} A_{3,3}\n\nOutput\n\nIf Takahashi wins, print Takahashi; if Aoki wins, print Aoki.\n\nConstraints\n\n\n- |A_{i,j}| \\leq 10^9\n- \\sum_{i=1}^3 \\sum_{j=1}^3 A_{i,j} is odd.\n- All input values are integers.\n\nSample Input 1\n\n0 0 0\r\n0 1 0\r\n0 0 0\n\nSample Output 1\n\nTakahashi\r\n\nIf Takahashi chooses cell (2,2) in his first move, no matter how Aoki plays afterward, Takahashi can always act to prevent three consecutive blue cells. If three consecutive red cells are formed, Takahashi wins. If the game ends without three consecutive red cells, at that point, Takahashi has scored 1 point and Aoki 0 points, so Takahashi wins either way.\n\nSample Input 2\n\n-1 1 0\r\n-4 -2 -5\r\n-4 -1 -5\n\nSample Output 2\n\nAoki", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"0 0 0\\n0 1 0\\n0 0 0\\n\", \"output\": \"Takahashi\\n\", \"testtype\": \"stdin\"}, {\"input\": \"-1 1 0\\n-4 -2 -5\\n-4 -1 -5\\n\", \"output\": \"Aoki\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc350_a", "question_title": "Past ABCs", "question_content": "You are given a string S of length 6. It is guaranteed that the first three characters of S are ABC and the last three characters are digits.\nDetermine if S is the abbreviation of a contest held and concluded on AtCoder before the start of this contest.\nHere, a string T is \"the abbreviation of a contest held and concluded on AtCoder before the start of this contest\" if and only if it equals one of the following 348 strings:\nABC001, ABC002, \\ldots, ABC314, ABC315, ABC317, ABC318, \\ldots, ABC348, ABC349.\nNote that ABC316 is not included.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\n\nOutput\n\nIf S is the abbreviation of a contest held and concluded on AtCoder before the start of this contest, print Yes; otherwise, print No.\n\nConstraints\n\n\n- S is a string of length 6 where the first three characters are ABC and the last three characters are digits.\n\nSample Input 1\n\nABC349\n\nSample Output 1\n\nYes\r\n\nABC349 is the abbreviation of a contest held and concluded on AtCoder last week.\n\nSample Input 2\n\nABC350\n\nSample Output 2\n\nNo\r\n\nABC350 is this contest, which has not concluded yet.\n\nSample Input 3\n\nABC316\n\nSample Output 3\n\nNo\r\n\nABC316 was not held on AtCoder.", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"ABC349\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"ABC350\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}, {\"input\": \"ABC316\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc350_e", "question_title": "Toward 0", "question_content": "You are given an integer N. You can perform the following two types of operations:\n\n- Pay X yen to replace N with \\displaystyle\\left\\lfloor\\frac{N}{A}\\right\\rfloor.\n- Pay Y yen to roll a die (dice) that shows an integer between 1 and 6, inclusive, with equal probability. Let b be the outcome of the die, and replace N with \\displaystyle\\left\\lfloor\\frac{N}{b}\\right\\rfloor.\n\nHere, \\lfloor s \\rfloor denotes the greatest integer less than or equal to s. For example, \\lfloor 3 \\rfloor=3 and \\lfloor 2.5 \\rfloor=2.\nDetermine the minimum expected cost paid before N becomes 0 when optimally choosing operations.\r\nThe outcome of the die in each operation is independent of other rolls, and the choice of operation can be made after observing the results of the previous operations.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN A X Y\n\nOutput\n\nPrint the answer.\r\nYour output will be considered correct if the absolute or relative error from the true answer is at most 10^{-6}.\n\nConstraints\n\n\n- 1 \\leq N \\leq 10^{18}\n- 2 \\leq A \\leq 6\n- 1 \\leq X, Y \\leq 10^9\n- All input values are integers.\n\nSample Input 1\n\n3 2 10 20\n\nSample Output 1\n\n20.000000000000000\r\n\nThe available operations are as follows:\n\n- Pay 10 yen. Replace N with \\displaystyle\\left\\lfloor\\frac{N}{2}\\right\\rfloor.\n- Pay 20 yen. Roll a die. Let b be the outcome, and replace N with \\displaystyle\\left\\lfloor\\frac{N}{b}\\right\\rfloor.\n\nThe optimal strategy is to perform the first operation twice.\n\nSample Input 2\n\n3 2 20 20\n\nSample Output 2\n\n32.000000000000000\r\n\nThe available operations are as follows:\n\n- Pay 20 yen. Replace N with \\displaystyle\\left\\lfloor\\frac{N}{2}\\right\\rfloor.\n- Pay 20 yen. Roll a die. Let b be the outcome, and replace N with \\displaystyle\\left\\lfloor\\frac{N}{b}\\right\\rfloor.\n\nThe optimal strategy is as follows:\n\n- First, perform the second operation to roll the die.\n- If the outcome is 4 or greater, then N becomes 0.\n- If the outcome is 2 or 3, then N becomes 1. Now, perform the first operation to make N = 0.\n- If the outcome is 1, restart from the beginning.\n\nSample Input 3\n\n314159265358979323 4 223606797 173205080\n\nSample Output 3\n\n6418410657.7408381", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"3 2 10 20\\n\", \"output\": \"20.000000000000000\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3 2 20 20\\n\", \"output\": \"32.000000000000000\\n\", \"testtype\": \"stdin\"}, {\"input\": \"314159265358979323 4 223606797 173205080\\n\", \"output\": \"6418410657.7408381\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc350_b", "question_title": "Dentist Aoki", "question_content": "Takahashi has N teeth, one in each of the holes numbered 1, 2, \\dots, N.\r\nDentist Aoki will perform Q treatments on these teeth and holes.\r\nIn the i-th treatment, hole T_i is treated as follows:\n\n- If there is a tooth in hole T_i, remove the tooth from hole T_i.\n- If there is no tooth in hole T_i (i.e., the hole is empty), grow a tooth in hole T_i.\n\nAfter all treatments are completed, how many teeth does Takahashi have?\n\nInput\n\nThe input is given from Standard Input in the following format:\nN Q\r\nT_1 T_2 \\dots T_Q\n\nOutput\n\nPrint the number of teeth as an integer.\n\nConstraints\n\n\n- All input values are integers.\n- 1 \\le N, Q \\le 1000\n- 1 \\le T_i \\le N\n\nSample Input 1\n\n30 6\r\n2 9 18 27 18 9\n\nSample Output 1\n\n28\r\n\nInitially, Takahashi has 30 teeth, and Aoki performs six treatments.\n\n- In the first treatment, hole 2 is treated. There is a tooth in hole 2, so it is removed.\n- In the second treatment, hole 9 is treated. There is a tooth in hole 9, so it is removed.\n- In the third treatment, hole 18 is treated. There is a tooth in hole 18, so it is removed.\n- In the fourth treatment, hole 27 is treated. There is a tooth in hole 27, so it is removed.\n- In the fifth treatment, hole 18 is treated. There is no tooth in hole 18, so a tooth is grown.\n- In the sixth treatment, hole 9 is treated. There is no tooth in hole 9, so a tooth is grown.\n\nThe final count of teeth is 28.\n\nSample Input 2\n\n1 7\r\n1 1 1 1 1 1 1\n\nSample Output 2\n\n0\n\nSample Input 3\n\n9 20\r\n9 5 1 2 2 2 8 9 2 1 6 2 6 5 8 7 8 5 9 8\n\nSample Output 3\n\n5", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"30 6\\n2 9 18 27 18 9\\n\", \"output\": \"28\\n\", \"testtype\": \"stdin\"}, {\"input\": \"1 7\\n1 1 1 1 1 1 1\\n\", \"output\": \"0\\n\", \"testtype\": \"stdin\"}, {\"input\": \"9 20\\n9 5 1 2 2 2 8 9 2 1 6 2 6 5 8 7 8 5 9 8\\n\", \"output\": \"5\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc350_c", "question_title": "Sort", "question_content": "You are given a permutation A=(A_1,\\ldots,A_N) of (1,2,\\ldots,N).\r\nTransform A into (1,2,\\ldots,N) by performing the following operation between 0 and N-1 times, inclusive:\n\n- Operation: Choose any pair of integers (i,j) such that 1\\leq i < j \\leq N. Swap the elements at the i-th and j-th positions of A.\n\nIt can be proved that under the given constraints, it is always possible to transform A into (1,2,\\ldots,N).\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nA_1 \\ldots A_N\n\nOutput\n\nLet K be the number of operations. Print K+1 lines.\r\nThe first line should contain K.\r\nThe (l+1)-th line (1\\leq l \\leq K) should contain the integers i and j chosen for the l-th operation, separated by a space.\r\nAny output that satisfies the conditions in the problem statement will be considered correct.\n\nConstraints\n\n\n- 2 \\leq N \\leq 2\\times 10^5\n- (A_1,\\ldots,A_N) is a permutation of (1,2,\\ldots,N).\n- All input values are integers.\n\nSample Input 1\n\n5\r\n3 4 1 2 5\n\nSample Output 1\n\n2\r\n1 3\r\n2 4\r\n\nThe operations change the sequence as follows:\n\n- Initially, A=(3,4,1,2,5).\n- The first operation swaps the first and third elements, making A=(1,4,3,2,5).\n- The second operation swaps the second and fourth elements, making A=(1,2,3,4,5).\n\nOther outputs such as the following are also considered correct:\n4\r\n2 3\r\n3 4\r\n1 2\r\n2 3\n\nSample Input 2\n\n4\r\n1 2 3 4\n\nSample Output 2\n\n0\n\nSample Input 3\n\n3\r\n3 1 2\n\nSample Output 3\n\n2\r\n1 2\r\n2 3", "difficulty": "medium", "starter_code": "", "public_test_cases": "[]"}
{"question_id": "abc350_d", "question_title": "New Friends", "question_content": "There is an SNS used by N users, labeled with numbers from 1 to N.\nIn this SNS, two users can become friends with each other.\r\nFriendship is bidirectional; if user X is a friend of user Y, user Y is always a friend of user X.\nCurrently, there are M pairs of friendships on the SNS, with the i-th pair consisting of users A_i and B_i.\nDetermine the maximum number of times the following operation can be performed:\n\n- Operation: Choose three users X, Y, and Z such that X and Y are friends, Y and Z are friends, but X and Z are not. Make X and Z friends.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN M\r\nA_1 B_1\r\n\\vdots\r\nA_M B_M\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- 2 \\leq N \\leq 2 \\times 10^5\n- 0 \\leq M \\leq 2 \\times 10^5\n- 1 \\leq A_i < B_i \\leq N\n- The pairs (A_i, B_i) are distinct.\n- All input values are integers.\n\nSample Input 1\n\n4 3\r\n1 2\r\n2 3\r\n1 4\n\nSample Output 1\n\n3\r\n\nThree new friendships with a friend's friend can occur as follows:\n\n- User 1 becomes friends with user 3, who is a friend of their friend (user 2)\n- User 3 becomes friends with user 4, who is a friend of their friend (user 1)\n- User 2 becomes friends with user 4, who is a friend of their friend (user 1)\n\nThere will not be four or more new friendships.\n\nSample Input 2\n\n3 0\n\nSample Output 2\n\n0\r\n\nIf there are no initial friendships, no new friendships can occur.\n\nSample Input 3\n\n10 8\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n6 7\r\n7 8\r\n8 9\r\n9 10\n\nSample Output 3\n\n12", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"4 3\\n1 2\\n2 3\\n1 4\\n\", \"output\": \"3\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3 0\\n\", \"output\": \"0\\n\", \"testtype\": \"stdin\"}, {\"input\": \"10 8\\n1 2\\n2 3\\n3 4\\n4 5\\n6 7\\n7 8\\n8 9\\n9 10\\n\", \"output\": \"12\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc351_a", "question_title": "The bottom of the ninth", "question_content": "Team Takahashi and Team Aoki are playing a baseball game, with Team Takahashi batting first.\nCurrently, the game has finished through the top of the ninth inning, and the bottom of the ninth is about to begin.\nTeam Takahashi scored A_i runs in the top of the i-th inning (1\\leq i\\leq 9), and Team Aoki scored B_j runs in the bottom of the j-th inning (1\\leq j\\leq 8).\nAt the end of the top of the ninth, Team Takahashi's score is not less than Team Aoki's score.\nDetermine the minimum number of runs Team Aoki needs to score in the bottom of the ninth to win the game.\nHere, if the game is tied at the end of the bottom of the ninth, it results in a draw. Therefore, for Team Aoki to win, they must score strictly more runs than Team Takahashi by the end of the bottom of the ninth.\nTeam Takahashi's score at any point is the total runs scored in the tops of the innings up to that point, and Team Aoki's score is the total runs scored in the bottoms of the innings.\n\nInput\n\nThe input is given from Standard Input in the following format:\nA_1 A_2 A_3 A_4 A_5 A_6 A_7 A_8 A_9\nB_1 B_2 B_3 B_4 B_5 B_6 B_7 B_8\n\nOutput\n\nPrint the minimum number of runs Team Aoki needs to score in the bottom of the ninth inning to win.\n\nConstraints\n\n\n- 0\\leq A_i, B_j\\leq 99\n- A_1 + A_2 + A_3 + A_4 + A_5 + A_6 + A_7 + A_8 + A_9 \\geq B_1 + B_2 + B_3 + B_4 + B_5 + B_6 + B_7 + B_8\n- All input values are integers.\n\nSample Input 1\n\n0 1 0 1 2 2 0 0 1\n1 1 0 0 0 0 1 0\n\nSample Output 1\n\n5\n\nAt the end of the top of the ninth inning, Team Takahashi has scored seven runs, and Team Aoki has scored three runs.\nTherefore, if Team Aoki scores five runs in the bottom of the ninth, the scores will be 7-8, allowing them to win.\nNote that scoring four runs would result in a draw and not a victory.\n\nSample Input 2\n\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n\nSample Output 2\n\n1", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"0 1 0 1 2 2 0 0 1\\n1 1 0 0 0 0 1 0\\n\", \"output\": \"5\\n\", \"testtype\": \"stdin\"}, {\"input\": \"0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0\\n\", \"output\": \"1\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc351_b", "question_title": "Spot the Difference", "question_content": "You are given two grids, each with N rows and N columns, referred to as grid A and grid B.\r\nEach cell in the grids contains a lowercase English letter.\r\nThe character at the i-th row and j-th column of grid A is A_{i, j}.\r\nThe character at the i-th row and j-th column of grid B is B_{i, j}.  \nThe two grids differ in exactly one cell. That is, there exists exactly one pair (i, j) of positive integers not greater than N such that A_{i, j} \\neq B_{i, j}. Find this (i, j).\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nA_{1,1}A_{1,2}\\dots A_{1,N}\r\nA_{2,1}A_{2,2}\\dots A_{2,N}\r\n\\vdots\r\nA_{N,1}A_{N,2}\\dots A_{N,N}\r\nB_{1,1}B_{1,2}\\dots B_{1,N}\r\nB_{2,1}B_{2,2}\\dots B_{2,N}\r\n\\vdots\r\nB_{N,1}B_{N,2}\\dots B_{N,N}\n\nOutput\n\nLet (i, j) be the pair of positive integers not greater than N such that A_{i, j} \\neq B_{i, j}. Print (i, j) in the following format:\ni j\n\nConstraints\n\n\n- 1 \\leq N \\leq 100\n- A_{i, j} and B_{i, j} are all lowercase English letters.\n- There exists exactly one pair (i, j) such that A_{i, j} \\neq B_{i, j}.\n\nSample Input 1\n\n3\r\nabc\r\ndef\r\nghi\r\nabc\r\nbef\r\nghi\n\nSample Output 1\n\n2 1\r\n\nFrom A_{2, 1} = d and B_{2, 1} = b, we have A_{2, 1} \\neq B_{2, 1}, so (i, j) = (2, 1) satisfies the condition in the problem statement.\n\nSample Input 2\n\n1\r\nf\r\nq\n\nSample Output 2\n\n1 1\n\nSample Input 3\n\n10\r\neixfumagit\r\nvtophbepfe\r\npxbfgsqcug\r\nugpugtsxzq\r\nbvfhxyehfk\r\nuqyfwtmglr\r\njaitenfqiq\r\nacwvufpfvv\r\njhaddglpva\r\naacxsyqvoj\r\neixfumagit\r\nvtophbepfe\r\npxbfgsqcug\r\nugpugtsxzq\r\nbvfhxyehok\r\nuqyfwtmglr\r\njaitenfqiq\r\nacwvufpfvv\r\njhaddglpva\r\naacxsyqvoj\n\nSample Output 3\n\n5 9", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"3\\nabc\\ndef\\nghi\\nabc\\nbef\\nghi\\n\", \"output\": \"2 1\\n\", \"testtype\": \"stdin\"}, {\"input\": \"1\\nf\\nq\\n\", \"output\": \"1 1\\n\", \"testtype\": \"stdin\"}, {\"input\": \"10\\neixfumagit\\nvtophbepfe\\npxbfgsqcug\\nugpugtsxzq\\nbvfhxyehfk\\nuqyfwtmglr\\njaitenfqiq\\nacwvufpfvv\\njhaddglpva\\naacxsyqvoj\\neixfumagit\\nvtophbepfe\\npxbfgsqcug\\nugpugtsxzq\\nbvfhxyehok\\nuqyfwtmglr\\njaitenfqiq\\nacwvufpfvv\\njhaddglpva\\naacxsyqvoj\\n\", \"output\": \"5 9\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc351_e", "question_title": "Jump Distance Sum", "question_content": "On a coordinate plane, there are N points P_1, P_2, \\ldots, P_N, where point P_i has coordinates (X_i, Y_i).\nThe distance \\text{dist}(A, B) between two points A and B is defined as follows:\n\nA rabbit is initially at point A.\nA rabbit at position (x, y) can jump to (x+1, y+1), (x+1, y-1), (x-1, y+1), or (x-1, y-1) in one jump.\n\\text{dist}(A, B) is defined as the minimum number of jumps required to get from point A to point B.\nIf it is impossible to get from point A to point B after any number of jumps, let \\text{dist}(A, B) = 0.\n\nCalculate the sum \\displaystyle\\sum_{i=1}^{N-1}\\displaystyle\\sum_{j=i+1}^N \\text{dist}(P_i, P_j).\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\nX_1 Y_1\nX_2 Y_2\n\\vdots\nX_N Y_N\n\nOutput\n\nPrint the value of \\displaystyle\\sum_{i=1}^{N-1}\\displaystyle\\sum_{j=i+1}^N \\text{dist}(P_i, P_j) as an integer.\n\nConstraints\n\n\n- 2 \\leq N \\leq 2 \\times 10^5\n- 0 \\leq X_i, Y_i \\leq 10^8\n- For i \\neq j, (X_i, Y_i) \\neq (X_j, Y_j)\n- All input values are integers.\n\nSample Input 1\n\n3\n0 0\n1 3\n5 6\n\nSample Output 1\n\n3\n\nP_1, P_2, and P_3 have coordinates (0,0), (1,3), and (5,6), respectively.\nThe rabbit can get from P_1 to P_2 in three jumps via (0,0) \\to (1,1) \\to (0,2) \\to (1,3), but not in two or fewer jumps,\nso \\text{dist}(P_1, P_2) = 3.\nThe rabbit cannot get from P_1 to P_3 or from P_2 to P_3, so \\text{dist}(P_1, P_3) = \\text{dist}(P_2, P_3) = 0.\nTherefore, the answer is \\displaystyle\\sum_{i=1}^{2}\\displaystyle\\sum_{j=i+1}^3\\text{dist}(P_i, P_j)=\\text{dist}(P_1, P_2)+\\text{dist}(P_1, P_3)+\\text{dist}(P_2, P_3)=3+0+0=3.\n\nSample Input 2\n\n5\n0 5\n1 7\n2 9\n3 8\n4 6\n\nSample Output 2\n\n11", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"3\\n0 0\\n1 3\\n5 6\\n\", \"output\": \"3\\n\", \"testtype\": \"stdin\"}, {\"input\": \"5\\n0 5\\n1 7\\n2 9\\n3 8\\n4 6\\n\", \"output\": \"11\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc351_f", "question_title": "Double Sum", "question_content": "You are given an integer sequence A = (A_1, A_2, \\dots, A_N).\r\nCalculate the following expression:\n\\displaystyle \\sum_{i=1}^N \\sum_{j=i+1}^N \\max(A_j - A_i, 0)\n\nThe constraints guarantee that the answer is less than 2^{63}.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nA_1 A_2 \\dots A_N\n\nOutput\n\nPrint the value of the expression.\n\nConstraints\n\n\n- 2 \\leq N \\leq 4 \\times 10^5\n- 0 \\leq A_i \\leq 10^8\n- All input values are integers.\n\nSample Input 1\n\n3\r\n2 5 3\n\nSample Output 1\n\n4\r\n\nFor (i, j) = (1, 2), we have \\max(A_j - A_i, 0) = \\max(3, 0) = 3.\r\nFor (i, j) = (1, 3), we have \\max(A_j - A_i, 0) = \\max(1, 0) = 1.\r\nFor (i, j) = (2, 3), we have \\max(A_j - A_i, 0) = \\max(-2, 0) = 0.\r\nAdding these together gives 3 + 1 + 0 = 4, which is the answer.\n\nSample Input 2\n\n10\r\n5 9 3 0 4 8 7 5 4 0\n\nSample Output 2\n\n58", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"3\\n2 5 3\\n\", \"output\": \"4\\n\", \"testtype\": \"stdin\"}, {\"input\": \"10\\n5 9 3 0 4 8 7 5 4 0\\n\", \"output\": \"58\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc351_c", "question_title": "Merge the balls", "question_content": "You have an empty sequence and N balls. The size of the i-th ball (1 \\leq i \\leq N) is 2^{A_i}.\nYou will perform N operations.\r\nIn the i-th operation, you add the i-th ball to the right end of the sequence, and repeat the following steps:\n\n- If the sequence has one or fewer balls, end the operation.\n- If the rightmost ball and the second rightmost ball in the sequence have different sizes, end the operation.\n- If the rightmost ball and the second rightmost ball in the sequence have the same size, remove these two balls and add a new ball to the right end of the sequence with a size equal to the sum of the sizes of the two removed balls. Then, go back to step 1 and repeat the process.\n\nDetermine the number of balls remaining in the sequence after the N operations.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nA_1 A_2 \\ldots A_N\n\nOutput\n\nPrint the number of balls in the sequence after the N operations.\n\nConstraints\n\n\n- 1 \\leq N \\leq 2 \\times 10^5\n- 0 \\leq A_i \\leq 10^9\n- All input values are integers.\n\nSample Input 1\n\n7\r\n2 1 1 3 5 3 3\n\nSample Output 1\n\n3\r\n\nThe operations proceed as follows:\n\n- After the first operation, the sequence has one ball, of size 2^2.\n- After the second operation, the sequence has two balls, of sizes 2^2 and 2^1 in order.\n- After the third operation, the sequence has one ball, of size 2^3. This is obtained as follows:\n- When the third ball is added during the third operation, the sequence has balls of sizes 2^2, 2^1, 2^1 in order.\n- The first and second balls from the right have the same size, so these balls are removed, and a ball of size 2^1 + 2^1 = 2^2 is added. Now, the sequence has balls of sizes 2^2, 2^2.\n- Again, the first and second balls from the right have the same size, so these balls are removed, and a ball of size 2^2 + 2^2 = 2^3 is added, leaving the sequence with a ball of size 2^3.\n\n\n- After the fourth operation, the sequence has one ball, of size 2^4.\n- After the fifth operation, the sequence has two balls, of sizes 2^4 and 2^5 in order.\n- After the sixth operation, the sequence has three balls, of sizes 2^4, 2^5, 2^3 in order.\n- After the seventh operation, the sequence has three balls, of sizes 2^4, 2^5, 2^4 in order.\n\nTherefore, you should print 3, the final number of balls in the sequence.\n\nSample Input 2\n\n5\r\n0 0 0 1 2\n\nSample Output 2\n\n4\r\n\nThe operations proceed as follows:\n\n- After the first operation, the sequence has one ball, of size 2^0.\n- After the second operation, the sequence has one ball, of size 2^1.\n- After the third operation, the sequence has two balls, of sizes 2^1 and 2^0 in order.\n- After the fourth operation, the sequence has three balls, of sizes 2^1, 2^0, 2^1 in order.\n- After the fifth operation, the sequence has four balls, of sizes 2^1, 2^0, 2^1, 2^2 in order.\n\nTherefore, you should print 4, the final number of balls in the sequence.", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"7\\n2 1 1 3 5 3 3\\n\", \"output\": \"3\\n\", \"testtype\": \"stdin\"}, {\"input\": \"5\\n0 0 0 1 2\\n\", \"output\": \"4\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc351_d", "question_title": "Grid and Magnet", "question_content": "There is a grid of H rows and W columns. Some cells (possibly zero) contain magnets.\nThe state of the grid is represented by H strings S_1, S_2, \\ldots, S_H of length W. If the j-th character of S_i is #, it indicates that there is a magnet in the cell at the i-th row from the top and j-th column from the left; if it is ., it indicates that the cell is empty.\nTakahashi, wearing an iron armor, can move in the grid as follows:\n\n- If any of the cells vertically or horizontally adjacent to the current cell contains a magnet, he cannot move at all.\n- Otherwise, he can move to any one of the vertically or horizontally adjacent cells.\nHowever, he cannot exit the grid.\n\nFor each cell without a magnet, define its degree of freedom as the number of cells he can reach by repeatedly moving from that cell. Find the maximum degree of freedom among all cells without magnets in the grid.\nHere, in the definition of degree of freedom, \"cells he can reach by repeatedly moving\" mean cells that can be reached from the initial cell by some sequence of moves (possibly zero moves). It is not necessary that there is a sequence of moves that visits all such reachable cells starting from the initial cell. Specifically, each cell itself (without a magnet) is always included in the cells reachable from that cell.\n\nInput\n\nThe input is given from Standard Input in the following format:\nH W\nS_1\nS_2\n\\vdots\nS_H\n\nOutput\n\nPrint the maximum degree of freedom among all cells without magnets.\n\nConstraints\n\n\n- 1 \\leq H, W \\leq 1000\n- H and W are integers.\n- S_i is a string of length W consisting of . and #.\n- There is at least one cell without a magnet.\n\nSample Input 1\n\n3 5\n.#...\n.....\n.#..#\n\nSample Output 1\n\n9\n\nLet (i,j) denote the cell at the i-th row from the top and j-th column from the left. If Takahashi starts at (2,3), possible movements include:\n\n- (2,3) \\to (2,4) \\to (1,4) \\to (1,5) \\to (2,5)\n- (2,3) \\to (2,4) \\to (3,4)\n- (2,3) \\to (2,2)\n- (2,3) \\to (1,3)\n- (2,3) \\to (3,3)\n\nThus, including the cells he passes through, he can reach at least nine cells from (2,3).\nActually, no other cells can be reached, so the degree of freedom for (2,3) is 9.\nThis is the maximum degree of freedom among all cells without magnets, so print 9.\n\nSample Input 2\n\n3 3\n..#\n#..\n..#\n\nSample Output 2\n\n1\n\nFor any cell without a magnet, there is a magnet in at least one of the adjacent cells.\nThus, he cannot move from any of these cells, so their degrees of freedom are 1.\nTherefore, print 1.", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"3 5\\n.#...\\n.....\\n.#..#\\n\", \"output\": \"9\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3 3\\n..#\\n#..\\n..#\\n\", \"output\": \"1\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc352_e", "question_title": "Clique Connect", "question_content": "You are given a weighted undirected graph G with N vertices, numbered 1 to N. Initially, G has no edges.\nYou will perform M operations to add edges to G. The i-th operation (1 \\leq i \\leq M) is as follows:\n\n- You are given a subset of vertices S_i=\\lbrace A_{i,1},A_{i,2},\\dots,A_{i,K_i}\\rbrace consisting of K_i vertices.\nFor every pair u, v such that u, v \\in S_i and u < v, add an edge between vertices u and v with weight C_i.\n\nAfter performing all M operations, determine whether G is connected. If it is, find the total weight of the edges in a minimum spanning tree of G.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN M\nK_1 C_1\nA_{1,1} A_{1,2} \\dots A_{1,K_1}\nK_2 C_2\nA_{2,1} A_{2,2} \\dots A_{2,K_2}\n\\vdots\nK_M C_M\nA_{M,1} A_{M,2} \\dots A_{M,K_M}\n\nOutput\n\nIf G is not connected after all M operations, print -1. If G is connected, print the total weight of the edges in a minimum spanning tree of G.\n\nConstraints\n\n\n- 2 \\leq N \\leq 2 \\times 10^5\n- 1 \\leq M \\leq 2 \\times 10^5\n- 2 \\leq K_i \\leq N\n- \\sum_{i=1}^{M} K_i \\leq 4 \\times 10^5\n- 1 \\leq A_{i,1} < A_{i,2} < \\dots < A_{i,K_i} \\leq N\n- 1 \\leq C_i \\leq 10^9\n- All input values are integers.\n\nSample Input 1\n\n4 3\n3 3\n1 2 3\n2 2\n1 2\n3 4\n1 3 4\n\nSample Output 1\n\n9\n\n\nThe left diagram shows G after all M operations, and the right diagram shows a minimum spanning tree of G (the numbers next to the edges indicate their weights).\nThe total weight of the edges in the minimum spanning tree is 3 + 2 + 4 = 9.\n\nSample Input 2\n\n3 2\n2 1\n1 2\n2 1\n1 2\n\nSample Output 2\n\n-1\n\nG is not connected even after all M operations.\n\nSample Input 3\n\n10 5\n6 158260522\n1 3 6 8 9 10\n10 877914575\n1 2 3 4 5 6 7 8 9 10\n4 602436426\n2 6 7 9\n6 24979445\n2 3 4 5 8 10\n4 861648772\n2 4 8 9\n\nSample Output 3\n\n1202115217", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"4 3\\n3 3\\n1 2 3\\n2 2\\n1 2\\n3 4\\n1 3 4\\n\", \"output\": \"9\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3 2\\n2 1\\n1 2\\n2 1\\n1 2\\n\", \"output\": \"-1\\n\", \"testtype\": \"stdin\"}, {\"input\": \"10 5\\n6 158260522\\n1 3 6 8 9 10\\n10 877914575\\n1 2 3 4 5 6 7 8 9 10\\n4 602436426\\n2 6 7 9\\n6 24979445\\n2 3 4 5 8 10\\n4 861648772\\n2 4 8 9\\n\", \"output\": \"1202115217\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc352_a", "question_title": "AtCoder Line", "question_content": "The AtCoder railway line has N stations, numbered 1, 2, \\ldots, N.\nOn this line, there are inbound trains that start at station 1 and stop at the stations 2, 3, \\ldots, N in order, and outbound trains that start at station N and stop at the stations N - 1, N - 2, \\ldots, 1 in order.\nTakahashi is about to travel from station X to station Y using only one of the inbound and outbound trains.\nDetermine whether the train stops at station Z during this travel.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN X Y Z\n\nOutput\n\nIf the train stops at station Z during the travel from station X to station Y, print Yes; otherwise, print No.\n\nConstraints\n\n\n- 3 \\leq N \\leq 100\n- 1 \\leq X, Y, Z \\leq N\n- X, Y, and Z are distinct.\n- All input values are integers.\n\nSample Input 1\n\n7 6 1 3\n\nSample Output 1\n\nYes\r\n\nTo travel from station 6 to station 1, Takahashi will take an outbound train.\nAfter departing from station 6, the train stops at stations 5, 4, 3, 2, 1 in order, which include station 3, so you should print Yes.\n\nSample Input 2\n\n10 3 2 9\n\nSample Output 2\n\nNo\n\nSample Input 3\n\n100 23 67 45\n\nSample Output 3\n\nYes", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"7 6 1 3\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"10 3 2 9\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}, {\"input\": \"100 23 67 45\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc352_c", "question_title": "Standing On The Shoulders", "question_content": "There are N giants, named 1 to N. When giant i stands on the ground, their shoulder height is A_i, and their head height is B_i.\nYou can choose a permutation (P_1, P_2, \\ldots, P_N) of (1, 2, \\ldots, N) and stack the N giants according to the following rules:\n\n- \r\nFirst, place giant P_1 on the ground. The giant P_1's shoulder will be at a height of A_{P_1} from the ground, and their head will be at a height of B_{P_1} from the ground.\n\n- \r\nFor i = 1, 2, \\ldots, N - 1 in order, place giant P_{i + 1} on the shoulders of giant P_i. If giant P_i's shoulders are at a height of t from the ground, then giant P_{i + 1}'s shoulders will be at a height of t + A_{P_{i + 1}} from the ground, and their head will be at a height of t + B_{P_{i + 1}} from the ground.\n\n\nFind the maximum possible height of the head of the topmost giant P_N from the ground.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nA_1 B_1\r\nA_2 B_2\r\n\\vdots\r\nA_N B_N\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- 2 \\leq N \\leq 2 \\times 10^5\n- 1 \\leq A_i \\leq B_i \\leq 10^9\n- All input values are integers.\n\nSample Input 1\n\n3\r\n4 10\r\n5 8\r\n2 9\n\nSample Output 1\n\n18\r\n\nIf (P_1, P_2, P_3) = (2, 1, 3), then measuring from the ground, giant 2 has a shoulder height of 5 and a head height of 8, giant 1 has a shoulder height of 9 and a head height of 15, and giant 3 has a shoulder height of 11 and a head height of 18.\nThe head height of the topmost giant from the ground cannot be greater than 18, so print 18.\n\nSample Input 2\n\n5\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\n\nSample Output 2\n\n5\n\nSample Input 3\n\n10\r\n690830957 868532399\r\n741145463 930111470\r\n612846445 948344128\r\n540375785 925723427\r\n723092548 925021315\r\n928915367 973970164\r\n563314352 832796216\r\n562681294 868338948\r\n923012648 954764623\r\n691107436 891127278\n\nSample Output 3\n\n7362669937", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"3\\n4 10\\n5 8\\n2 9\\n\", \"output\": \"18\\n\", \"testtype\": \"stdin\"}, {\"input\": \"5\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n\", \"output\": \"5\\n\", \"testtype\": \"stdin\"}, {\"input\": \"10\\n690830957 868532399\\n741145463 930111470\\n612846445 948344128\\n540375785 925723427\\n723092548 925021315\\n928915367 973970164\\n563314352 832796216\\n562681294 868338948\\n923012648 954764623\\n691107436 891127278\\n\", \"output\": \"7362669937\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc352_b", "question_title": "Typing", "question_content": "Takahashi tried to type a string S consisting of lowercase English letters using a keyboard.\nHe was typing while looking only at the keyboard, not the screen.\nWhenever he mistakenly typed a different lowercase English letter, he immediately pressed the backspace key. However, the backspace key was broken, so the mistakenly typed letter was not deleted, and the actual string typed was T.\nHe did not mistakenly press any keys other than those for lowercase English letters.\nThe characters in T that were not mistakenly typed are called correctly typed characters.\nDetermine the positions in T of the correctly typed characters.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\r\nT\n\nOutput\n\nLet |S| be the length of S. If the correctly typed characters are the A_1-th, A_2-th, \\ldots, A_{|S|}-th characters of T, print the values of A_1, A_2, \\ldots, A_{|S|} in this order, separated by spaces.\nEnsure that the output is in ascending order. That is, A_i < A_{i + 1} should hold for each 1 \\leq i \\leq |S| - 1.\n\nConstraints\n\n\n- S and T are strings of lowercase English letters with lengths between 1 and 2 \\times 10^5, inclusive.\n- T is a string obtained by the procedure described in the problem statement.\n\nSample Input 1\n\nabc\r\naxbxyc\n\nSample Output 1\n\n1 3 6\r\n\nThe sequence of Takahashi's typing is as follows:\n\n- Type a.\n- Try to type b but mistakenly type x.\n- Press the backspace key, but the character is not deleted.\n- Type b.\n- Try to type c but mistakenly type x.\n- Press the backspace key, but the character is not deleted.\n- Try to type c but mistakenly type y.\n- Press the backspace key, but the character is not deleted.\n- Type c.\n\nThe correctly typed characters are the first, third, and sixth characters.\n\nSample Input 2\n\naaaa\r\nbbbbaaaa\n\nSample Output 2\n\n5 6 7 8\n\nSample Input 3\n\natcoder\r\natcoder\n\nSample Output 3\n\n1 2 3 4 5 6 7\r\n\nTakahashi did not mistakenly type any characters.", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"abc\\naxbxyc\\n\", \"output\": \"1 3 6\\n\", \"testtype\": \"stdin\"}, {\"input\": \"aaaa\\nbbbbaaaa\\n\", \"output\": \"5 6 7 8\\n\", \"testtype\": \"stdin\"}, {\"input\": \"atcoder\\natcoder\\n\", \"output\": \"1 2 3 4 5 6 7\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc352_d", "question_title": "Permutation Subsequence", "question_content": "You are given a permutation P = (P_1, P_2, \\dots, P_N) of (1, 2, \\dots, N).\nA length-K sequence of indices (i_1, i_2, \\dots, i_K) is called a good index sequence if it satisfies both of the following conditions:\n\n- 1 \\leq i_1 < i_2 < \\dots < i_K \\leq N.\n- The subsequence (P_{i_1}, P_{i_2}, \\dots, P_{i_K}) can be obtained by rearranging some consecutive K integers.\nFormally, there exists an integer a such that \\lbrace P_{i_1},P_{i_2},\\dots,P_{i_K} \\rbrace = \\lbrace a,a+1,\\dots,a+K-1 \\rbrace.\n\nFind the minimum value of i_K - i_1 among all good index sequences. It can be shown that at least one good index sequence exists under the constraints of this problem.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN K\nP_1 P_2 \\dots P_N\n\nOutput\n\nPrint the minimum value of i_K - i_1 among all good index sequences.\n\nConstraints\n\n\n- 1 \\leq K \\leq N \\leq 2 \\times 10^5\n- 1 \\leq P_i \\leq N\n- P_i \\neq P_j if i \\neq j.\n- All input values are integers.\n\nSample Input 1\n\n4 2\n2 3 1 4\n\nSample Output 1\n\n1\n\nThe good index sequences are (1,2),(1,3),(2,4). For example, (i_1, i_2) = (1,3) is a good index sequence because 1 \\leq i_1 < i_2 \\leq N and (P_{i_1}, P_{i_2}) = (2,1) is a rearrangement of two consecutive integers 1, 2.\nAmong these good index sequences, the smallest value of i_K - i_1 is for (1,2), which is 2-1=1.\n\nSample Input 2\n\n4 1\n2 3 1 4\n\nSample Output 2\n\n0\n\ni_K - i_1 = i_1 - i_1 = 0 in all good index sequences.\n\nSample Input 3\n\n10 5\n10 1 6 8 7 2 5 9 3 4\n\nSample Output 3\n\n5", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"4 2\\n2 3 1 4\\n\", \"output\": \"1\\n\", \"testtype\": \"stdin\"}, {\"input\": \"4 1\\n2 3 1 4\\n\", \"output\": \"0\\n\", \"testtype\": \"stdin\"}, {\"input\": \"10 5\\n10 1 6 8 7 2 5 9 3 4\\n\", \"output\": \"5\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc353_c", "question_title": "Sigma Problem", "question_content": "For positive integers x and y, define f(x, y) as the remainder of (x + y) divided by 10^8.\nYou are given a sequence of positive integers A = (A_1, \\ldots, A_N) of length N. Find the value of the following expression:\n\\displaystyle \\sum_{i=1}^{N-1}\\sum_{j=i+1}^N f(A_i,A_j).\n\nInput\n\nThe input is given from Standard Input in the following format:\nN \r\nA_1 \\ldots A_N\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- 2 \\leq N \\leq 3\\times 10^5\n- 1 \\leq A_i < 10^8\n- All input values are integers.\n\nSample Input 1\n\n3\r\n3 50000001 50000002\n\nSample Output 1\n\n100000012\r\n\n\n- f(A_1,A_2)=50000004 \n- f(A_1,A_3)=50000005 \n- f(A_2,A_3)=3 \n\nThus, the answer is f(A_1,A_2) + f(A_1,A_3) + f(A_2,A_3) = 100000012.\nNote that you are not asked to compute the remainder of the sum divided by 10^8.\n\nSample Input 2\n\n5\r\n1 3 99999999 99999994 1000000\n\nSample Output 2\n\n303999988", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"3\\n3 50000001 50000002\\n\", \"output\": \"100000012\\n\", \"testtype\": \"stdin\"}, {\"input\": \"5\\n1 3 99999999 99999994 1000000\\n\", \"output\": \"303999988\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc353_b", "question_title": "AtCoder Amusement Park", "question_content": "The AtCoder amusement park has an attraction that can accommodate K people. Now, there are N groups lined up in the queue for this attraction.\nThe i-th group from the front (1\\leq i\\leq N) consists of A_i people. For all i (1\\leq i\\leq N), it holds that A_i \\leq K.\nTakahashi, as a staff member of this attraction, will guide the groups in the queue according to the following procedure.\nInitially, no one has been guided to the attraction, and there are K empty seats.\n\n- If there are no groups in the queue, start the attraction and end the guidance.\n- Compare the number of empty seats in the attraction with the number of people in the group at the front of the queue, and do one of the following:\n- If the number of empty seats is less than the number of people in the group at the front, start the attraction. Then, the number of empty seats becomes K again.\n- Otherwise, guide the entire group at the front of the queue to the attraction. The front group is removed from the queue, and the number of empty seats decreases by the number of people in the group.\n\n\n- Go back to step 1.\n\nHere, no additional groups will line up after the guidance has started. Under these conditions, it can be shown that this procedure will end in a finite number of steps.\nDetermine how many times the attraction will be started throughout the guidance.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN K\r\nA_1 A_2 \\ldots A_N\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- 1\\leq N\\leq 100\n- 1\\leq K\\leq 100\n- 1\\leq A_i\\leq K\\ (1\\leq i\\leq N)\n- All input values are integers.\n\nSample Input 1\n\n7 6\r\n2 5 1 4 1 2 3\n\nSample Output 1\n\n4\r\n\nInitially, the seven groups are lined up as follows:\n\nPart of Takahashi's guidance is shown in the following figure:\n\n\n- Initially, the group at the front has 2 people, and there are 6 empty seats. Thus, he guides the front group to the attraction, leaving 4 empty seats.\n- Next, the group at the front has 5 people, which is more than the 4 empty seats, so the attraction is started.\n- After the attraction is started, there are 6 empty seats again, so the front group is guided to the attraction, leaving 1 empty seat.\n- Next, the group at the front has 1 person, so they are guided to the attraction, leaving 0 empty seats.\n\nIn total, he starts the attraction four times before the guidance is completed.\r\nTherefore, print 4.\n\nSample Input 2\n\n7 10\r\n1 10 1 10 1 10 1\n\nSample Output 2\n\n7\n\nSample Input 3\n\n15 100\r\n73 8 55 26 97 48 37 47 35 55 5 17 62 2 60\n\nSample Output 3\n\n8", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"7 6\\n2 5 1 4 1 2 3\\n\", \"output\": \"4\\n\", \"testtype\": \"stdin\"}, {\"input\": \"7 10\\n1 10 1 10 1 10 1\\n\", \"output\": \"7\\n\", \"testtype\": \"stdin\"}, {\"input\": \"15 100\\n73 8 55 26 97 48 37 47 35 55 5 17 62 2 60\\n\", \"output\": \"8\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc353_a", "question_title": "Buildings", "question_content": "There are N buildings aligned in a row. The i-th building from the left has a height of H_i.\nDetermine if there is a building taller than the first one from the left. If such a building exists, find the position of the leftmost such building from the left.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nH_1 H_2 \\ldots H_N\n\nOutput\n\nIf no building is taller than the first one from the left, print -1.\nIf such a building exists, print the position (index) of the leftmost such building from the left.\n\nConstraints\n\n\n- 1 \\leq N \\leq 100\n- 1 \\leq H_i \\leq 100\n- All input values are integers.\n\nSample Input 1\n\n4\r\n3 2 5 2\n\nSample Output 1\n\n3\r\n\nThe building taller than the first one from the left is the third one from the left.\n\nSample Input 2\n\n3\r\n4 3 2\n\nSample Output 2\n\n-1\r\n\nNo building is taller than the first one from the left.\n\nSample Input 3\n\n7\r\n10 5 10 2 10 13 15\n\nSample Output 3\n\n6\r\n\nThe buildings taller than the first one from the left are the sixth and seventh ones. Among them, the leftmost is the sixth one.", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"4\\n3 2 5 2\\n\", \"output\": \"3\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3\\n4 3 2\\n\", \"output\": \"-1\\n\", \"testtype\": \"stdin\"}, {\"input\": \"7\\n10 5 10 2 10 13 15\\n\", \"output\": \"6\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc353_e", "question_title": "Yet Another Sigma Problem", "question_content": "For strings x and y, define f(x, y) as follows:\n\n- f(x, y) is the length of the longest common prefix of x and y.\n\nYou are given N strings (S_1, \\ldots, S_N) consisting of lowercase English letters. Find the value of the following expression:\n\\displaystyle \\sum_{i=1}^{N-1}\\sum_{j=i+1}^N f(S_i,S_j).\n\nInput\n\nThe input is given from Standard Input in the following format:\nN \r\nS_1 \\ldots S_N\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- 2 \\leq N \\leq 3\\times 10^5\n- S_i is a string consisting of lowercase English letters.\n- 1 \\leq |S_i|\n- |S_1|+|S_2|+\\ldots+|S_N|\\leq 3\\times 10^5\n- All input numbers are integers.\n\nSample Input 1\n\n3\r\nab abc arc\n\nSample Output 1\n\n4\r\n\n\n- f(S_1,S_2)=2 \n- f(S_1,S_3)=1 \n- f(S_2,S_3)=1 \n\nThus, the answer is f(S_1,S_2) + f(S_1,S_3) + f(S_2,S_3) = 4.\n\nSample Input 2\n\n11\r\nab bb aaa bba baba babb aaaba aabbb a a b\n\nSample Output 2\n\n32", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"3\\nab abc arc\\n\", \"output\": \"4\\n\", \"testtype\": \"stdin\"}, {\"input\": \"11\\nab bb aaa bba baba babb aaaba aabbb a a b\\n\", \"output\": \"32\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc353_d", "question_title": "Another Sigma Problem", "question_content": "For positive integers x and y, define f(x, y) as follows:\n\n- Interpret the decimal representations of x and y as strings and concatenate them in this order to obtain a string z. The value of f(x, y) is the value of z when interpreted as a decimal integer.\n\nFor example, f(3, 14) = 314 and f(100, 1) = 1001.\nYou are given a sequence of positive integers A = (A_1, \\ldots, A_N) of length N. Find the value of the following expression modulo 998244353:\n\\displaystyle \\sum_{i=1}^{N-1}\\sum_{j=i+1}^N f(A_i,A_j).\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nA_1 \\ldots A_N\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- 2 \\leq N \\leq 2 \\times 10^5\n- 1 \\leq A_i \\leq 10^9\n- All input values are integers.\n\nSample Input 1\n\n3\r\n3 14 15\n\nSample Output 1\n\n2044\r\n\n\n- f(A_1, A_2) = 314\n- f(A_1, A_3) = 315\n- f(A_2, A_3) = 1415\n\nThus, the answer is f(A_1, A_2) + f(A_1, A_3) + f(A_2, A_3) = 2044.\n\nSample Input 2\n\n5\r\n1001 5 1000000 1000000000 100000\n\nSample Output 2\n\n625549048\r\n\nBe sure to calculate the value modulo 998244353.", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"3\\n3 14 15\\n\", \"output\": \"2044\\n\", \"testtype\": \"stdin\"}, {\"input\": \"5\\n1001 5 1000000 1000000000 100000\\n\", \"output\": \"625549048\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc354_b", "question_title": "AtCoder Janken 2", "question_content": "N AtCoder users have gathered to play AtCoder RPS 2. The i-th user's name is S_i and their rating is C_i.\nAtCoder RPS 2 is played as follows:\n\n- Assign the numbers 0, 1, \\dots, N - 1 to the users in lexicographical order of their usernames.\n- Let T be the sum of the ratings of the N users. The user assigned the number T \\bmod N is the winner.\n\nPrint the winner's username.\n\nWhat is lexicographical order?\n\nLexicographical order, simply put, means \"the order in which words appear in a dictionary.\" More precisely, the algorithm to determine the order of two distinct strings S and T consisting of lowercase English letters is as follows:\n\nHere, \"the i-th character of S\" is denoted as S_i. If S is lexicographically smaller than T, we write S \\lt T, and if S is larger, we write S \\gt T.\n\n-  Let L be the length of the shorter string among S and T. Check if S_i and T_i match for i=1,2,\\dots,L. \n-  If there exists an i such that S_i \\neq T_i, let j be the smallest such i. Compare S_j and T_j. If S_j is alphabetically smaller than T_j, then S \\lt T. Otherwise, S \\gt T. The algorithm ends here.\n  \n-  If there is no i such that S_i \\neq T_i, compare the lengths of S and T. If S is shorter than T, then S \\lt T. If S is longer, then S \\gt T. The algorithm ends here.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\nS_1 C_1\nS_2 C_2\n\\vdots\nS_N C_N\n\nOutput\n\nPrint the answer on a single line.\n\nConstraints\n\n\n- 1 \\leq N \\leq 100\n- S_i is a string consisting of lowercase English letters with length between 3 and 16, inclusive.\n- S_1, S_2, \\dots, S_N are all distinct.\n- 1 \\leq C_i \\leq 4229\n- C_i is an integer.\n\nSample Input 1\n\n3\ntakahashi 2\naoki 6\nsnuke 5\n\nSample Output 1\n\nsnuke\n\nThe sum of the ratings of the three users is 13. Sorting their names in lexicographical order yields aoki, snuke, takahashi, so aoki is assigned number 0, snuke is 1, and takahashi is 2.\nSince 13 \\bmod 3 = 1, print snuke, who is assigned number 1.\n\nSample Input 2\n\n3\ntakahashi 2813\ntakahashixx 1086\ntakahashix 4229\n\nSample Output 2\n\ntakahashix", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"3\\ntakahashi 2\\naoki 6\\nsnuke 5\\n\", \"output\": \"snuke\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3\\ntakahashi 2813\\ntakahashixx 1086\\ntakahashix 4229\\n\", \"output\": \"takahashix\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc354_a", "question_title": "Exponential Plant", "question_content": "Takahashi is growing a plant. Its height at the time of germination is 0\\,\\mathrm{cm}. Considering the day of germination as day 0, its height increases by 2^i\\,\\mathrm{cm} day i's night (0 \\le i).\nTakahashi's height is H\\,\\mathrm{cm}.\nEvery morning, Takahashi measures his height against this plant.  Find the first day such that the plant's height is strictly greater than Takahashi's height in the morning.\n\nInput\n\nThe input is given from Standard Input in the following format:\nH\n\nOutput\n\nPrint an integer representing the first day such that the plant's height is greater than Takahashi's height in the morning.\n\nConstraints\n\n\n- 1 \\leq H \\leq 10^{9}\n- All input values are integers.\n\nSample Input 1\n\n54\n\nSample Output 1\n\n6\n\nThe plant's height in the mornings of days 1, 2, 3, 4, 5, 6 will be 1\\,\\mathrm{cm}, 3\\,\\mathrm{cm}, 7\\,\\mathrm{cm}, 15\\,\\mathrm{cm}, 31\\,\\mathrm{cm}, 63\\,\\mathrm{cm}, respectively. The plant becomes taller than Takahashi in the morning day 6, so print 6.\n\nSample Input 2\n\n7\n\nSample Output 2\n\n4\n\nThe plant's height will be 7\\,\\mathrm{cm} in the morning of day 3 and 15\\,\\mathrm{cm} in the morning day 4. The plant becomes taller than Takahashi in the morning of day 4, so print 4. Note that, in the morning of day 3, the plant is as tall as Takahashi, but not taller.\n\nSample Input 3\n\n262144\n\nSample Output 3\n\n19", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"54\\n\", \"output\": \"6\\n\", \"testtype\": \"stdin\"}, {\"input\": \"7\\n\", \"output\": \"4\\n\", \"testtype\": \"stdin\"}, {\"input\": \"262144\\n\", \"output\": \"19\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc354_e", "question_title": "Remove Pairs", "question_content": "Takahashi and Aoki are playing a game using N cards. The front side of the i-th card has A_i written on it, and the back side has B_i written on it. Initially, the N cards are laid out on the table. With Takahashi going first, the two players take turns performing the following operation:\n\n- Choose a pair of cards from the table such that either the numbers on their front sides are the same or the numbers on their back sides are the same, and remove these two cards from the table. If no such pair of cards exists, the player cannot perform the operation.\n\nThe player who is first to be unable to perform the operation loses, and the other player wins.\r\nDetermine who wins if both players play optimally.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nA_1 B_1\r\nA_2 B_2\r\n\\vdots\r\nA_N B_N\n\nOutput\n\nPrint Takahashi if Takahashi wins when both players play optimally, and Aoki otherwise.\n\nConstraints\n\n\n- 1 \\leq N \\leq 18\n- 1 \\leq A_i, B_i \\leq 10^9\n- All input values are integers.\n\nSample Input 1\n\n5\r\n1 9\r\n2 5\r\n4 9\r\n1 4\r\n2 5\n\nSample Output 1\n\nAoki\r\n\nIf Takahashi first removes\n\n- \r\nthe first and third cards: Aoki can win by removing the second and fifth cards.\n\n- \r\nthe first and fourth cards: Aoki can win by removing the second and fifth cards.\n\n- \r\nthe second and fifth cards: Aoki can win by removing the first and third cards.\n\n\nThese are the only three pairs of cards Takahashi can remove in his first move, and Aoki can win in all cases. Therefore, the answer is Aoki.\n\nSample Input 2\n\n9\r\n3 2\r\n1 7\r\n4 1\r\n1 8\r\n5 2\r\n9 8\r\n2 1\r\n6 8\r\n5 2\n\nSample Output 2\n\nTakahashi", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"5\\n1 9\\n2 5\\n4 9\\n1 4\\n2 5\\n\", \"output\": \"Aoki\\n\", \"testtype\": \"stdin\"}, {\"input\": \"9\\n3 2\\n1 7\\n4 1\\n1 8\\n5 2\\n9 8\\n2 1\\n6 8\\n5 2\\n\", \"output\": \"Takahashi\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc354_c", "question_title": "AtCoder Magics", "question_content": "Takahashi has N cards from the card game \"AtCoder Magics.\" The i-th card will be called card i. Each card has two parameters: strength and cost. Card i has a strength of A_i and a cost of C_i.\nHe does not like weak cards, so he will discard them. Specifically, he will repeat the following operation until it can no longer be performed:\n\n- Choose two cards x and y such that A_x > A_y and C_x < C_y. Discard card y.\n\nIt can be proved that the set of remaining cards when the operations can no longer be performed is uniquely determined. Find this set of cards.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\nA_1 C_1\nA_2 C_2\n\\vdots\nA_N C_N\n\nOutput\n\nLet there be m remaining cards, cards i_1, i_2, \\dots, i_m, in ascending order. Print these in the following format:\nm\ni_1 i_2 \\cdots i_m\n\nConstraints\n\n\n- 2 \\leq N \\leq 2 \\times 10^5\n- 1 \\leq A_i, C_i \\leq 10^9\n- A_1, A_2, \\dots ,A_N are all distinct.\n- C_1, C_2, \\dots ,C_N are all distinct.\n- All input values are integers.\n\nSample Input 1\n\n3\n2 4\n1 1\n3 2\n\nSample Output 1\n\n2\n2 3\n\nFocusing on cards 1 and 3, we have A_1 < A_3 and C_1 > C_3, so card 1 can be discarded.\nNo further operations can be performed. At this point, cards 2 and 3 remain, so print them.\n\nSample Input 2\n\n5\n1 1\n10 2\n100 3\n1000 4\n10000 5\n\nSample Output 2\n\n5\n1 2 3 4 5\n\nIn this case, no cards can be discarded.\n\nSample Input 3\n\n6\n32 101\n65 78\n2 29\n46 55\n103 130\n52 40\n\nSample Output 3\n\n4\n2 3 5 6", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"3\\n2 4\\n1 1\\n3 2\\n\", \"output\": \"2\\n2 3\\n\", \"testtype\": \"stdin\"}, {\"input\": \"5\\n1 1\\n10 2\\n100 3\\n1000 4\\n10000 5\\n\", \"output\": \"5\\n1 2 3 4 5\\n\", \"testtype\": \"stdin\"}, {\"input\": \"6\\n32 101\\n65 78\\n2 29\\n46 55\\n103 130\\n52 40\\n\", \"output\": \"4\\n2 3 5 6\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc354_d", "question_title": "AtCoder Wallpaper", "question_content": "The pattern of AtCoder's wallpaper can be represented on the xy-plane as follows:\n\n- \nThe plane is divided by the following three types of lines:\n\n- \nx = n (where n is an integer)\n\n- \ny = n (where n is an even number)\n\n- \nx + y = n (where n is an even number)\n\n\n\n- \nEach region is painted black or white. Any two regions adjacent along one of these lines are painted in different colors.\n\n- \nThe region containing (0.5, 0.5) is painted black.\n\n\nThe following figure shows a part of the pattern.\n\nYou are given integers A, B, C, D. Consider a rectangle whose sides are parallel to the x- and y-axes, with its bottom-left vertex at (A, B) and its top-right vertex at (C, D). Calculate the area of the regions painted black inside this rectangle, and print twice that area.\nIt can be proved that the output value will be an integer.\n\nInput\n\nThe input is given from Standard Input in the following format:\nA B C D\n\nOutput\n\nPrint the answer on a single line.\n\nConstraints\n\n\n- -10^9 \\leq A, B, C, D \\leq 10^9\n- A < C and B < D.\n- All input values are integers.\n\nSample Input 1\n\n0 0 3 3\n\nSample Output 1\n\n10\n\nWe are to find the area of the black-painted region inside the following square:\n\nThe area is 5, so print twice that value: 10.\n\nSample Input 2\n\n-1 -2 1 3\n\nSample Output 2\n\n11\n\nThe area is 5.5, which is not an integer, but the output value is an integer.\n\nSample Input 3\n\n-1000000000 -1000000000 1000000000 1000000000\n\nSample Output 3\n\n4000000000000000000\n\nThis is the case with the largest rectangle, where the output still fits into a 64-bit signed integer.", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"0 0 3 3\\n\", \"output\": \"10\\n\", \"testtype\": \"stdin\"}, {\"input\": \"-1 -2 1 3\\n\", \"output\": \"11\\n\", \"testtype\": \"stdin\"}, {\"input\": \"-1000000000 -1000000000 1000000000 1000000000\\n\", \"output\": \"4000000000000000000\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc355_e", "question_title": "Guess the Sum", "question_content": "This is an interactive problem (where your program interacts with the judge via input and output).\nYou are given a positive integer N and integers L and R such that 0 \\leq L \\leq R < 2^N. The judge has a hidden sequence A = (A_0, A_1, \\dots, A_{2^N-1}) consisting of integers between 0 and 99, inclusive.\nYour goal is to find the remainder when A_L + A_{L+1} + \\dots + A_R is divided by 100. However, you cannot directly know the values of the elements in the sequence A. Instead, you can ask the judge the following question:\n\n- Choose non-negative integers i and j such that 2^i(j+1) \\leq 2^N. Let l = 2^i j and r = 2^i (j+1) - 1. Ask for the remainder when A_l + A_{l+1} + \\dots + A_r is divided by 100.\n\nLet m be the minimum number of questions required to determine the remainder when A_L + A_{L+1} + \\dots + A_R is divided by 100 for any sequence A. You need to find this remainder within m questions.\n\nInput and Output\n\nThis is an interactive problem (where your program interacts with the judge via input and output).\nFirst, read the integers N, L, and R from Standard Input:\nN L R\r\n\nThen, repeat asking questions until you can determine the remainder when A_L + A_{L+1} + \\dots + A_R is divided by 100. Each question should be printed in the following format:\n? i j\r\n\nHere, i and j must satisfy the following constraints:\n\n- i and j are non-negative integers.\n- 2^i(j+1) \\leq 2^N\n\nThe response to the question will be given in the following format from Standard Input:\nT\r\n\nHere, T is the answer to the question, which is the remainder when A_l + A_{l+1} + \\dots + A_r is divided by 100, where l = 2^i j and r = 2^i (j+1) - 1.\nIf i and j do not satisfy the constraints, or if the number of questions exceeds m, then T will be -1.\nIf the judge returns -1, your program is already considered incorrect. In this case, terminate the program immediately.\nOnce you have determined the remainder when A_L + A_{L+1} + \\dots + A_R is divided by 100, print the remainder S in the following format and terminate the program immediately:\n! S\n\nInput and Output\n\nThis is an interactive problem (where your program interacts with the judge via input and output).\nFirst, read the integers N, L, and R from Standard Input:\nN L R\r\n\nThen, repeat asking questions until you can determine the remainder when A_L + A_{L+1} + \\dots + A_R is divided by 100. Each question should be printed in the following format:\n? i j\r\n\nHere, i and j must satisfy the following constraints:\n\n- i and j are non-negative integers.\n- 2^i(j+1) \\leq 2^N\n\nThe response to the question will be given in the following format from Standard Input:\nT\r\n\nHere, T is the answer to the question, which is the remainder when A_l + A_{l+1} + \\dots + A_r is divided by 100, where l = 2^i j and r = 2^i (j+1) - 1.\nIf i and j do not satisfy the constraints, or if the number of questions exceeds m, then T will be -1.\nIf the judge returns -1, your program is already considered incorrect. In this case, terminate the program immediately.\nOnce you have determined the remainder when A_L + A_{L+1} + \\dots + A_R is divided by 100, print the remainder S in the following format and terminate the program immediately:\n! S\n\nConstraints\n\n\n- 1 \\leq N \\leq 18\n- 0 \\leq L \\leq R \\leq 2^N - 1\n- All input values are integers.\n\n", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"3 1 5\\n31 41 59 26 53 58 97 93\\n3\\n\", \"output\": \"37\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc355_b", "question_title": "Piano 2", "question_content": "You are given a sequence A=(A_1,A_2,\\dots,A_N) of length N and a sequence B=(B_1,B_2,\\dots,B_M) of length M. Here, all elements of A and B are pairwise distinct. Determine whether the sequence C=(C_1,C_2,\\dots,C_{N+M}) formed by sorting all elements of A and B in ascending order contains two consecutive elements appearing in A.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN M\r\nA_1 A_2 \\dots A_N\r\nB_1 B_2 \\dots B_M\n\nOutput\n\nIf C contains two consecutive elements appearing in A, print Yes; otherwise, print No.\n\nConstraints\n\n\n- 1 \\leq N, M \\leq 100\n- 1 \\leq A_i, B_j \\leq 200\n- A_1, A_2, \\dots, A_N, B_1, B_2, \\dots, B_M are distinct.\n- All input values are integers.\n\nSample Input 1\n\n3 2\r\n3 2 5\r\n4 1\n\nSample Output 1\n\nYes\r\n\nC=(1,2,3,4,5). Since 2 and 3 from A occur consecutively in C, print Yes.\n\nSample Input 2\n\n3 2\r\n3 1 5\r\n4 2\n\nSample Output 2\n\nNo\r\n\nC=(1,2,3,4,5). Since no two elements from A occur consecutively in C, print No.\n\nSample Input 3\n\n1 1\r\n1\r\n2\n\nSample Output 3\n\nNo", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"3 2\\n3 2 5\\n4 1\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3 2\\n3 1 5\\n4 2\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}, {\"input\": \"1 1\\n1\\n2\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc355_c", "question_title": "Bingo 2", "question_content": "There is an N \\times N grid, where the cell at the i-th row from the top and the j-th column from the left contains the integer N \\times (i-1) + j.\nOver T turns, integers will be announced. On Turn i, the integer A_i is announced, and the cell containing A_i is marked. Determine the turn on which Bingo is achieved for the first time. If Bingo is not achieved within T turns, print -1.\nHere, achieving Bingo means satisfying at least one of the following conditions:\n\n- There exists a row in which all N cells are marked.\n- There exists a column in which all N cells are marked.\n- There exists a diagonal line (from top-left to bottom-right or from top-right to bottom-left) in which all N cells are marked.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN T\r\nA_1 A_2 \\ldots A_T\n\nOutput\n\nIf Bingo is achieved within T turns, print the turn number on which Bingo is achieved for the first time; otherwise, print -1.\n\nConstraints\n\n\n- 2 \\leq N \\leq 2 \\times 10^3\n- 1 \\leq T \\leq \\min(N^2, 2 \\times 10^5)\n- 1 \\leq A_i \\leq N^2\n- A_i \\neq A_j if i \\neq j.\n- All input values are integers.\n\nSample Input 1\n\n3 5\r\n5 1 8 9 7\n\nSample Output 1\n\n4\r\n\nThe state of the grid changes as follows. Bingo is achieved for the first time on Turn 4.\n\nSample Input 2\n\n3 5\r\n4 2 9 7 5\n\nSample Output 2\n\n-1\r\n\nBingo is not achieved within five turns, so print -1.\n\nSample Input 3\n\n4 12\r\n13 9 6 5 2 7 16 14 8 3 10 11\n\nSample Output 3\n\n9", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"3 5\\n5 1 8 9 7\\n\", \"output\": \"4\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3 5\\n4 2 9 7 5\\n\", \"output\": \"-1\\n\", \"testtype\": \"stdin\"}, {\"input\": \"4 12\\n13 9 6 5 2 7 16 14 8 3 10 11\\n\", \"output\": \"9\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc355_a", "question_title": "Who Ate the Cake?", "question_content": "Takahashi's cake has been eaten by someone. There are three suspects: person 1, person 2, and person 3.\nThere are two witnesses, Ringo and Snuke. Ringo remembers that person A is not the culprit, and Snuke remembers that person B is not the culprit.\nDetermine if the culprit can be uniquely identified based on the memories of the two witnesses. If the culprit can be identified, print the person's number.\n\nInput\n\nThe input is given from Standard Input in the following format:\nA B\n\nOutput\n\nIf the culprit can be uniquely identified based on the memories of the two witnesses, print the person's number; otherwise, print -1.\n\nConstraints\n\n\n- 1 \\leq A, B \\leq 3\n- All input values are integers.\n\nSample Input 1\n\n1 2\n\nSample Output 1\n\n3\r\n\nFrom the memories of the two witnesses, it can be determined that person 3 is the culprit.\n\nSample Input 2\n\n1 1\n\nSample Output 2\n\n-1\r\n\nFrom the memories of the two witnesses, it cannot be determined whether person 2 or person 3 is the culprit. Therefore, print -1.\n\nSample Input 3\n\n3 1\n\nSample Output 3\n\n2", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"1 2\\n\", \"output\": \"3\\n\", \"testtype\": \"stdin\"}, {\"input\": \"1 1\\n\", \"output\": \"-1\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3 1\\n\", \"output\": \"2\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc355_d", "question_title": "Intersecting Intervals", "question_content": "You are given N intervals of real numbers. The i-th (1 \\leq i \\leq N) interval is [l_i, r_i]. Find the number of pairs (i, j)\\,(1 \\leq i < j \\leq N) such that the i-th and j-th intervals intersect.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nl_1 r_1\r\nl_2 r_2\r\n\\vdots\r\nl_N r_N\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- 2 \\leq N \\leq 5 \\times 10^5\n- 0 \\leq l_i < r_i \\leq 10^9\n- All input values are integers.\n\nSample Input 1\n\n3\r\n1 5\r\n7 8\r\n3 7\n\nSample Output 1\n\n2\r\n\nThe given intervals are [1,5], [7,8], [3,7]. Among these, the 1-st and 3-rd intervals intersect, as well as the 2-nd and 3-rd intervals, so the answer is 2.\n\nSample Input 2\n\n3\r\n3 4\r\n2 5\r\n1 6\n\nSample Output 2\n\n3\n\nSample Input 3\n\n2\r\n1 2\r\n3 4\n\nSample Output 3\n\n0", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"3\\n1 5\\n7 8\\n3 7\\n\", \"output\": \"2\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3\\n3 4\\n2 5\\n1 6\\n\", \"output\": \"3\\n\", \"testtype\": \"stdin\"}, {\"input\": \"2\\n1 2\\n3 4\\n\", \"output\": \"0\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "3334", "question_title": "apple-redistribution-into-boxes", "question_content": "You are given an array apple of size n and an array capacity of size m.\nThere are n packs where the i^th pack contains apple[i] apples. There are m boxes as well, and the i^th box has a capacity of capacity[i] apples.\nReturn the minimum number of boxes you need to select to redistribute these n packs of apples into boxes.\nNote that, apples from the same pack can be distributed into different boxes.\n \nExample 1:\n\nInput: apple = [1,3,2], capacity = [4,3,1,5,2]\nOutput: 2\nExplanation: We will use boxes with capacities 4 and 5.\nIt is possible to distribute the apples as the total capacity is greater than or equal to the total number of apples.\n\nExample 2:\n\nInput: apple = [5,5,5], capacity = [2,4,2,7]\nOutput: 4\nExplanation: We will need to use all the boxes.\n\n \nConstraints:\n\n1 <= n == apple.length <= 50\n1 <= m == capacity.length <= 50\n1 <= apple[i], capacity[i] <= 50\nThe input is generated such that it's possible to redistribute packs of apples into boxes.", "difficulty": "easy", "starter_code": "class Solution:\n    def minimumBoxes(self, apple: List[int], capacity: List[int]) -> int:\n        ", "public_test_cases": "[{\"input\": \"[1, 3, 2]\\n[4, 3, 1, 5, 2]\", \"output\": \"2\", \"testtype\": \"functional\"}, {\"input\": \"[5, 5, 5]\\n[2, 4, 2, 7]\", \"output\": \"4\", \"testtype\": \"functional\"}]"}
{"question_id": "3351", "question_title": "maximize-happiness-of-selected-children", "question_content": "You are given an array happiness of length n, and a positive integer k.\nThere are n children standing in a queue, where the i^th child has happiness value happiness[i]. You want to select k children from these n children in k turns.\nIn each turn, when you select a child, the happiness value of all the children that have not been selected till now decreases by 1. Note that the happiness value cannot become negative and gets decremented only if it is positive.\nReturn the maximum sum of the happiness values of the selected children you can achieve by selecting k children.\n \nExample 1:\n\nInput: happiness = [1,2,3], k = 2\nOutput: 4\nExplanation: We can pick 2 children in the following way:\n- Pick the child with the happiness value == 3. The happiness value of the remaining children becomes [0,1].\n- Pick the child with the happiness value == 1. The happiness value of the remaining child becomes [0]. Note that the happiness value cannot become less than 0.\nThe sum of the happiness values of the selected children is 3 + 1 = 4.\n\nExample 2:\n\nInput: happiness = [1,1,1,1], k = 2\nOutput: 1\nExplanation: We can pick 2 children in the following way:\n- Pick any child with the happiness value == 1. The happiness value of the remaining children becomes [0,0,0].\n- Pick the child with the happiness value == 0. The happiness value of the remaining child becomes [0,0].\nThe sum of the happiness values of the selected children is 1 + 0 = 1.\n\nExample 3:\n\nInput: happiness = [2,3,4,5], k = 1\nOutput: 5\nExplanation: We can pick 1 child in the following way:\n- Pick the child with the happiness value == 5. The happiness value of the remaining children becomes [1,2,3].\nThe sum of the happiness values of the selected children is 5.\n\n \nConstraints:\n\n1 <= n == happiness.length <= 2 * 10^5\n1 <= happiness[i] <= 10^8\n1 <= k <= n", "difficulty": "medium", "starter_code": "class Solution:\n    def maximumHappinessSum(self, happiness: List[int], k: int) -> int:\n        ", "public_test_cases": "[{\"input\": \"[1, 2, 3]\\n2\", \"output\": \"4\", \"testtype\": \"functional\"}, {\"input\": \"[1, 1, 1, 1]\\n2\", \"output\": \"1\", \"testtype\": \"functional\"}, {\"input\": \"[2, 3, 4, 5]\\n1\", \"output\": \"5\", \"testtype\": \"functional\"}]"}
{"question_id": "3356", "question_title": "shortest-uncommon-substring-in-an-array", "question_content": "You are given an array arr of size n consisting of non-empty strings.\nFind a string array answer of size n such that:\n\nanswer[i] is the shortest substring of arr[i] that does not occur as a substring in any other string in arr. If multiple such substrings exist, answer[i] should be the lexicographically smallest. And if no such substring exists, answer[i] should be an empty string.\n\nReturn the array answer.\n \nExample 1:\n\nInput: arr = [\"cab\",\"ad\",\"bad\",\"c\"]\nOutput: [\"ab\",\"\",\"ba\",\"\"]\nExplanation: We have the following:\n- For the string \"cab\", the shortest substring that does not occur in any other string is either \"ca\" or \"ab\", we choose the lexicographically smaller substring, which is \"ab\".\n- For the string \"ad\", there is no substring that does not occur in any other string.\n- For the string \"bad\", the shortest substring that does not occur in any other string is \"ba\".\n- For the string \"c\", there is no substring that does not occur in any other string.\n\nExample 2:\n\nInput: arr = [\"abc\",\"bcd\",\"abcd\"]\nOutput: [\"\",\"\",\"abcd\"]\nExplanation: We have the following:\n- For the string \"abc\", there is no substring that does not occur in any other string.\n- For the string \"bcd\", there is no substring that does not occur in any other string.\n- For the string \"abcd\", the shortest substring that does not occur in any other string is \"abcd\".\n\n \nConstraints:\n\nn == arr.length\n2 <= n <= 100\n1 <= arr[i].length <= 20\narr[i] consists only of lowercase English letters.", "difficulty": "medium", "starter_code": "class Solution:\n    def shortestSubstrings(self, arr: List[str]) -> List[str]:\n        ", "public_test_cases": "[{\"input\": \"[\\\"cab\\\", \\\"ad\\\", \\\"bad\\\", \\\"c\\\"]\", \"output\": \"[\\\"ab\\\", \\\"\\\", \\\"ba\\\", \\\"\\\"]\", \"testtype\": \"functional\"}, {\"input\": \"[\\\"abc\\\", \\\"bcd\\\", \\\"abcd\\\"]\", \"output\": \"[\\\"\\\", \\\"\\\", \\\"abcd\\\"]\", \"testtype\": \"functional\"}]"}
{"question_id": "3313", "question_title": "maximum-strength-of-k-disjoint-subarrays", "question_content": "You are given a 0-indexed array of integers nums of length n, and a positive odd integer k.\nThe strength of x subarrays is defined as strength = sum[1] * x - sum[2] * (x - 1) + sum[3] * (x - 2) - sum[4] * (x - 3) + ... + sum[x] * 1 where sum[i] is the sum of the elements in the i^th subarray. Formally, strength is sum of (-1)^i+1 * sum[i] * (x - i + 1) over all i's such that 1 <= i <= x.\nYou need to select k disjoint subarrays from nums, such that their strength is maximum.\nReturn the maximum possible strength that can be obtained.\nNote that the selected subarrays don't need to cover the entire array.\n \nExample 1:\n\nInput: nums = [1,2,3,-1,2], k = 3\nOutput: 22\nExplanation: The best possible way to select 3 subarrays is: nums[0..2], nums[3..3], and nums[4..4]. The strength is (1 + 2 + 3) * 3 - (-1) * 2 + 2 * 1 = 22.\n\nExample 2:\n\nInput: nums = [12,-2,-2,-2,-2], k = 5\nOutput: 64\nExplanation: The only possible way to select 5 disjoint subarrays is: nums[0..0], nums[1..1], nums[2..2], nums[3..3], and nums[4..4]. The strength is 12 * 5 - (-2) * 4 + (-2) * 3 - (-2) * 2 + (-2) * 1 = 64.\n\nExample 3:\n\nInput: nums = [-1,-2,-3], k = 1\nOutput: -1\nExplanation: The best possible way to select 1 subarray is: nums[0..0]. The strength is -1.\n\n \nConstraints:\n\n1 <= n <= 10^4\n-10^9 <= nums[i] <= 10^9\n1 <= k <= n\n1 <= n * k <= 10^6\nk is odd.", "difficulty": "hard", "starter_code": "class Solution:\n    def maximumStrength(self, nums: List[int], k: int) -> int:\n        ", "public_test_cases": "[{\"input\": \"[1, 2, 3, -1, 2]\\n3\", \"output\": \"22\", \"testtype\": \"functional\"}, {\"input\": \"[12, -2, -2, -2, -2]\\n5\", \"output\": \"64\", \"testtype\": \"functional\"}, {\"input\": \"[-1, -2, -3]\\n1\", \"output\": \"-1\", \"testtype\": \"functional\"}]"}
{"question_id": "3353", "question_title": "existence-of-a-substring-in-a-string-and-its-reverse", "question_content": "Given a string s, find any substring of length 2 which is also present in the reverse of s.\nReturn true if such a substring exists, and false otherwise.\n \nExample 1:\n\nInput: s = \"leetcode\"\nOutput: true\nExplanation: Substring \"ee\" is of length 2 which is also present in reverse(s) == \"edocteel\".\n\nExample 2:\n\nInput: s = \"abcba\"\nOutput: true\nExplanation: All of the substrings of length 2 \"ab\", \"bc\", \"cb\", \"ba\" are also present in reverse(s) == \"abcba\".\n\nExample 3:\n\nInput: s = \"abcd\"\nOutput: false\nExplanation: There is no substring of length 2 in s, which is also present in the reverse of s.\n\n \nConstraints:\n\n1 <= s.length <= 100\ns consists only of lowercase English letters.", "difficulty": "easy", "starter_code": "class Solution:\n    def isSubstringPresent(self, s: str) -> bool:\n        ", "public_test_cases": "[{\"input\": \"\\\"leetcode\\\"\", \"output\": \"true\", \"testtype\": \"functional\"}, {\"input\": \"\\\"abcba\\\"\", \"output\": \"true\", \"testtype\": \"functional\"}, {\"input\": \"\\\"abcd\\\"\", \"output\": \"false\", \"testtype\": \"functional\"}]"}
{"question_id": "3337", "question_title": "count-substrings-starting-and-ending-with-given-character", "question_content": "You are given a string s and a character c. Return the total number of substrings of s that start and end with c.\n \nExample 1:\n\nInput: s = \"abada\", c = \"a\"\nOutput: 6\nExplanation: Substrings starting and ending with \"a\" are: \"abada\", \"abada\", \"abada\", \"abada\", \"abada\", \"abada\".\n\nExample 2:\n\nInput: s = \"zzz\", c = \"z\"\nOutput: 6\nExplanation: There are a total of 6 substrings in s and all start and end with \"z\".\n\n \nConstraints:\n\n1 <= s.length <= 10^5\ns and c consist only of lowercase English letters.", "difficulty": "medium", "starter_code": "class Solution:\n    def countSubstrings(self, s: str, c: str) -> int:\n        ", "public_test_cases": "[{\"input\": \"\\\"abada\\\"\\n\\\"a\\\"\", \"output\": \"6\", \"testtype\": \"functional\"}, {\"input\": \"\\\"zzz\\\"\\n\\\"z\\\"\", \"output\": \"6\", \"testtype\": \"functional\"}]"}
{"question_id": "3360", "question_title": "minimum-deletions-to-make-string-k-special", "question_content": "You are given a string word and an integer k.\nWe consider word to be k-special if |freq(word[i]) - freq(word[j])| <= k for all indices i and j in the string.\nHere, freq(x) denotes the frequency of the character x in word, and |y| denotes the absolute value of y.\nReturn the minimum number of characters you need to delete to make word k-special.\n \nExample 1:\n\nInput: word = \"aabcaba\", k = 0\nOutput: 3\nExplanation: We can make word 0-special by deleting 2 occurrences of \"a\" and 1 occurrence of \"c\". Therefore, word becomes equal to \"baba\" where freq('a') == freq('b') == 2.\n\nExample 2:\n\nInput: word = \"dabdcbdcdcd\", k = 2\nOutput: 2\nExplanation: We can make word 2-special by deleting 1 occurrence of \"a\" and 1 occurrence of \"d\". Therefore, word becomes equal to \"bdcbdcdcd\" where freq('b') == 2, freq('c') == 3, and freq('d') == 4.\n\nExample 3:\n\nInput: word = \"aaabaaa\", k = 2\nOutput: 1\nExplanation: We can make word 2-special by deleting 1 occurrence of \"b\". Therefore, word becomes equal to \"aaaaaa\" where each letter's frequency is now uniformly 6.\n\n \nConstraints:\n\n1 <= word.length <= 10^5\n0 <= k <= 10^5\nword consists only of lowercase English letters.", "difficulty": "medium", "starter_code": "class Solution:\n    def minimumDeletions(self, word: str, k: int) -> int:\n        ", "public_test_cases": "[{\"input\": \"\\\"aabcaba\\\"\\n0\", \"output\": \"3\", \"testtype\": \"functional\"}, {\"input\": \"\\\"dabdcbdcdcd\\\"\\n2\", \"output\": \"2\", \"testtype\": \"functional\"}, {\"input\": \"\\\"aaabaaa\\\"\\n2\", \"output\": \"1\", \"testtype\": \"functional\"}]"}
{"question_id": "3327", "question_title": "minimum-moves-to-pick-k-ones", "question_content": "You are given a binary array nums of length n, a positive integer k and a non-negative integer maxChanges.\nAlice plays a game, where the goal is for Alice to pick up k ones from nums using the minimum number of moves. When the game starts, Alice picks up any index aliceIndex in the range [0, n - 1] and stands there. If nums[aliceIndex] == 1 , Alice picks up the one and nums[aliceIndex] becomes 0(this does not count as a move). After this, Alice can make any number of moves (including zero) where in each move Alice must perform exactly one of the following actions:\n\nSelect any index j != aliceIndex such that nums[j] == 0 and set nums[j] = 1. This action can be performed at most maxChanges times.\nSelect any two adjacent indices x and y (|x - y| == 1) such that nums[x] == 1, nums[y] == 0, then swap their values (set nums[y] = 1 and nums[x] = 0). If y == aliceIndex, Alice picks up the one after this move and nums[y] becomes 0.\n\nReturn the minimum number of moves required by Alice to pick exactly k ones.\n \nExample 1:\n\nInput: nums = [1,1,0,0,0,1,1,0,0,1], k = 3, maxChanges = 1\nOutput: 3\nExplanation: Alice can pick up 3 ones in 3 moves, if Alice performs the following actions in each move when standing at aliceIndex == 1:\n\n At the start of the game Alice picks up the one and nums[1] becomes 0. nums becomes [1,1,1,0,0,1,1,0,0,1].\nSelect j == 2 and perform an action of the first type. nums becomes [1,0,1,0,0,1,1,0,0,1]\nSelect x == 2 and y == 1, and perform an action of the second type. nums becomes [1,1,0,0,0,1,1,0,0,1]. As y == aliceIndex, Alice picks up the one and nums becomes [1,0,0,0,0,1,1,0,0,1].\nSelect x == 0 and y == 1, and perform an action of the second type. nums becomes [0,1,0,0,0,1,1,0,0,1]. As y == aliceIndex, Alice picks up the one and nums becomes [0,0,0,0,0,1,1,0,0,1].\n\nNote that it may be possible for Alice to pick up 3 ones using some other sequence of 3 moves.\n\nExample 2:\n\nInput: nums = [0,0,0,0], k = 2, maxChanges = 3\nOutput: 4\nExplanation: Alice can pick up 2 ones in 4 moves, if Alice performs the following actions in each move when standing at aliceIndex == 0:\n\nSelect j == 1 and perform an action of the first type. nums becomes [0,1,0,0].\nSelect x == 1 and y == 0, and perform an action of the second type. nums becomes [1,0,0,0]. As y == aliceIndex, Alice picks up the one and nums becomes [0,0,0,0].\nSelect j == 1 again and perform an action of the first type. nums becomes [0,1,0,0].\nSelect x == 1 and y == 0 again, and perform an action of the second type. nums becomes [1,0,0,0]. As y == aliceIndex, Alice picks up the one and nums becomes [0,0,0,0].\n\n\n \nConstraints:\n\n2 <= n <= 10^5\n0 <= nums[i] <= 1\n1 <= k <= 10^5\n0 <= maxChanges <= 10^5\nmaxChanges + sum(nums) >= k", "difficulty": "hard", "starter_code": "class Solution:\n    def minimumMoves(self, nums: List[int], k: int, maxChanges: int) -> int:\n        ", "public_test_cases": "[{\"input\": \"[1, 1, 0, 0, 0, 1, 1, 0, 0, 1]\\n3\\n1\", \"output\": \"3\", \"testtype\": \"functional\"}, {\"input\": \"[0, 0, 0, 0]\\n2\\n3\", \"output\": \"4\", \"testtype\": \"functional\"}]"}
{"question_id": "3349", "question_title": "maximum-length-substring-with-two-occurrences", "question_content": "Given a string s, return the maximum length of a substring such that it contains at most two occurrences of each character.\n \nExample 1:\n\nInput: s = \"bcbbbcba\"\nOutput: 4\nExplanation:\nThe following substring has a length of 4 and contains at most two occurrences of each character: \"bcbbbcba\".\nExample 2:\n\nInput: s = \"aaaa\"\nOutput: 2\nExplanation:\nThe following substring has a length of 2 and contains at most two occurrences of each character: \"aaaa\".\n \nConstraints:\n\n2 <= s.length <= 100\ns consists only of lowercase English letters.", "difficulty": "easy", "starter_code": "class Solution:\n    def maximumLengthSubstring(self, s: str) -> int:\n        ", "public_test_cases": "[{\"input\": \"\\\"bcbbbcba\\\"\", \"output\": \"4\", \"testtype\": \"functional\"}, {\"input\": \"\\\"aaaa\\\"\", \"output\": \"2\", \"testtype\": \"functional\"}]"}
{"question_id": "3328", "question_title": "apply-operations-to-make-sum-of-array-greater-than-or-equal-to-k", "question_content": "You are given a positive integer k. Initially, you have an array nums = [1].\nYou can perform any of the following operations on the array any number of times (possibly zero):\n\nChoose any element in the array and increase its value by 1.\nDuplicate any element in the array and add it to the end of the array.\n\nReturn the minimum number of operations required to make the sum of elements of the final array greater than or equal to k.\n \nExample 1:\n\nInput: k = 11\nOutput: 5\nExplanation:\nWe can do the following operations on the array nums = [1]:\n\nIncrease the element by 1 three times. The resulting array is nums = [4].\nDuplicate the element two times. The resulting array is nums = [4,4,4].\n\nThe sum of the final array is 4 + 4 + 4 = 12 which is greater than or equal to k = 11.\nThe total number of operations performed is 3 + 2 = 5.\n\nExample 2:\n\nInput: k = 1\nOutput: 0\nExplanation:\nThe sum of the original array is already greater than or equal to 1, so no operations are needed.\n\n \nConstraints:\n\n1 <= k <= 10^5", "difficulty": "medium", "starter_code": "class Solution:\n    def minOperations(self, k: int) -> int:\n        ", "public_test_cases": "[{\"input\": \"11\", \"output\": \"5\", \"testtype\": \"functional\"}, {\"input\": \"1\", \"output\": \"0\", \"testtype\": \"functional\"}]"}
{"question_id": "3363", "question_title": "most-frequent-ids", "question_content": "The problem involves tracking the frequency of IDs in a collection that changes over time. You have two integer arrays, nums and freq, of equal length n. Each element in nums represents an ID, and the corresponding element in freq indicates how many times that ID should be added to or removed from the collection at each step.\n\nAddition of IDs: If freq[i] is positive, it means freq[i] IDs with the value nums[i] are added to the collection at step i.\nRemoval of IDs: If freq[i] is negative, it means -freq[i] IDs with the value nums[i] are removed from the collection at step i.\n\nReturn an array ans of length n, where ans[i] represents the count of the most frequent ID in the collection after the i^th step. If the collection is empty at any step, ans[i] should be 0 for that step.\n \nExample 1:\n\nInput: nums = [2,3,2,1], freq = [3,2,-3,1]\nOutput: [3,3,2,2]\nExplanation:\nAfter step 0, we have 3 IDs with the value of 2. So ans[0] = 3.\nAfter step 1, we have 3 IDs with the value of 2 and 2 IDs with the value of 3. So ans[1] = 3.\nAfter step 2, we have 2 IDs with the value of 3. So ans[2] = 2.\nAfter step 3, we have 2 IDs with the value of 3 and 1 ID with the value of 1. So ans[3] = 2.\n\nExample 2:\n\nInput: nums = [5,5,3], freq = [2,-2,1]\nOutput: [2,0,1]\nExplanation:\nAfter step 0, we have 2 IDs with the value of 5. So ans[0] = 2.\nAfter step 1, there are no IDs. So ans[1] = 0.\nAfter step 2, we have 1 ID with the value of 3. So ans[2] = 1.\n\n \nConstraints:\n\n1 <= nums.length == freq.length <= 10^5\n1 <= nums[i] <= 10^5\n-10^5 <= freq[i] <= 10^5\nfreq[i] != 0\nThe input is generated such that the occurrences of an ID will not be negative in any step.", "difficulty": "medium", "starter_code": "class Solution:\n    def mostFrequentIDs(self, nums: List[int], freq: List[int]) -> List[int]:\n        ", "public_test_cases": "[{\"input\": \"[2, 3, 2, 1]\\n[3, 2, -3, 1]\", \"output\": \"[3, 3, 2, 2]\", \"testtype\": \"functional\"}, {\"input\": \"[5, 5, 3]\\n[2, -2, 1]\", \"output\": \"[2, 0, 1]\", \"testtype\": \"functional\"}]"}
{"question_id": "3376", "question_title": "longest-common-suffix-queries", "question_content": "You are given two arrays of strings wordsContainer and wordsQuery.\nFor each wordsQuery[i], you need to find a string from wordsContainer that has the longest common suffix with wordsQuery[i]. If there are two or more strings in wordsContainer that share the longest common suffix, find the string that is the smallest in length. If there are two or more such strings that have the same smallest length, find the one that occurred earlier in wordsContainer.\nReturn an array of integers ans, where ans[i] is the index of the string in wordsContainer that has the longest common suffix with wordsQuery[i].\n \nExample 1:\n\nInput: wordsContainer = [\"abcd\",\"bcd\",\"xbcd\"], wordsQuery = [\"cd\",\"bcd\",\"xyz\"]\nOutput: [1,1,1]\nExplanation:\nLet's look at each wordsQuery[i] separately:\n\nFor wordsQuery[0] = \"cd\", strings from wordsContainer that share the longest common suffix \"cd\" are at indices 0, 1, and 2. Among these, the answer is the string at index 1 because it has the shortest length of 3.\nFor wordsQuery[1] = \"bcd\", strings from wordsContainer that share the longest common suffix \"bcd\" are at indices 0, 1, and 2. Among these, the answer is the string at index 1 because it has the shortest length of 3.\nFor wordsQuery[2] = \"xyz\", there is no string from wordsContainer that shares a common suffix. Hence the longest common suffix is \"\", that is shared with strings at index 0, 1, and 2. Among these, the answer is the string at index 1 because it has the shortest length of 3.\n\n\nExample 2:\n\nInput: wordsContainer = [\"abcdefgh\",\"poiuygh\",\"ghghgh\"], wordsQuery = [\"gh\",\"acbfgh\",\"acbfegh\"]\nOutput: [2,0,2]\nExplanation:\nLet's look at each wordsQuery[i] separately:\n\nFor wordsQuery[0] = \"gh\", strings from wordsContainer that share the longest common suffix \"gh\" are at indices 0, 1, and 2. Among these, the answer is the string at index 2 because it has the shortest length of 6.\nFor wordsQuery[1] = \"acbfgh\", only the string at index 0 shares the longest common suffix \"fgh\". Hence it is the answer, even though the string at index 2 is shorter.\nFor wordsQuery[2] = \"acbfegh\", strings from wordsContainer that share the longest common suffix \"gh\" are at indices 0, 1, and 2. Among these, the answer is the string at index 2 because it has the shortest length of 6.\n\n\n \nConstraints:\n\n1 <= wordsContainer.length, wordsQuery.length <= 10^4\n1 <= wordsContainer[i].length <= 5 * 10^3\n1 <= wordsQuery[i].length <= 5 * 10^3\nwordsContainer[i] consists only of lowercase English letters.\nwordsQuery[i] consists only of lowercase English letters.\nSum of wordsContainer[i].length is at most 5 * 10^5.\nSum of wordsQuery[i].length is at most 5 * 10^5.", "difficulty": "hard", "starter_code": "class Solution:\n    def stringIndices(self, wordsContainer: List[str], wordsQuery: List[str]) -> List[int]:\n        ", "public_test_cases": "[{\"input\": \"[\\\"abcd\\\", \\\"bcd\\\", \\\"xbcd\\\"]\\n[\\\"cd\\\", \\\"bcd\\\", \\\"xyz\\\"]\", \"output\": \"[1, 1, 1]\", \"testtype\": \"functional\"}, {\"input\": \"[\\\"abcdefgh\\\", \\\"poiuygh\\\", \\\"ghghgh\\\"]\\n[\\\"gh\\\", \\\"acbfgh\\\", \\\"acbfegh\\\"]\", \"output\": \"[2, 0, 2]\", \"testtype\": \"functional\"}]"}
{"question_id": "3371", "question_title": "harshad-number", "question_content": "An integer divisible by the sum of its digits is said to be a Harshad number. You are given an integer x. Return the sum of the digits of x if x is a Harshad number, otherwise, return -1.\n \nExample 1:\n\nInput: x = 18\nOutput: 9\nExplanation:\nThe sum of digits of x is 9. 18 is divisible by 9. So 18 is a Harshad number and the answer is 9.\n\nExample 2:\n\nInput: x = 23\nOutput: -1\nExplanation:\nThe sum of digits of x is 5. 23 is not divisible by 5. So 23 is not a Harshad number and the answer is -1.\n\n \nConstraints:\n\n1 <= x <= 100", "difficulty": "easy", "starter_code": "class Solution:\n    def sumOfTheDigitsOfHarshadNumber(self, x: int) -> int:\n        ", "public_test_cases": "[{\"input\": \"18\", \"output\": \"9\", \"testtype\": \"functional\"}, {\"input\": \"23\", \"output\": \"-1\", \"testtype\": \"functional\"}]"}
{"question_id": "3374", "question_title": "count-alternating-subarrays", "question_content": "You are given a binary array nums.\nWe call a subarray alternating if no two adjacent elements in the subarray have the same value.\nReturn the number of alternating subarrays in nums.\n \nExample 1:\n\nInput: nums = [0,1,1,1]\nOutput: 5\nExplanation:\nThe following subarrays are alternating: [0], [1], [1], [1], and [0,1].\n\nExample 2:\n\nInput: nums = [1,0,1,0]\nOutput: 10\nExplanation:\nEvery subarray of the array is alternating. There are 10 possible subarrays that we can choose.\n\n \nConstraints:\n\n1 <= nums.length <= 10^5\nnums[i] is either 0 or 1.", "difficulty": "medium", "starter_code": "class Solution:\n    def countAlternatingSubarrays(self, nums: List[int]) -> int:\n        ", "public_test_cases": "[{\"input\": \"[0, 1, 1, 1]\", \"output\": \"5\", \"testtype\": \"functional\"}, {\"input\": \"[1, 0, 1, 0]\", \"output\": \"10\", \"testtype\": \"functional\"}]"}
{"question_id": "3344", "question_title": "minimize-manhattan-distances", "question_content": "You are given a array points representing integer coordinates of some points on a 2D plane, where points[i] = [x_i, y_i].\nThe distance between two points is defined as their Manhattan distance.\nReturn the minimum possible value for maximum distance between any two points by removing exactly one point.\n \nExample 1:\n\nInput: points = [[3,10],[5,15],[10,2],[4,4]]\nOutput: 12\nExplanation:\nThe maximum distance after removing each point is the following:\n\nAfter removing the 0^th point the maximum distance is between points (5, 15) and (10, 2), which is |5 - 10| + |15 - 2| = 18.\nAfter removing the 1^st point the maximum distance is between points (3, 10) and (10, 2), which is |3 - 10| + |10 - 2| = 15.\nAfter removing the 2^nd point the maximum distance is between points (5, 15) and (4, 4), which is |5 - 4| + |15 - 4| = 12.\nAfter removing the 3^rd point the maximum distance is between points (5, 15) and (10, 2), which is |5 - 10| + |15 - 2| = 18.\n\n12 is the minimum possible maximum distance between any two points after removing exactly one point.\n\nExample 2:\n\nInput: points = [[1,1],[1,1],[1,1]]\nOutput: 0\nExplanation:\nRemoving any of the points results in the maximum distance between any two points of 0.\n\n \nConstraints:\n\n3 <= points.length <= 10^5\npoints[i].length == 2\n1 <= points[i][0], points[i][1] <= 10^8", "difficulty": "hard", "starter_code": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        ", "public_test_cases": "[{\"input\": \"[[3, 10], [5, 15], [10, 2], [4, 4]]\", \"output\": \"12\", \"testtype\": \"functional\"}, {\"input\": \"[[1, 1], [1, 1], [1, 1]]\", \"output\": \"0\", \"testtype\": \"functional\"}]"}
{"question_id": "3372", "question_title": "longest-strictly-increasing-or-strictly-decreasing-subarray", "question_content": "You are given an array of integers nums. Return the length of the longest subarray of nums which is either strictly increasing or strictly decreasing.\n \nExample 1:\n\nInput: nums = [1,4,3,3,2]\nOutput: 2\nExplanation:\nThe strictly increasing subarrays of nums are [1], [2], [3], [3], [4], and [1,4].\nThe strictly decreasing subarrays of nums are [1], [2], [3], [3], [4], [3,2], and [4,3].\nHence, we return 2.\n\nExample 2:\n\nInput: nums = [3,3,3,3]\nOutput: 1\nExplanation:\nThe strictly increasing subarrays of nums are [3], [3], [3], and [3].\nThe strictly decreasing subarrays of nums are [3], [3], [3], and [3].\nHence, we return 1.\n\nExample 3:\n\nInput: nums = [3,2,1]\nOutput: 3\nExplanation:\nThe strictly increasing subarrays of nums are [3], [2], and [1].\nThe strictly decreasing subarrays of nums are [3], [2], [1], [3,2], [2,1], and [3,2,1].\nHence, we return 3.\n\n \nConstraints:\n\n1 <= nums.length <= 50\n1 <= nums[i] <= 50", "difficulty": "easy", "starter_code": "class Solution:\n    def longestMonotonicSubarray(self, nums: List[int]) -> int:\n        ", "public_test_cases": "[{\"input\": \"[1, 4, 3, 3, 2]\", \"output\": \"2\", \"testtype\": \"functional\"}, {\"input\": \"[3, 3, 3, 3]\", \"output\": \"1\", \"testtype\": \"functional\"}, {\"input\": \"[3, 2, 1]\", \"output\": \"3\", \"testtype\": \"functional\"}]"}
{"question_id": "3346", "question_title": "lexicographically-smallest-string-after-operations-with-constraint", "question_content": "You are given a string s and an integer k.\nDefine a function distance(s_1, s_2) between two strings s_1 and s_2 of the same length n as:\n\nThe sum of the minimum distance between s_1[i] and s_2[i] when the characters from 'a' to 'z' are placed in a cyclic order, for all i in the range [0, n - 1].\n\nFor example, distance(\"ab\", \"cd\") == 4, and distance(\"a\", \"z\") == 1.\nYou can change any letter of s to any other lowercase English letter, any number of times.\nReturn a string denoting the lexicographically smallest string t you can get after some changes, such that distance(s, t) <= k.\n \nExample 1:\n\nInput: s = \"zbbz\", k = 3\nOutput: \"aaaz\"\nExplanation:\nChange s to \"aaaz\". The distance between \"zbbz\" and \"aaaz\" is equal to k = 3.\n\nExample 2:\n\nInput: s = \"xaxcd\", k = 4\nOutput: \"aawcd\"\nExplanation:\nThe distance between \"xaxcd\" and \"aawcd\" is equal to k = 4.\n\nExample 3:\n\nInput: s = \"lol\", k = 0\nOutput: \"lol\"\nExplanation:\nIt's impossible to change any character as k = 0.\n\n \nConstraints:\n\n1 <= s.length <= 100\n0 <= k <= 2000\ns consists only of lowercase English letters.", "difficulty": "medium", "starter_code": "class Solution:\n    def getSmallestString(self, s: str, k: int) -> str:\n        ", "public_test_cases": "[{\"input\": \"\\\"zbbz\\\"\\n3\", \"output\": \"\\\"aaaz\\\"\", \"testtype\": \"functional\"}, {\"input\": \"\\\"xaxcd\\\"\\n4\", \"output\": \"\\\"aawcd\\\"\", \"testtype\": \"functional\"}, {\"input\": \"\\\"lol\\\"\\n0\", \"output\": \"\\\"lol\\\"\", \"testtype\": \"functional\"}]"}
{"question_id": "3387", "question_title": "minimum-operations-to-make-median-of-array-equal-to-k", "question_content": "You are given an integer array nums and a non-negative integer k. In one operation, you can increase or decrease any element by 1.\nReturn the minimum number of operations needed to make the median of nums equal to k.\nThe median of an array is defined as the middle element of the array when it is sorted in non-decreasing order. If there are two choices for a median, the larger of the two values is taken.\n \nExample 1:\n\nInput: nums = [2,5,6,8,5], k = 4\nOutput: 2\nExplanation:\nWe can subtract one from nums[1] and nums[4] to obtain [2, 4, 6, 8, 4]. The median of the resulting array is equal to k.\n\nExample 2:\n\nInput: nums = [2,5,6,8,5], k = 7\nOutput: 3\nExplanation:\nWe can add one to nums[1] twice and add one to nums[2] once to obtain [2, 7, 7, 8, 5].\n\nExample 3:\n\nInput: nums = [1,2,3,4,5,6], k = 4\nOutput: 0\nExplanation:\nThe median of the array is already equal to k.\n\n \nConstraints:\n\n1 <= nums.length <= 2 * 10^5\n1 <= nums[i] <= 10^9\n1 <= k <= 10^9", "difficulty": "medium", "starter_code": "class Solution:\n    def minOperationsToMakeMedianK(self, nums: List[int], k: int) -> int:\n        ", "public_test_cases": "[{\"input\": \"[2, 5, 6, 8, 5]\\n4\", \"output\": \"2\", \"testtype\": \"functional\"}, {\"input\": \"[2, 5, 6, 8, 5]\\n7\", \"output\": \"3\", \"testtype\": \"functional\"}, {\"input\": \"[1, 2, 3, 4, 5, 6]\\n4\", \"output\": \"0\", \"testtype\": \"functional\"}]"}
{"question_id": "3361", "question_title": "latest-time-you-can-obtain-after-replacing-characters", "question_content": "You are given a string s representing a 12-hour format time where some of the digits (possibly none) are replaced with a \"?\".\n12-hour times are formatted as \"HH:MM\", where HH is between 00 and 11, and MM is between 00 and 59. The earliest 12-hour time is 00:00, and the latest is 11:59.\nYou have to replace all the \"?\" characters in s with digits such that the time we obtain by the resulting string is a valid 12-hour format time and is the latest possible.\nReturn the resulting string.\n \nExample 1:\n\nInput: s = \"1?:?4\"\nOutput: \"11:54\"\nExplanation: The latest 12-hour format time we can achieve by replacing \"?\" characters is \"11:54\".\n\nExample 2:\n\nInput: s = \"0?:5?\"\nOutput: \"09:59\"\nExplanation: The latest 12-hour format time we can achieve by replacing \"?\" characters is \"09:59\".\n\n \nConstraints:\n\ns.length == 5\ns[2] is equal to the character \":\".\nAll characters except s[2] are digits or \"?\" characters.\nThe input is generated such that there is at least one time between \"00:00\" and \"11:59\" that you can obtain after replacing the \"?\" characters.", "difficulty": "easy", "starter_code": "class Solution:\n    def findLatestTime(self, s: str) -> str:\n        ", "public_test_cases": "[{\"input\": \"\\\"1?:?4\\\"\", \"output\": \"\\\"11:54\\\"\", \"testtype\": \"functional\"}, {\"input\": \"\\\"0?:5?\\\"\", \"output\": \"\\\"09:59\\\"\", \"testtype\": \"functional\"}]"}
{"question_id": "3373", "question_title": "maximum-prime-difference", "question_content": "You are given an integer array nums.\nReturn an integer that is the maximum distance between the indices of two (not necessarily different) prime numbers in nums.\n \nExample 1:\n\nInput: nums = [4,2,9,5,3]\nOutput: 3\nExplanation: nums[1], nums[3], and nums[4] are prime. So the answer is |4 - 1| = 3.\n\nExample 2:\n\nInput: nums = [4,8,2,8]\nOutput: 0\nExplanation: nums[2] is prime. Because there is just one prime number, the answer is |2 - 2| = 0.\n\n \nConstraints:\n\n1 <= nums.length <= 3 * 10^5\n1 <= nums[i] <= 100\nThe input is generated such that the number of prime numbers in the nums is at least one.", "difficulty": "medium", "starter_code": "class Solution:\n    def maximumPrimeDifference(self, nums: List[int]) -> int:\n        ", "public_test_cases": "[{\"input\": \"[4, 2, 9, 5, 3]\", \"output\": \"3\", \"testtype\": \"functional\"}, {\"input\": \"[4, 8, 2, 8]\", \"output\": \"0\", \"testtype\": \"functional\"}]"}
{"question_id": "3375", "question_title": "kth-smallest-amount-with-single-denomination-combination", "question_content": "You are given an integer array coins representing coins of different denominations and an integer k.\nYou have an infinite number of coins of each denomination. However, you are not allowed to combine coins of different denominations.\nReturn the k^th smallest amount that can be made using these coins.\n \nExample 1:\n\nInput: coins = [3,6,9], k = 3\nOutput:  9\nExplanation: The given coins can make the following amounts:\nCoin 3 produces multiples of 3: 3, 6, 9, 12, 15, etc.\nCoin 6 produces multiples of 6: 6, 12, 18, 24, etc.\nCoin 9 produces multiples of 9: 9, 18, 27, 36, etc.\nAll of the coins combined produce: 3, 6, 9, 12, 15, etc.\n\nExample 2:\n\nInput: coins = [5,2], k = 7\nOutput: 12 \nExplanation: The given coins can make the following amounts:\nCoin 5 produces multiples of 5: 5, 10, 15, 20, etc.\nCoin 2 produces multiples of 2: 2, 4, 6, 8, 10, 12, etc.\nAll of the coins combined produce: 2, 4, 5, 6, 8, 10, 12, 14, 15, etc.\n\n \nConstraints:\n\n1 <= coins.length <= 15\n1 <= coins[i] <= 25\n1 <= k <= 2 * 10^9\ncoins contains pairwise distinct integers.", "difficulty": "hard", "starter_code": "class Solution:\n    def findKthSmallest(self, coins: List[int], k: int) -> int:\n        ", "public_test_cases": "[{\"input\": \"[3, 6, 9]\\n3\", \"output\": \"9\", \"testtype\": \"functional\"}, {\"input\": \"[5, 2]\\n7\", \"output\": \"12\", \"testtype\": \"functional\"}]"}
{"question_id": "3364", "question_title": "minimum-sum-of-values-by-dividing-array", "question_content": "You are given two arrays nums and andValues of length n and m respectively.\nThe value of an array is equal to the last element of that array.\nYou have to divide nums into m disjoint contiguous subarrays such that for the i^th subarray [l_i, r_i], the bitwise AND of the subarray elements is equal to andValues[i], in other words, nums[l_i] & nums[l_i + 1] & ... & nums[r_i] == andValues[i] for all 1 <= i <= m, where & represents the bitwise AND operator.\nReturn the minimum possible sum of the values of the m subarrays nums is divided into. If it is not possible to divide nums into m subarrays satisfying these conditions, return -1.\n \nExample 1:\n\nInput: nums = [1,4,3,3,2], andValues = [0,3,3,2]\nOutput: 12\nExplanation:\nThe only possible way to divide nums is:\n\n[1,4] as 1 & 4 == 0.\n[3] as the bitwise AND of a single element subarray is that element itself.\n[3] as the bitwise AND of a single element subarray is that element itself.\n[2] as the bitwise AND of a single element subarray is that element itself.\n\nThe sum of the values for these subarrays is 4 + 3 + 3 + 2 = 12.\n\nExample 2:\n\nInput: nums = [2,3,5,7,7,7,5], andValues = [0,7,5]\nOutput: 17\nExplanation:\nThere are three ways to divide nums:\n\n[[2,3,5],[7,7,7],[5]] with the sum of the values 5 + 7 + 5 == 17.\n[[2,3,5,7],[7,7],[5]] with the sum of the values 7 + 7 + 5 == 19.\n[[2,3,5,7,7],[7],[5]] with the sum of the values 7 + 7 + 5 == 19.\n\nThe minimum possible sum of the values is 17.\n\nExample 3:\n\nInput: nums = [1,2,3,4], andValues = [2]\nOutput: -1\nExplanation:\nThe bitwise AND of the entire array nums is 0. As there is no possible way to divide nums into a single subarray to have the bitwise AND of elements 2, return -1.\n\n \nConstraints:\n\n1 <= n == nums.length <= 10^4\n1 <= m == andValues.length <= min(n, 10)\n1 <= nums[i] < 10^5\n0 <= andValues[j] < 10^5", "difficulty": "hard", "starter_code": "class Solution:\n    def minimumValueSum(self, nums: List[int], andValues: List[int]) -> int:\n        ", "public_test_cases": "[{\"input\": \"[1, 4, 3, 3, 2]\\n[0, 3, 3, 2]\", \"output\": \"12\", \"testtype\": \"functional\"}, {\"input\": \"[2, 3, 5, 7, 7, 7, 5]\\n[0, 7, 5]\", \"output\": \"17\", \"testtype\": \"functional\"}, {\"input\": \"[1, 2, 3, 4]\\n[2]\", \"output\": \"-1\", \"testtype\": \"functional\"}]"}
{"question_id": "3367", "question_title": "find-the-sum-of-encrypted-integers", "question_content": "You are given an integer array nums containing positive integers. We define a function encrypt such that encrypt(x) replaces every digit in x with the largest digit in x. For example, encrypt(523) = 555 and encrypt(213) = 333.\nReturn the sum of encrypted elements.\n \nExample 1:\n\nInput: nums = [1,2,3]\nOutput: 6\nExplanation: The encrypted elements are [1,2,3]. The sum of encrypted elements is 1 + 2 + 3 == 6.\n\nExample 2:\n\nInput: nums = [10,21,31]\nOutput: 66\nExplanation: The encrypted elements are [11,22,33]. The sum of encrypted elements is 11 + 22 + 33 == 66.\n\n \nConstraints:\n\n1 <= nums.length <= 50\n1 <= nums[i] <= 1000", "difficulty": "easy", "starter_code": "class Solution:\n    def sumOfEncryptedInt(self, nums: List[int]) -> int:\n        ", "public_test_cases": "[{\"input\": \"[1, 2, 3]\", \"output\": \"6\", \"testtype\": \"functional\"}, {\"input\": \"[10, 21, 31]\", \"output\": \"66\", \"testtype\": \"functional\"}]"}
{"question_id": "3306", "question_title": "mark-elements-on-array-by-performing-queries", "question_content": "You are given a 0-indexed array nums of size n consisting of positive integers.\nYou are also given a 2D array queries of size m where queries[i] = [index_i, k_i].\nInitially all elements of the array are unmarked.\nYou need to apply m queries on the array in order, where on the i^th query you do the following:\n\nMark the element at index index_i if it is not already marked.\nThen mark k_i unmarked elements in the array with the smallest values. If multiple such elements exist, mark the ones with the smallest indices. And if less than k_i unmarked elements exist, then mark all of them.\n\nReturn an array answer of size m where answer[i] is the sum of unmarked elements in the array after the i^th query.\n \nExample 1:\n\nInput: nums = [1,2,2,1,2,3,1], queries = [[1,2],[3,3],[4,2]]\nOutput: [8,3,0]\nExplanation:\nWe do the following queries on the array:\n\nMark the element at index 1, and 2 of the smallest unmarked elements with the smallest indices if they exist, the marked elements now are nums = [1,2,2,1,2,3,1]. The sum of unmarked elements is 2 + 2 + 3 + 1 = 8.\nMark the element at index 3, since it is already marked we skip it. Then we mark 3 of the smallest unmarked elements with the smallest indices, the marked elements now are nums = [1,2,2,1,2,3,1]. The sum of unmarked elements is 3.\nMark the element at index 4, since it is already marked we skip it. Then we mark 2 of the smallest unmarked elements with the smallest indices if they exist, the marked elements now are nums = [1,2,2,1,2,3,1]. The sum of unmarked elements is 0.\n\n\nExample 2:\n\nInput: nums = [1,4,2,3], queries = [[0,1]]\nOutput: [7]\nExplanation:  We do one query which is mark the element at index 0 and mark the smallest element among unmarked elements. The marked elements will be nums = [1,4,2,3], and the sum of unmarked elements is 4 + 3 = 7.\n\n \nConstraints:\n\nn == nums.length\nm == queries.length\n1 <= m <= n <= 10^5\n1 <= nums[i] <= 10^5\nqueries[i].length == 2\n0 <= index_i, k_i <= n - 1", "difficulty": "medium", "starter_code": "class Solution:\n    def unmarkedSumArray(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        ", "public_test_cases": "[{\"input\": \"[1, 2, 2, 1, 2, 3, 1]\\n[[1, 2], [3, 3], [4, 2]]\", \"output\": \"[8, 3, 0]\", \"testtype\": \"functional\"}, {\"input\": \"[1, 4, 2, 3]\\n[[0, 1]]\", \"output\": \"[7]\", \"testtype\": \"functional\"}]"}
{"question_id": "3354", "question_title": "replace-question-marks-in-string-to-minimize-its-value", "question_content": "You are given a string s. s[i] is either a lowercase English letter or '?'.\nFor a string t having length m containing only lowercase English letters, we define the function cost(i) for an index i as the number of characters equal to t[i] that appeared before it, i.e. in the range [0, i - 1].\nThe value of t is the sum of cost(i) for all indices i.\nFor example, for the string t = \"aab\":\n\ncost(0) = 0\ncost(1) = 1\ncost(2) = 0\nHence, the value of \"aab\" is 0 + 1 + 0 = 1.\n\nYour task is to replace all occurrences of '?' in s with any lowercase English letter so that the value of s is minimized.\nReturn a string denoting the modified string with replaced occurrences of '?'. If there are multiple strings resulting in the minimum value, return the lexicographically smallest one.\n \nExample 1:\n\nInput:   s = \"???\" \nOutput:   \"abc\" \nExplanation:  In this example, we can replace the occurrences of '?' to make s equal to \"abc\".\nFor \"abc\", cost(0) = 0, cost(1) = 0, and cost(2) = 0.\nThe value of \"abc\" is 0.\nSome other modifications of s that have a value of 0 are \"cba\", \"abz\", and, \"hey\".\nAmong all of them, we choose the lexicographically smallest.\n\nExample 2:\n\nInput:  s = \"a?a?\"\nOutput:  \"abac\"\nExplanation:  In this example, the occurrences of '?' can be replaced to make s equal to \"abac\".\nFor \"abac\", cost(0) = 0, cost(1) = 0, cost(2) = 1, and cost(3) = 0.\nThe value of \"abac\" is 1.\n\n \nConstraints:\n\n1 <= s.length <= 10^5\ns[i] is either a lowercase English letter or '?'.", "difficulty": "medium", "starter_code": "class Solution:\n    def minimizeStringValue(self, s: str) -> str:\n        ", "public_test_cases": "[{\"input\": \"\\\"???\\\"\", \"output\": \"\\\"abc\\\"\", \"testtype\": \"functional\"}, {\"input\": \"\\\"a?a?\\\"\", \"output\": \"\\\"abac\\\"\", \"testtype\": \"functional\"}]"}
{"question_id": "3345", "question_title": "find-the-sum-of-the-power-of-all-subsequences", "question_content": "You are given an integer array nums of length n and a positive integer k.\nThe power of an array of integers is defined as the number of subsequences with their sum equal to k.\nReturn the sum of power of all subsequences of nums.\nSince the answer may be very large, return it modulo 10^9 + 7.\n \nExample 1:\n\nInput:   nums = [1,2,3], k = 3 \nOutput:   6 \nExplanation:\nThere are 5 subsequences of nums with non-zero power:\n\nThe subsequence [1,2,3] has 2 subsequences with sum == 3: [1,2,3] and [1,2,3].\nThe subsequence [1,2,3] has 1 subsequence with sum == 3: [1,2,3].\nThe subsequence [1,2,3] has 1 subsequence with sum == 3: [1,2,3].\nThe subsequence [1,2,3] has 1 subsequence with sum == 3: [1,2,3].\nThe subsequence [1,2,3] has 1 subsequence with sum == 3: [1,2,3].\n\nHence the answer is 2 + 1 + 1 + 1 + 1 = 6.\n\nExample 2:\n\nInput:   nums = [2,3,3], k = 5 \nOutput:   4 \nExplanation:\nThere are 3 subsequences of nums with non-zero power:\n\nThe subsequence [2,3,3] has 2 subsequences with sum == 5: [2,3,3] and [2,3,3].\nThe subsequence [2,3,3] has 1 subsequence with sum == 5: [2,3,3].\nThe subsequence [2,3,3] has 1 subsequence with sum == 5: [2,3,3].\n\nHence the answer is 2 + 1 + 1 = 4.\n\nExample 3:\n\nInput:   nums = [1,2,3], k = 7 \nOutput:   0 \nExplanation: There exists no subsequence with sum 7. Hence all subsequences of nums have power = 0.\n\n \nConstraints:\n\n1 <= n <= 100\n1 <= nums[i] <= 10^4\n1 <= k <= 100", "difficulty": "hard", "starter_code": "class Solution:\n    def sumOfPower(self, nums: List[int], k: int) -> int:\n        ", "public_test_cases": "[{\"input\": \"[1, 2, 3]\\n3\", \"output\": \"6\", \"testtype\": \"functional\"}, {\"input\": \"[2, 3, 3]\\n5\", \"output\": \"4\", \"testtype\": \"functional\"}, {\"input\": \"[1, 2, 3]\\n7\", \"output\": \"0\", \"testtype\": \"functional\"}]"}
{"question_id": "3381", "question_title": "shortest-subarray-with-or-at-least-k-i", "question_content": "You are given an array nums of non-negative integers and an integer k.\nAn array is called special if the bitwise OR of all of its elements is at least k.\nReturn the length of the shortest special non-empty subarray of nums, or return -1 if no special subarray exists.\n \nExample 1:\n\nInput: nums = [1,2,3], k = 2\nOutput: 1\nExplanation:\nThe subarray [3] has OR value of 3. Hence, we return 1.\n\nExample 2:\n\nInput: nums = [2,1,8], k = 10\nOutput: 3\nExplanation:\nThe subarray [2,1,8] has OR value of 11. Hence, we return 3.\n\nExample 3:\n\nInput: nums = [1,2], k = 0\nOutput: 1\nExplanation:\nThe subarray [1] has OR value of 1. Hence, we return 1.\n\n \nConstraints:\n\n1 <= nums.length <= 50\n0 <= nums[i] <= 50\n0 <= k < 64", "difficulty": "easy", "starter_code": "class Solution:\n    def minimumSubarrayLength(self, nums: List[int], k: int) -> int:\n        ", "public_test_cases": "[{\"input\": \"[1, 2, 3]\\n2\", \"output\": \"1\", \"testtype\": \"functional\"}, {\"input\": \"[2, 1, 8]\\n10\", \"output\": \"3\", \"testtype\": \"functional\"}, {\"input\": \"[1, 2]\\n0\", \"output\": \"1\", \"testtype\": \"functional\"}]"}
{"question_id": "3355", "question_title": "minimum-levels-to-gain-more-points", "question_content": "You are given a binary array possible of length n.\nAlice and Bob are playing a game that consists of n levels. Some of the levels in the game are impossible to clear while others can always be cleared. In particular, if possible[i] == 0, then the i^th level is impossible to clear for both the players. A player gains 1 point on clearing a level and loses 1 point if the player fails to clear it.\nAt the start of the game, Alice will play some levels in the given order starting from the 0^th level, after which Bob will play for the rest of the levels.\nAlice wants to know the minimum number of levels she should play to gain more points than Bob, if both players play optimally to maximize their points.\nReturn the minimum number of levels Alice should play to gain more points. If this is not possible, return -1.\nNote that each player must play at least 1 level.\n \nExample 1:\n\nInput: possible = [1,0,1,0]\nOutput: 1\nExplanation:\nLet's look at all the levels that Alice can play up to:\n\nIf Alice plays only level 0 and Bob plays the rest of the levels, Alice has 1 point, while Bob has -1 + 1 - 1 = -1 point.\nIf Alice plays till level 1 and Bob plays the rest of the levels, Alice has 1 - 1 = 0 points, while Bob has 1 - 1 = 0 points.\nIf Alice plays till level 2 and Bob plays the rest of the levels, Alice has 1 - 1 + 1 = 1 point, while Bob has -1 point.\n\nAlice must play a minimum of 1 level to gain more points.\n\nExample 2:\n\nInput: possible = [1,1,1,1,1]\nOutput: 3\nExplanation:\nLet's look at all the levels that Alice can play up to:\n\nIf Alice plays only level 0 and Bob plays the rest of the levels, Alice has 1 point, while Bob has 4 points.\nIf Alice plays till level 1 and Bob plays the rest of the levels, Alice has 2 points, while Bob has 3 points.\nIf Alice plays till level 2 and Bob plays the rest of the levels, Alice has 3 points, while Bob has 2 points.\nIf Alice plays till level 3 and Bob plays the rest of the levels, Alice has 4 points, while Bob has 1 point.\n\nAlice must play a minimum of 3 levels to gain more points.\n\nExample 3:\n\nInput: possible = [0,0]\nOutput: -1\nExplanation:\nThe only possible way is for both players to play 1 level each. Alice plays level 0 and loses 1 point. Bob plays level 1 and loses 1 point. As both players have equal points, Alice can't gain more points than Bob.\n\n \nConstraints:\n\n2 <= n == possible.length <= 10^5\npossible[i] is either 0 or 1.", "difficulty": "medium", "starter_code": "class Solution:\n    def minimumLevels(self, possible: List[int]) -> int:\n        ", "public_test_cases": "[{\"input\": \"[1, 0, 1, 0]\", \"output\": \"1\", \"testtype\": \"functional\"}, {\"input\": \"[1, 1, 1, 1, 1]\", \"output\": \"3\", \"testtype\": \"functional\"}, {\"input\": \"[0, 0]\", \"output\": \"-1\", \"testtype\": \"functional\"}]"}
{"question_id": "3316", "question_title": "find-the-sum-of-subsequence-powers", "question_content": "You are given an integer array nums of length n, and a positive integer k.\nThe power of a subsequence is defined as the minimum absolute difference between any two elements in the subsequence.\nReturn the sum of powers of all subsequences of nums which have length equal to k.\nSince the answer may be large, return it modulo 10^9 + 7.\n \nExample 1:\n\nInput: nums = [1,2,3,4], k = 3\nOutput: 4\nExplanation:\nThere are 4 subsequences in nums which have length 3: [1,2,3], [1,3,4], [1,2,4], and [2,3,4]. The sum of powers is |2 - 3| + |3 - 4| + |2 - 1| + |3 - 4| = 4.\n\nExample 2:\n\nInput: nums = [2,2], k = 2\nOutput: 0\nExplanation:\nThe only subsequence in nums which has length 2 is [2,2]. The sum of powers is |2 - 2| = 0.\n\nExample 3:\n\nInput: nums = [4,3,-1], k = 2\nOutput: 10\nExplanation:\nThere are 3 subsequences in nums which have length 2: [4,3], [4,-1], and [3,-1]. The sum of powers is |4 - 3| + |4 - (-1)| + |3 - (-1)| = 10.\n\n \nConstraints:\n\n2 <= n == nums.length <= 50\n-10^8 <= nums[i] <= 10^8 \n2 <= k <= n", "difficulty": "hard", "starter_code": "class Solution:\n    def sumOfPowers(self, nums: List[int], k: int) -> int:\n        ", "public_test_cases": "[{\"input\": \"[1, 2, 3, 4]\\n3\", \"output\": \"4\", \"testtype\": \"functional\"}, {\"input\": \"[2, 2]\\n2\", \"output\": \"0\", \"testtype\": \"functional\"}, {\"input\": \"[4, 3, -1]\\n2\", \"output\": \"10\", \"testtype\": \"functional\"}]"}
{"question_id": "3379", "question_title": "score-of-a-string", "question_content": "You are given a string s. The score of a string is defined as the sum of the absolute difference between the ASCII values of adjacent characters.\nReturn the score of s.\n \nExample 1:\n\nInput: s = \"hello\"\nOutput: 13\nExplanation:\nThe ASCII values of the characters in s are: 'h' = 104, 'e' = 101, 'l' = 108, 'o' = 111. So, the score of s would be |104 - 101| + |101 - 108| + |108 - 108| + |108 - 111| = 3 + 7 + 0 + 3 = 13.\n\nExample 2:\n\nInput: s = \"zaz\"\nOutput: 50\nExplanation:\nThe ASCII values of the characters in s are: 'z' = 122, 'a' = 97. So, the score of s would be |122 - 97| + |97 - 122| = 25 + 25 = 50.\n\n \nConstraints:\n\n2 <= s.length <= 100\ns consists only of lowercase English letters.", "difficulty": "easy", "starter_code": "class Solution:\n    def scoreOfString(self, s: str) -> int:\n        ", "public_test_cases": "[{\"input\": \"\\\"hello\\\"\", \"output\": \"13\", \"testtype\": \"functional\"}, {\"input\": \"\\\"zaz\\\"\", \"output\": \"50\", \"testtype\": \"functional\"}]"}
{"question_id": "3382", "question_title": "find-the-number-of-subarrays-where-boundary-elements-are-maximum", "question_content": "You are given an array of positive integers nums.\nReturn the number of subarrays of nums, where the first and the last elements of the subarray are equal to the largest element in the subarray.\n \nExample 1:\n\nInput: nums = [1,4,3,3,2]\nOutput: 6\nExplanation:\nThere are 6 subarrays which have the first and the last elements equal to the largest element of the subarray:\n\nsubarray [1,4,3,3,2], with its largest element 1. The first element is 1 and the last element is also 1.\nsubarray [1,4,3,3,2], with its largest element 4. The first element is 4 and the last element is also 4.\nsubarray [1,4,3,3,2], with its largest element 3. The first element is 3 and the last element is also 3.\nsubarray [1,4,3,3,2], with its largest element 3. The first element is 3 and the last element is also 3.\nsubarray [1,4,3,3,2], with its largest element 2. The first element is 2 and the last element is also 2.\nsubarray [1,4,3,3,2], with its largest element 3. The first element is 3 and the last element is also 3.\n\nHence, we return 6.\n\nExample 2:\n\nInput: nums = [3,3,3]\nOutput: 6\nExplanation:\nThere are 6 subarrays which have the first and the last elements equal to the largest element of the subarray:\n\nsubarray [3,3,3], with its largest element 3. The first element is 3 and the last element is also 3.\nsubarray [3,3,3], with its largest element 3. The first element is 3 and the last element is also 3.\nsubarray [3,3,3], with its largest element 3. The first element is 3 and the last element is also 3.\nsubarray [3,3,3], with its largest element 3. The first element is 3 and the last element is also 3.\nsubarray [3,3,3], with its largest element 3. The first element is 3 and the last element is also 3.\nsubarray [3,3,3], with its largest element 3. The first element is 3 and the last element is also 3.\n\nHence, we return 6.\n\nExample 3:\n\nInput: nums = [1]\nOutput: 1\nExplanation:\nThere is a single subarray of nums which is [1], with its largest element 1. The first element is 1 and the last element is also 1.\nHence, we return 1.\n\n \nConstraints:\n\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 10^9", "difficulty": "hard", "starter_code": "class Solution:\n    def numberOfSubarrays(self, nums: List[int]) -> int:\n        ", "public_test_cases": "[{\"input\": \"[1, 4, 3, 3, 2]\", \"output\": \"6\", \"testtype\": \"functional\"}, {\"input\": \"[3, 3, 3]\", \"output\": \"6\", \"testtype\": \"functional\"}, {\"input\": \"[1]\", \"output\": \"1\", \"testtype\": \"functional\"}]"}
{"question_id": "3408", "question_title": "count-the-number-of-special-characters-i", "question_content": "You are given a string word. A letter is called special if it appears both in lowercase and uppercase in word.\nReturn the number of special letters in word.\n \nExample 1:\n\nInput: word = \"aaAbcBC\"\nOutput: 3\nExplanation:\nThe special characters in word are 'a', 'b', and 'c'.\n\nExample 2:\n\nInput: word = \"abc\"\nOutput: 0\nExplanation:\nNo character in word appears in uppercase.\n\nExample 3:\n\nInput: word = \"abBCab\"\nOutput: 1\nExplanation:\nThe only special character in word is 'b'.\n\n \nConstraints:\n\n1 <= word.length <= 50\nword consists of only lowercase and uppercase English letters.", "difficulty": "easy", "starter_code": "class Solution:\n    def numberOfSpecialChars(self, word: str) -> int:\n        ", "public_test_cases": "[{\"input\": \"\\\"aaAbcBC\\\"\", \"output\": \"3\", \"testtype\": \"functional\"}, {\"input\": \"\\\"abc\\\"\", \"output\": \"0\", \"testtype\": \"functional\"}, {\"input\": \"\\\"abBCab\\\"\", \"output\": \"1\", \"testtype\": \"functional\"}]"}
{"question_id": "3397", "question_title": "find-the-integer-added-to-array-i", "question_content": "You are given two arrays of equal length, nums1 and nums2.\nEach element in nums1 has been increased (or decreased in the case of negative) by an integer, represented by the variable x.\nAs a result, nums1 becomes equal to nums2. Two arrays are considered equal when they contain the same integers with the same frequencies.\nReturn the integer x.\n \nExample 1:\n\nInput: nums1 = [2,6,4], nums2 = [9,7,5]\nOutput: 3\nExplanation:\nThe integer added to each element of nums1 is 3.\n\nExample 2:\n\nInput: nums1 = [10], nums2 = [5]\nOutput: -5\nExplanation:\nThe integer added to each element of nums1 is -5.\n\nExample 3:\n\nInput: nums1 = [1,1,1,1], nums2 = [1,1,1,1]\nOutput: 0\nExplanation:\nThe integer added to each element of nums1 is 0.\n\n \nConstraints:\n\n1 <= nums1.length == nums2.length <= 100\n0 <= nums1[i], nums2[i] <= 1000\nThe test cases are generated in a way that there is an integer x such that nums1 can become equal to nums2 by adding x to each element of nums1.", "difficulty": "easy", "starter_code": "class Solution:\n    def addedInteger(self, nums1: List[int], nums2: List[int]) -> int:\n        ", "public_test_cases": "[{\"input\": \"[2, 6, 4]\\n[9, 7, 5]\", \"output\": \"3\", \"testtype\": \"functional\"}, {\"input\": \"[10]\\n[5]\", \"output\": \"-5\", \"testtype\": \"functional\"}, {\"input\": \"[1, 1, 1, 1]\\n[1, 1, 1, 1]\", \"output\": \"0\", \"testtype\": \"functional\"}]"}
{"question_id": "3394", "question_title": "minimum-array-end", "question_content": "You are given two integers n and x. You have to construct an array of positive integers nums of size n where for every 0 <= i < n - 1, nums[i + 1] is greater than nums[i], and the result of the bitwise AND operation between all elements of nums is x.\nReturn the minimum possible value of nums[n - 1].\n \nExample 1:\n\nInput: n = 3, x = 4\nOutput: 6\nExplanation:\nnums can be [4,5,6] and its last element is 6.\n\nExample 2:\n\nInput: n = 2, x = 7\nOutput: 15\nExplanation:\nnums can be [7,15] and its last element is 15.\n\n \nConstraints:\n\n1 <= n, x <= 10^8", "difficulty": "medium", "starter_code": "class Solution:\n    def minEnd(self, n: int, x: int) -> int:\n        ", "public_test_cases": "[{\"input\": \"3\\n4\", \"output\": \"6\", \"testtype\": \"functional\"}, {\"input\": \"2\\n7\", \"output\": \"15\", \"testtype\": \"functional\"}]"}
{"question_id": "3362", "question_title": "find-the-median-of-the-uniqueness-array", "question_content": "You are given an integer array nums. The uniqueness array of nums is the sorted array that contains the number of distinct elements of all the subarrays of nums. In other words, it is a sorted array consisting of distinct(nums[i..j]), for all 0 <= i <= j < nums.length.\nHere, distinct(nums[i..j]) denotes the number of distinct elements in the subarray that starts at index i and ends at index j.\nReturn the median of the uniqueness array of nums.\nNote that the median of an array is defined as the middle element of the array when it is sorted in non-decreasing order. If there are two choices for a median, the smaller of the two values is taken.\n \nExample 1:\n\nInput: nums = [1,2,3]\nOutput: 1\nExplanation:\nThe uniqueness array of nums is [distinct(nums[0..0]), distinct(nums[1..1]), distinct(nums[2..2]), distinct(nums[0..1]), distinct(nums[1..2]), distinct(nums[0..2])] which is equal to [1, 1, 1, 2, 2, 3]. The uniqueness array has a median of 1. Therefore, the answer is 1.\n\nExample 2:\n\nInput: nums = [3,4,3,4,5]\nOutput: 2\nExplanation:\nThe uniqueness array of nums is [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3]. The uniqueness array has a median of 2. Therefore, the answer is 2.\n\nExample 3:\n\nInput: nums = [4,3,5,4]\nOutput: 2\nExplanation:\nThe uniqueness array of nums is [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]. The uniqueness array has a median of 2. Therefore, the answer is 2.\n\n \nConstraints:\n\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 10^5", "difficulty": "hard", "starter_code": "class Solution:\n    def medianOfUniquenessArray(self, nums: List[int]) -> int:\n        ", "public_test_cases": "[{\"input\": \"[1, 2, 3]\", \"output\": \"1\", \"testtype\": \"functional\"}, {\"input\": \"[3, 4, 3, 4, 5]\", \"output\": \"2\", \"testtype\": \"functional\"}, {\"input\": \"[4, 3, 5, 4]\", \"output\": \"2\", \"testtype\": \"functional\"}]"}
{"question_id": "3396", "question_title": "valid-word", "question_content": "A word is considered valid if:\n\nIt contains a minimum of 3 characters.\nIt contains only digits (0-9), and English letters (uppercase and lowercase).\nIt includes at least one vowel.\nIt includes at least one consonant.\n\nYou are given a string word.\nReturn true if word is valid, otherwise, return false.\nNotes:\n\n'a', 'e', 'i', 'o', 'u', and their uppercases are vowels.\nA consonant is an English letter that is not a vowel.\n\n \nExample 1:\n\nInput: word = \"234Adas\"\nOutput: true\nExplanation:\nThis word satisfies the conditions.\n\nExample 2:\n\nInput: word = \"b3\"\nOutput: false\nExplanation:\nThe length of this word is fewer than 3, and does not have a vowel.\n\nExample 3:\n\nInput: word = \"a3$e\"\nOutput: false\nExplanation:\nThis word contains a '$' character and does not have a consonant.\n\n \nConstraints:\n\n1 <= word.length <= 20\nword consists of English uppercase and lowercase letters, digits, '@', '#', and '$'.", "difficulty": "easy", "starter_code": "class Solution:\n    def isValid(self, word: str) -> bool:\n        ", "public_test_cases": "[{\"input\": \"\\\"234Adas\\\"\", \"output\": \"true\", \"testtype\": \"functional\"}, {\"input\": \"\\\"b3\\\"\", \"output\": \"false\", \"testtype\": \"functional\"}, {\"input\": \"\\\"a3$e\\\"\", \"output\": \"false\", \"testtype\": \"functional\"}]"}
{"question_id": "3384", "question_title": "minimum-number-of-operations-to-make-word-k-periodic", "question_content": "You are given a string word of size n, and an integer k such that k divides n.\nIn one operation, you can pick any two indices i and j, that are divisible by k, then replace the substring of length k starting at i with the substring of length k starting at j. That is, replace the substring word[i..i + k - 1] with the substring word[j..j + k - 1].\nReturn the minimum number of operations required to make word k-periodic.\nWe say that word is k-periodic if there is some string s of length k such that word can be obtained by concatenating s an arbitrary number of times. For example, if word == “ababab”, then word is 2-periodic for s = \"ab\".\n \nExample 1:\n\nInput: word = \"leetcodeleet\", k = 4\nOutput: 1\nExplanation:\nWe can obtain a 4-periodic string by picking i = 4 and j = 0. After this operation, word becomes equal to \"leetleetleet\".\n\nExample 2:\n\nInput: word = \"leetcoleet\", k = 2\nOutput: 3\nExplanation:\nWe can obtain a 2-periodic string by applying the operations in the table below.\n\n\n\ni\nj\nword\n\n\n0\n2\netetcoleet\n\n\n4\n0\netetetleet\n\n\n6\n0\netetetetet\n\n\n\n\n\n \n\n \nConstraints:\n\n1 <= n == word.length <= 10^5\n1 <= k <= word.length\nk divides word.length.\nword consists only of lowercase English letters.", "difficulty": "medium", "starter_code": "class Solution:\n    def minimumOperationsToMakeKPeriodic(self, word: str, k: int) -> int:\n        ", "public_test_cases": "[{\"input\": \"\\\"leetcodeleet\\\"\\n4\", \"output\": \"1\", \"testtype\": \"functional\"}, {\"input\": \"\\\"leetcoleet\\\"\\n2\", \"output\": \"3\", \"testtype\": \"functional\"}]"}
{"question_id": "3395", "question_title": "minimum-length-of-anagram-concatenation", "question_content": "You are given a string s, which is known to be a concatenation of anagrams of some string t.\nReturn the minimum possible length of the string t.\nAn anagram is formed by rearranging the letters of a string. For example, \"aab\", \"aba\", and, \"baa\" are anagrams of \"aab\".\n \nExample 1:\n\nInput: s = \"abba\"\nOutput: 2\nExplanation:\nOne possible string t could be \"ba\".\n\nExample 2:\n\nInput: s = \"cdef\"\nOutput: 4\nExplanation:\nOne possible string t could be \"cdef\", notice that t can be equal to s.\n\n \nConstraints:\n\n1 <= s.length <= 10^5\ns consist only of lowercase English letters.", "difficulty": "medium", "starter_code": "class Solution:\n    def minAnagramLength(self, s: str) -> int:\n        ", "public_test_cases": "[{\"input\": \"\\\"abba\\\"\", \"output\": \"2\", \"testtype\": \"functional\"}, {\"input\": \"\\\"cdef\\\"\", \"output\": \"4\", \"testtype\": \"functional\"}]"}
{"question_id": "3402", "question_title": "minimum-cost-to-equalize-array", "question_content": "You are given an integer array nums and two integers cost1 and cost2. You are allowed to perform either of the following operations any number of times:\n\nChoose an index i from nums and increase nums[i] by 1 for a cost of cost1.\nChoose two different indices i, j, from nums and increase nums[i] and nums[j] by 1 for a cost of cost2.\n\nReturn the minimum cost required to make all elements in the array equal. \nSince the answer may be very large, return it modulo 10^9 + 7.\n \nExample 1:\n\nInput: nums = [4,1], cost1 = 5, cost2 = 2\nOutput: 15\nExplanation: \nThe following operations can be performed to make the values equal:\n\nIncrease nums[1] by 1 for a cost of 5. nums becomes [4,2].\nIncrease nums[1] by 1 for a cost of 5. nums becomes [4,3].\nIncrease nums[1] by 1 for a cost of 5. nums becomes [4,4].\n\nThe total cost is 15.\n\nExample 2:\n\nInput: nums = [2,3,3,3,5], cost1 = 2, cost2 = 1\nOutput: 6\nExplanation: \nThe following operations can be performed to make the values equal:\n\nIncrease nums[0] and nums[1] by 1 for a cost of 1. nums becomes [3,4,3,3,5].\nIncrease nums[0] and nums[2] by 1 for a cost of 1. nums becomes [4,4,4,3,5].\nIncrease nums[0] and nums[3] by 1 for a cost of 1. nums becomes [5,4,4,4,5].\nIncrease nums[1] and nums[2] by 1 for a cost of 1. nums becomes [5,5,5,4,5].\nIncrease nums[3] by 1 for a cost of 2. nums becomes [5,5,5,5,5].\n\nThe total cost is 6.\n\nExample 3:\n\nInput: nums = [3,5,3], cost1 = 1, cost2 = 3\nOutput: 4\nExplanation:\nThe following operations can be performed to make the values equal:\n\nIncrease nums[0] by 1 for a cost of 1. nums becomes [4,5,3].\nIncrease nums[0] by 1 for a cost of 1. nums becomes [5,5,3].\nIncrease nums[2] by 1 for a cost of 1. nums becomes [5,5,4].\nIncrease nums[2] by 1 for a cost of 1. nums becomes [5,5,5].\n\nThe total cost is 4.\n\n \nConstraints:\n\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 10^6\n1 <= cost1 <= 10^6\n1 <= cost2 <= 10^6", "difficulty": "hard", "starter_code": "class Solution:\n    def minCostToEqualizeArray(self, nums: List[int], cost1: int, cost2: int) -> int:\n        ", "public_test_cases": "[{\"input\": \"[4, 1]\\n5\\n2\", \"output\": \"15\", \"testtype\": \"functional\"}, {\"input\": \"[2, 3, 3, 3, 5]\\n2\\n1\", \"output\": \"6\", \"testtype\": \"functional\"}, {\"input\": \"[3, 5, 3]\\n1\\n3\", \"output\": \"4\", \"testtype\": \"functional\"}]"}
{"question_id": "3398", "question_title": "make-a-square-with-the-same-color", "question_content": "You are given a 2D matrix grid of size 3 x 3 consisting only of characters 'B' and 'W'. Character 'W' represents the white color, and character 'B' represents the black color.\nYour task is to change the color of at most one cell so that the matrix has a 2 x 2 square where all cells are of the same color.\nReturn true if it is possible to create a 2 x 2 square of the same color, otherwise, return false.\n \n\n\nExample 1:\n\n \n \n \n \n \n \n \n \n \n\n\nInput: grid = [[\"B\",\"W\",\"B\"],[\"B\",\"W\",\"W\"],[\"B\",\"W\",\"B\"]]\nOutput: true\nExplanation:\nIt can be done by changing the color of the grid[0][2].\n\nExample 2:\n\n \n \n \n \n \n \n \n \n \n\n\nInput: grid = [[\"B\",\"W\",\"B\"],[\"W\",\"B\",\"W\"],[\"B\",\"W\",\"B\"]]\nOutput: false\nExplanation:\nIt cannot be done by changing at most one cell.\n\nExample 3:\n\n \n \n \n \n \n \n \n \n \n\n\nInput: grid = [[\"B\",\"W\",\"B\"],[\"B\",\"W\",\"W\"],[\"B\",\"W\",\"W\"]]\nOutput: true\nExplanation:\nThe grid already contains a 2 x 2 square of the same color.\n\n \nConstraints:\n\ngrid.length == 3\ngrid[i].length == 3\ngrid[i][j] is either 'W' or 'B'.", "difficulty": "easy", "starter_code": "class Solution:\n    def canMakeSquare(self, grid: List[List[str]]) -> bool:\n        ", "public_test_cases": "[{\"input\": \"[[\\\"B\\\", \\\"W\\\", \\\"B\\\"], [\\\"B\\\", \\\"W\\\", \\\"W\\\"], [\\\"B\\\", \\\"W\\\", \\\"B\\\"]]\", \"output\": \"true\", \"testtype\": \"functional\"}, {\"input\": \"[[\\\"B\\\", \\\"W\\\", \\\"B\\\"], [\\\"W\\\", \\\"B\\\", \\\"W\\\"], [\\\"B\\\", \\\"W\\\", \\\"B\\\"]]\", \"output\": \"false\", \"testtype\": \"functional\"}, {\"input\": \"[[\\\"B\\\", \\\"W\\\", \\\"B\\\"], [\\\"B\\\", \\\"W\\\", \\\"W\\\"], [\\\"B\\\", \\\"W\\\", \\\"W\\\"]]\", \"output\": \"true\", \"testtype\": \"functional\"}]"}
{"question_id": "3388", "question_title": "right-triangles", "question_content": "You are given a 2D boolean matrix grid.\nReturn an integer that is the number of right triangles that can be made with the 3 elements of grid such that all of them have a value of 1.\nNote:\n\nA collection of 3 elements of grid is a right triangle if one of its elements is in the same row with another element and in the same column with the third element. The 3 elements do not have to be next to each other.\n\n \nExample 1:\n\n\n\n\n0\n1\n0\n\n\n0\n1\n1\n\n\n0\n1\n0\n\n\n\n\n\n\n0\n1\n0\n\n\n0\n1\n1\n\n\n0\n1\n0\n\n\n\n\n\nInput: grid = [[0,1,0],[0,1,1],[0,1,0]]\nOutput: 2\nExplanation:\nThere are two right triangles.\n\nExample 2:\n\n\n\n\n1\n0\n0\n0\n\n\n0\n1\n0\n1\n\n\n1\n0\n0\n0\n\n\n\n\n\nInput: grid = [[1,0,0,0],[0,1,0,1],[1,0,0,0]]\nOutput: 0\nExplanation:\nThere are no right triangles.\n\nExample 3:\n\n\n\n\n1\n0\n1\n\n\n1\n0\n0\n\n\n1\n0\n0\n\n\n\n\n\n\n1\n0\n1\n\n\n1\n0\n0\n\n\n1\n0\n0\n\n\n\n\n\nInput: grid = [[1,0,1],[1,0,0],[1,0,0]]\nOutput: 2\nExplanation:\nThere are two right triangles.\n\n \nConstraints:\n\n1 <= grid.length <= 1000\n1 <= grid[i].length <= 1000\n0 <= grid[i][j] <= 1", "difficulty": "medium", "starter_code": "class Solution:\n    def numberOfRightTriangles(self, grid: List[List[int]]) -> int:\n        ", "public_test_cases": "[{\"input\": \"[[0, 1, 0], [0, 1, 1], [0, 1, 0]]\", \"output\": \"2\", \"testtype\": \"functional\"}, {\"input\": \"[[1, 0, 0, 0], [0, 1, 0, 1], [1, 0, 0, 0]]\", \"output\": \"0\", \"testtype\": \"functional\"}, {\"input\": \"[[1, 0, 1], [1, 0, 0], [1, 0, 0]]\", \"output\": \"2\", \"testtype\": \"functional\"}]"}
{"question_id": "3406", "question_title": "find-all-possible-stable-binary-arrays-i", "question_content": "You are given 3 positive integers zero, one, and limit.\nA binary array arr is called stable if:\n\nThe number of occurrences of 0 in arr is exactly zero.\nThe number of occurrences of 1 in arr is exactly one.\nEach subarray of arr with a size greater than limit must contain both 0 and 1.\n\nReturn the total number of stable binary arrays.\nSince the answer may be very large, return it modulo 10^9 + 7.\n \nExample 1:\n\nInput: zero = 1, one = 1, limit = 2\nOutput: 2\nExplanation:\nThe two possible stable binary arrays are [1,0] and [0,1], as both arrays have a single 0 and a single 1, and no subarray has a length greater than 2.\n\nExample 2:\n\nInput: zero = 1, one = 2, limit = 1\nOutput: 1\nExplanation:\nThe only possible stable binary array is [1,0,1].\nNote that the binary arrays [1,1,0] and [0,1,1] have subarrays of length 2 with identical elements, hence, they are not stable.\n\nExample 3:\n\nInput: zero = 3, one = 3, limit = 2\nOutput: 14\nExplanation:\nAll the possible stable binary arrays are [0,0,1,0,1,1], [0,0,1,1,0,1], [0,1,0,0,1,1], [0,1,0,1,0,1], [0,1,0,1,1,0], [0,1,1,0,0,1], [0,1,1,0,1,0], [1,0,0,1,0,1], [1,0,0,1,1,0], [1,0,1,0,0,1], [1,0,1,0,1,0], [1,0,1,1,0,0], [1,1,0,0,1,0], and [1,1,0,1,0,0].\n\n \nConstraints:\n\n1 <= zero, one, limit <= 200", "difficulty": "medium", "starter_code": "class Solution:\n    def numberOfStableArrays(self, zero: int, one: int, limit: int) -> int:\n        ", "public_test_cases": "[{\"input\": \"1\\n1\\n2\", \"output\": \"2\", \"testtype\": \"functional\"}, {\"input\": \"1\\n2\\n1\", \"output\": \"1\", \"testtype\": \"functional\"}, {\"input\": \"3\\n3\\n2\", \"output\": \"14\", \"testtype\": \"functional\"}]"}
{"question_id": "3412", "question_title": "permutation-difference-between-two-strings", "question_content": "You are given two strings s and t such that every character occurs at most once in s and t is a permutation of s.\nThe permutation difference between s and t is defined as the sum of the absolute difference between the index of the occurrence of each character in s and the index of the occurrence of the same character in t.\nReturn the permutation difference between s and t.\n \nExample 1:\n\nInput: s = \"abc\", t = \"bac\"\nOutput: 2\nExplanation:\nFor s = \"abc\" and t = \"bac\", the permutation difference of s and t is equal to the sum of:\n\nThe absolute difference between the index of the occurrence of \"a\" in s and the index of the occurrence of \"a\" in t.\nThe absolute difference between the index of the occurrence of \"b\" in s and the index of the occurrence of \"b\" in t.\nThe absolute difference between the index of the occurrence of \"c\" in s and the index of the occurrence of \"c\" in t.\n\nThat is, the permutation difference between s and t is equal to |0 - 1| + |2 - 2| + |1 - 0| = 2.\n\nExample 2:\n\nInput: s = \"abcde\", t = \"edbac\"\nOutput: 12\nExplanation: The permutation difference between s and t is equal to |0 - 3| + |1 - 2| + |2 - 4| + |3 - 1| + |4 - 0| = 12.\n\n \nConstraints:\n\n1 <= s.length <= 26\nEach character occurs at most once in s.\nt is a permutation of s.\ns consists only of lowercase English letters.", "difficulty": "easy", "starter_code": "class Solution:\n    def findPermutationDifference(self, s: str, t: str) -> int:\n        ", "public_test_cases": "[{\"input\": \"\\\"abc\\\"\\n\\\"bac\\\"\", \"output\": \"2\", \"testtype\": \"functional\"}, {\"input\": \"\\\"abcde\\\"\\n\\\"edbac\\\"\", \"output\": \"12\", \"testtype\": \"functional\"}]"}
{"question_id": "3383", "question_title": "taking-maximum-energy-from-the-mystic-dungeon", "question_content": "In a mystic dungeon, n magicians are standing in a line. Each magician has an attribute that gives you energy. Some magicians can give you negative energy, which means taking energy from you.\nYou have been cursed in such a way that after absorbing energy from magician i, you will be instantly transported to magician (i + k). This process will be repeated until you reach the magician where (i + k) does not exist.\nIn other words, you will choose a starting point and then teleport with k jumps until you reach the end of the magicians' sequence, absorbing all the energy during the journey.\nYou are given an array energy and an integer k. Return the maximum possible energy you can gain.\n \nExample 1:\n\nInput:  energy = [5,2,-10,-5,1], k = 3\nOutput: 3\nExplanation: We can gain a total energy of 3 by starting from magician 1 absorbing 2 + 1 = 3.\n\nExample 2:\n\nInput: energy = [-2,-3,-1], k = 2\nOutput: -1\nExplanation: We can gain a total energy of -1 by starting from magician 2.\n\n \nConstraints:\n\n1 <= energy.length <= 10^5\n-1000 <= energy[i] <= 1000\n1 <= k <= energy.length - 1\n\n \n​​​​​​", "difficulty": "medium", "starter_code": "class Solution:\n    def maximumEnergy(self, energy: List[int], k: int) -> int:\n        ", "public_test_cases": "[{\"input\": \"[5, 2, -10, -5, 1]\\n3\", \"output\": \"3\", \"testtype\": \"functional\"}, {\"input\": \"[-2, -3, -1]\\n2\", \"output\": \"-1\", \"testtype\": \"functional\"}]"}
{"question_id": "3429", "question_title": "special-array-i", "question_content": "An array is considered special if every pair of its adjacent elements contains two numbers with different parity.\nYou are given an array of integers nums. Return true if nums is a special array, otherwise, return false.\n \nExample 1:\n\nInput: nums = [1]\nOutput: true\nExplanation:\nThere is only one element. So the answer is true.\n\nExample 2:\n\nInput: nums = [2,1,4]\nOutput: true\nExplanation:\nThere is only two pairs: (2,1) and (1,4), and both of them contain numbers with different parity. So the answer is true.\n\nExample 3:\n\nInput: nums = [4,3,1,6]\nOutput: false\nExplanation:\nnums[1] and nums[2] are both odd. So the answer is false.\n\n \nConstraints:\n\n1 <= nums.length <= 100\n1 <= nums[i] <= 100", "difficulty": "easy", "starter_code": "class Solution:\n    def isArraySpecial(self, nums: List[int]) -> bool:\n        ", "public_test_cases": "[{\"input\": \"[1]\", \"output\": \"true\", \"testtype\": \"functional\"}, {\"input\": \"[2, 1, 4]\", \"output\": \"true\", \"testtype\": \"functional\"}, {\"input\": \"[4, 3, 1, 6]\", \"output\": \"false\", \"testtype\": \"functional\"}]"}
{"question_id": "3416", "question_title": "sum-of-digit-differences-of-all-pairs", "question_content": "You are given an array nums consisting of positive integers where all integers have the same number of digits.\nThe digit difference between two integers is the count of different digits that are in the same position in the two integers.\nReturn the sum of the digit differences between all pairs of integers in nums.\n \nExample 1:\n\nInput: nums = [13,23,12]\nOutput: 4\nExplanation:\nWe have the following:\n- The digit difference between 13 and 23 is 1.\n- The digit difference between 13 and 12 is 1.\n- The digit difference between 23 and 12 is 2.\nSo the total sum of digit differences between all pairs of integers is 1 + 1 + 2 = 4.\n\nExample 2:\n\nInput: nums = [10,10,10,10]\nOutput: 0\nExplanation:\nAll the integers in the array are the same. So the total sum of digit differences between all pairs of integers will be 0.\n\n \nConstraints:\n\n2 <= nums.length <= 10^5\n1 <= nums[i] < 10^9\nAll integers in nums have the same number of digits.", "difficulty": "medium", "starter_code": "class Solution:\n    def sumDigitDifferences(self, nums: List[int]) -> int:\n        ", "public_test_cases": "[{\"input\": \"[13, 23, 12]\", \"output\": \"4\", \"testtype\": \"functional\"}, {\"input\": \"[10, 10, 10, 10]\", \"output\": \"0\", \"testtype\": \"functional\"}]"}
{"question_id": "3414", "question_title": "find-number-of-ways-to-reach-the-k-th-stair", "question_content": "You are given a non-negative integer k. There exists a staircase with an infinite number of stairs, with the lowest stair numbered 0.\nAlice has an integer jump, with an initial value of 0. She starts on stair 1 and wants to reach stair k using any number of operations. If she is on stair i, in one operation she can:\n\nGo down to stair i - 1. This operation cannot be used consecutively or on stair 0.\nGo up to stair i + 2^jump. And then, jump becomes jump + 1.\n\nReturn the total number of ways Alice can reach stair k.\nNote that it is possible that Alice reaches the stair k, and performs some operations to reach the stair k again.\n \nExample 1:\n\nInput: k = 0\nOutput: 2\nExplanation:\nThe 2 possible ways of reaching stair 0 are:\n\nAlice starts at stair 1.\n\t\nUsing an operation of the first type, she goes down 1 stair to reach stair 0.\n\n\nAlice starts at stair 1.\n\t\nUsing an operation of the first type, she goes down 1 stair to reach stair 0.\nUsing an operation of the second type, she goes up 2^0 stairs to reach stair 1.\nUsing an operation of the first type, she goes down 1 stair to reach stair 0.\n\n\n\n\nExample 2:\n\nInput: k = 1\nOutput: 4\nExplanation:\nThe 4 possible ways of reaching stair 1 are:\n\nAlice starts at stair 1. Alice is at stair 1.\nAlice starts at stair 1.\n\t\nUsing an operation of the first type, she goes down 1 stair to reach stair 0.\nUsing an operation of the second type, she goes up 2^0 stairs to reach stair 1.\n\n\nAlice starts at stair 1.\n\t\nUsing an operation of the second type, she goes up 2^0 stairs to reach stair 2.\nUsing an operation of the first type, she goes down 1 stair to reach stair 1.\n\n\nAlice starts at stair 1.\n\t\nUsing an operation of the first type, she goes down 1 stair to reach stair 0.\nUsing an operation of the second type, she goes up 2^0 stairs to reach stair 1.\nUsing an operation of the first type, she goes down 1 stair to reach stair 0.\nUsing an operation of the second type, she goes up 2^1 stairs to reach stair 2.\nUsing an operation of the first type, she goes down 1 stair to reach stair 1.\n\n\n\n\n \nConstraints:\n\n0 <= k <= 10^9", "difficulty": "hard", "starter_code": "class Solution:\n    def waysToReachStair(self, k: int) -> int:\n        ", "public_test_cases": "[{\"input\": \"0\", \"output\": \"2\", \"testtype\": \"functional\"}, {\"input\": \"1\", \"output\": \"4\", \"testtype\": \"functional\"}]"}
{"question_id": "3446", "question_title": "find-the-number-of-good-pairs-i", "question_content": "You are given 2 integer arrays nums1 and nums2 of lengths n and m respectively. You are also given a positive integer k.\nA pair (i, j) is called good if nums1[i] is divisible by nums2[j] * k (0 <= i <= n - 1, 0 <= j <= m - 1).\nReturn the total number of good pairs.\n \nExample 1:\n\nInput: nums1 = [1,3,4], nums2 = [1,3,4], k = 1\nOutput: 5\nExplanation:\nThe 5 good pairs are (0, 0), (1, 0), (1, 1), (2, 0), and (2, 2).\nExample 2:\n\nInput: nums1 = [1,2,4,12], nums2 = [2,4], k = 3\nOutput: 2\nExplanation:\nThe 2 good pairs are (3, 0) and (3, 1).\n\n \nConstraints:\n\n1 <= n, m <= 50\n1 <= nums1[i], nums2[j] <= 50\n1 <= k <= 50", "difficulty": "easy", "starter_code": "class Solution:\n    def numberOfPairs(self, nums1: List[int], nums2: List[int], k: int) -> int:\n        ", "public_test_cases": "[{\"input\": \"[1, 3, 4]\\n[1, 3, 4]\\n1\", \"output\": \"5\", \"testtype\": \"functional\"}, {\"input\": \"[1, 2, 4, 12]\\n[2, 4]\\n3\", \"output\": \"2\", \"testtype\": \"functional\"}]"}
{"question_id": "3451", "question_title": "string-compression-iii", "question_content": "Given a string word, compress it using the following algorithm:\n\nBegin with an empty string comp. While word is not empty, use the following operation:\n\n\t\nRemove a maximum length prefix of word made of a single character c repeating at most 9 times.\nAppend the length of the prefix followed by c to comp.\n\n\n\nReturn the string comp.\n \nExample 1:\n\nInput: word = \"abcde\"\nOutput: \"1a1b1c1d1e\"\nExplanation:\nInitially, comp = \"\". Apply the operation 5 times, choosing \"a\", \"b\", \"c\", \"d\", and \"e\" as the prefix in each operation.\nFor each prefix, append \"1\" followed by the character to comp.\n\nExample 2:\n\nInput: word = \"aaaaaaaaaaaaaabb\"\nOutput: \"9a5a2b\"\nExplanation:\nInitially, comp = \"\". Apply the operation 3 times, choosing \"aaaaaaaaa\", \"aaaaa\", and \"bb\" as the prefix in each operation.\n\nFor prefix \"aaaaaaaaa\", append \"9\" followed by \"a\" to comp.\nFor prefix \"aaaaa\", append \"5\" followed by \"a\" to comp.\nFor prefix \"bb\", append \"2\" followed by \"b\" to comp.\n\n\n \nConstraints:\n\n1 <= word.length <= 2 * 10^5\nword consists only of lowercase English letters.", "difficulty": "medium", "starter_code": "class Solution:\n    def compressedString(self, word: str) -> str:\n        ", "public_test_cases": "[{\"input\": \"\\\"abcde\\\"\", \"output\": \"\\\"1a1b1c1d1e\\\"\", \"testtype\": \"functional\"}, {\"input\": \"\\\"aaaaaaaaaaaaaabb\\\"\", \"output\": \"\\\"9a5a2b\\\"\", \"testtype\": \"functional\"}]"}
{"question_id": "3423", "question_title": "maximum-sum-of-subsequence-with-non-adjacent-elements", "question_content": "You are given an array nums consisting of integers. You are also given a 2D array queries, where queries[i] = [pos_i, x_i].\nFor query i, we first set nums[pos_i] equal to x_i, then we calculate the answer to query i which is the maximum sum of a subsequence of nums where no two adjacent elements are selected.\nReturn the sum of the answers to all queries.\nSince the final answer may be very large, return it modulo 10^9 + 7.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n \nExample 1:\n\nInput: nums = [3,5,9], queries = [[1,-2],[0,-3]]\nOutput: 21\nExplanation:\nAfter the 1^st query, nums = [3,-2,9] and the maximum sum of a subsequence with non-adjacent elements is 3 + 9 = 12.\nAfter the 2^nd query, nums = [-3,-2,9] and the maximum sum of a subsequence with non-adjacent elements is 9.\n\nExample 2:\n\nInput: nums = [0,-1], queries = [[0,-5]]\nOutput: 0\nExplanation:\nAfter the 1^st query, nums = [-5,-1] and the maximum sum of a subsequence with non-adjacent elements is 0 (choosing an empty subsequence).\n\n \nConstraints:\n\n1 <= nums.length <= 5 * 10^4\n-10^5 <= nums[i] <= 10^5\n1 <= queries.length <= 5 * 10^4\nqueries[i] == [pos_i, x_i]\n0 <= pos_i <= nums.length - 1\n-10^5 <= x_i <= 10^5", "difficulty": "hard", "starter_code": "class Solution:\n    def maximumSumSubsequence(self, nums: List[int], queries: List[List[int]]) -> int:\n        ", "public_test_cases": "[{\"input\": \"[3, 5, 9]\\n[[1, -2], [0, -3]]\", \"output\": \"21\", \"testtype\": \"functional\"}, {\"input\": \"[0, -1]\\n[[0, -5]]\", \"output\": \"0\", \"testtype\": \"functional\"}]"}
{"question_id": "3403", "question_title": "minimum-substring-partition-of-equal-character-frequency", "question_content": "Given a string s, you need to partition it into one or more balanced substrings. For example, if s == \"ababcc\" then (\"abab\", \"c\", \"c\"), (\"ab\", \"abc\", \"c\"), and (\"ababcc\") are all valid partitions, but (\"a\", \"bab\", \"cc\"), (\"aba\", \"bc\", \"c\"), and (\"ab\", \"abcc\") are not. The unbalanced substrings are bolded.\nReturn the minimum number of substrings that you can partition s into.\nNote: A balanced string is a string where each character in the string occurs the same number of times.\n \nExample 1:\n\nInput: s = \"fabccddg\"\nOutput: 3\nExplanation:\nWe can partition the string s into 3 substrings in one of the following ways: (\"fab, \"ccdd\", \"g\"), or (\"fabc\", \"cd\", \"dg\").\n\nExample 2:\n\nInput: s = \"abababaccddb\"\nOutput: 2\nExplanation:\nWe can partition the string s into 2 substrings like so: (\"abab\", \"abaccddb\").\n\n \nConstraints:\n\n1 <= s.length <= 1000\ns consists only of English lowercase letters.", "difficulty": "medium", "starter_code": "class Solution:\n    def minimumSubstringsInPartition(self, s: str) -> int:\n        ", "public_test_cases": "[{\"input\": \"\\\"fabccddg\\\"\", \"output\": \"3\", \"testtype\": \"functional\"}, {\"input\": \"\\\"abababaccddb\\\"\", \"output\": \"2\", \"testtype\": \"functional\"}]"}
{"question_id": "3411", "question_title": "find-products-of-elements-of-big-array", "question_content": "A powerful array for an integer x is the shortest sorted array of powers of two that sum up to x. For example, the powerful array for 11 is [1, 2, 8].\nThe array big_nums is created by concatenating the powerful arrays for every positive integer i in ascending order: 1, 2, 3, and so forth. Thus, big_nums starts as [1, 2, 1, 2, 4, 1, 4, 2, 4, 1, 2, 4, 8, ...].\nYou are given a 2D integer matrix queries, where for queries[i] = [from_i, to_i, mod_i] you should calculate (big_nums[from_i] * big_nums[from_i + 1] * ... * big_nums[to_i]) % mod_i.\nReturn an integer array answer such that answer[i] is the answer to the i^th query.\n \nExample 1:\n\nInput: queries = [[1,3,7]]\nOutput: [4]\nExplanation:\nThere is one query.\nbig_nums[1..3] = [2,1,2]. The product of them is 4. The remainder of 4 under 7 is 4.\n\nExample 2:\n\nInput: queries = [[2,5,3],[7,7,4]]\nOutput: [2,2]\nExplanation:\nThere are two queries.\nFirst query: big_nums[2..5] = [1,2,4,1]. The product of them is 8. The remainder of 8 under 3 is 2.\nSecond query: big_nums[7] = 2. The remainder of 2 under 4 is 2.\n\n \nConstraints:\n\n1 <= queries.length <= 500\nqueries[i].length == 3\n0 <= queries[i][0] <= queries[i][1] <= 10^15\n1 <= queries[i][2] <= 10^5", "difficulty": "hard", "starter_code": "class Solution:\n    def findProductsOfElements(self, queries: List[List[int]]) -> List[int]:\n        ", "public_test_cases": "[{\"input\": \"[[1, 3, 7]]\", \"output\": \"[4]\", \"testtype\": \"functional\"}, {\"input\": \"[[2, 5, 3], [7, 7, 4]]\", \"output\": \"[2, 2]\", \"testtype\": \"functional\"}]"}
{"question_id": "3428", "question_title": "find-the-xor-of-numbers-which-appear-twice", "question_content": "You are given an array nums, where each number in the array appears either once or twice.\nReturn the bitwise XOR of all the numbers that appear twice in the array, or 0 if no number appears twice.\n \nExample 1:\n\nInput: nums = [1,2,1,3]\nOutput: 1\nExplanation:\nThe only number that appears twice in nums is 1.\n\nExample 2:\n\nInput: nums = [1,2,3]\nOutput: 0\nExplanation:\nNo number appears twice in nums.\n\nExample 3:\n\nInput: nums = [1,2,2,1]\nOutput: 3\nExplanation:\nNumbers 1 and 2 appeared twice. 1 XOR 2 == 3.\n\n \nConstraints:\n\n1 <= nums.length <= 50\n1 <= nums[i] <= 50\nEach number in nums appears either once or twice.", "difficulty": "easy", "starter_code": "class Solution:\n    def duplicateNumbersXOR(self, nums: List[int]) -> int:\n        ", "public_test_cases": "[{\"input\": \"[1, 2, 1, 3]\", \"output\": \"1\", \"testtype\": \"functional\"}, {\"input\": \"[1, 2, 3]\", \"output\": \"0\", \"testtype\": \"functional\"}, {\"input\": \"[1, 2, 2, 1]\", \"output\": \"3\", \"testtype\": \"functional\"}]"}
{"question_id": "3420", "question_title": "find-occurrences-of-an-element-in-an-array", "question_content": "You are given an integer array nums, an integer array queries, and an integer x.\nFor each queries[i], you need to find the index of the queries[i]^th occurrence of x in the nums array. If there are fewer than queries[i] occurrences of x, the answer should be -1 for that query.\nReturn an integer array answer containing the answers to all queries.\n \nExample 1:\n\nInput: nums = [1,3,1,7], queries = [1,3,2,4], x = 1\nOutput: [0,-1,2,-1]\nExplanation:\n\nFor the 1^st query, the first occurrence of 1 is at index 0.\nFor the 2^nd query, there are only two occurrences of 1 in nums, so the answer is -1.\nFor the 3^rd query, the second occurrence of 1 is at index 2.\nFor the 4^th query, there are only two occurrences of 1 in nums, so the answer is -1.\n\n\nExample 2:\n\nInput: nums = [1,2,3], queries = [10], x = 5\nOutput: [-1]\nExplanation:\n\nFor the 1^st query, 5 doesn't exist in nums, so the answer is -1.\n\n\n \nConstraints:\n\n1 <= nums.length, queries.length <= 10^5\n1 <= queries[i] <= 10^5\n1 <= nums[i], x <= 10^4", "difficulty": "medium", "starter_code": "class Solution:\n    def occurrencesOfElement(self, nums: List[int], queries: List[int], x: int) -> List[int]:\n        ", "public_test_cases": "[{\"input\": \"[1, 3, 1, 7]\\n[1, 3, 2, 4]\\n1\", \"output\": \"[0, -1, 2, -1]\", \"testtype\": \"functional\"}, {\"input\": \"[1, 2, 3]\\n[10]\\n5\", \"output\": \"[-1]\", \"testtype\": \"functional\"}]"}
