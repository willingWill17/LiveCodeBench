{"question_id": "abc356_a", "question_title": "Subsegment Reverse", "question_content": "You are given positive integers N, L, and R.\r\nFor a sequence A = (1, 2, \\dots, N) of length N, an operation of reversing the L-th through R-th elements was performed once.\r\nPrint the sequence after this operation.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN L R\n\nOutput\n\nLet A' = (A'_1, A'_2, \\dots, A'_N) be the sequence after the operation. Print it in the following format:\nA'_1 A'_2 \\dots A'_N\n\nConstraints\n\n\n- All input values are integers.\n- 1 \\leq L \\leq R \\leq N \\leq 100\n\nSample Input 1\n\n5 2 3\n\nSample Output 1\n\n1 3 2 4 5\r\n\nInitially, A = (1, 2, 3, 4, 5).\r\nAfter reversing the second through third elements, the sequence becomes (1, 3, 2, 4, 5), which should be printed.\n\nSample Input 2\n\n7 1 1\n\nSample Output 2\n\n1 2 3 4 5 6 7\r\n\nIt is possible that L = R.\n\nSample Input 3\n\n10 1 10\n\nSample Output 3\n\n10 9 8 7 6 5 4 3 2 1\r\n\nIt is possible that L = 1 or R = N.", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"5 2 3\\n\", \"output\": \"1 3 2 4 5\\n\", \"testtype\": \"stdin\"}, {\"input\": \"7 1 1\\n\", \"output\": \"1 2 3 4 5 6 7\\n\", \"testtype\": \"stdin\"}, {\"input\": \"10 1 10\\n\", \"output\": \"10 9 8 7 6 5 4 3 2 1\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc356_b", "question_title": "Nutrients", "question_content": "Takahashi is health-conscious and concerned about whether he is getting enough of M types of nutrients from his diet.\nFor the i-th nutrient, his goal is to take at least A_i units per day.\nToday, he ate N foods, and from the i-th food, he took X_{i,j} units of nutrient j.\nDetermine whether he has met the goal for all M types of nutrients.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN M\r\nA_1 \\ldots A_M\r\nX_{1,1} \\ldots X_{1,M}\r\n\\vdots\r\nX_{N,1} \\ldots X_{N,M}\n\nOutput\n\nPrint Yes if the goal is met for all M types of nutrients, and No otherwise.\n\nConstraints\n\n\n- 1 \\leq N \\leq 100\n- 1 \\leq M \\leq 100\n- 0 \\leq A_i, X_{i,j} \\leq 10^7\n- All input values are integers.\n\nSample Input 1\n\n2 3\r\n10 20 30\r\n20 0 10\r\n0 100 100\n\nSample Output 1\n\nYes\r\n\nFor nutrient 1, Takahashi took 20 units from the 1-st food and 0 units from the 2-nd food, totaling 20 units, thus meeting the goal of taking at least 10 units.\r\nSimilarly, he meets the goal for nutrients 2 and 3.\n\nSample Input 2\n\n2 4\r\n10 20 30 40\r\n20 0 10 30\r\n0 100 100 0\n\nSample Output 2\n\nNo\r\n\nThe goal is not met for nutrient 4.", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"2 3\\n10 20 30\\n20 0 10\\n0 100 100\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"2 4\\n10 20 30 40\\n20 0 10 30\\n0 100 100 0\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc359_a", "question_title": "Count Takahashi", "question_content": "You are given N strings.\nThe i-th string S_i (1 \\leq i \\leq N) is either Takahashi or Aoki.\nHow many i are there such that S_i is equal to Takahashi?\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nS_1\r\nS_2\r\n\\vdots\r\nS_N\n\nOutput\n\nPrint the count of i such that S_i is equal to Takahashi as an integer in a single line.\n\nConstraints\n\n\n- 1 \\leq N \\leq 100\n- N is an integer.\n- Each S_i is Takahashi or Aoki. (1 \\leq i \\leq N)\n\nSample Input 1\n\n3\r\nAoki\r\nTakahashi\r\nTakahashi\n\nSample Output 1\n\n2\r\n\nS_2 and S_3 are equal to Takahashi, while S_1 is not.\nTherefore, print 2.\n\nSample Input 2\n\n2\r\nAoki\r\nAoki\n\nSample Output 2\n\n0\r\n\nIt is possible that no S_i is equal to Takahashi.\n\nSample Input 3\n\n20\r\nAoki\r\nTakahashi\r\nTakahashi\r\nAoki\r\nAoki\r\nAoki\r\nAoki\r\nTakahashi\r\nAoki\r\nAoki\r\nAoki\r\nTakahashi\r\nTakahashi\r\nAoki\r\nTakahashi\r\nAoki\r\nAoki\r\nAoki\r\nAoki\r\nTakahashi\n\nSample Output 3\n\n7", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"3\\nAoki\\nTakahashi\\nTakahashi\\n\", \"output\": \"2\\n\", \"testtype\": \"stdin\"}, {\"input\": \"2\\nAoki\\nAoki\\n\", \"output\": \"0\\n\", \"testtype\": \"stdin\"}, {\"input\": \"20\\nAoki\\nTakahashi\\nTakahashi\\nAoki\\nAoki\\nAoki\\nAoki\\nTakahashi\\nAoki\\nAoki\\nAoki\\nTakahashi\\nTakahashi\\nAoki\\nTakahashi\\nAoki\\nAoki\\nAoki\\nAoki\\nTakahashi\\n\", \"output\": \"7\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc362_a", "question_title": "Buy a Pen", "question_content": "Takahashi came to a store to buy a pen. Here, a red pen costs R yen, a green pen costs G yen, and a blue pen costs B yen.\nTakahashi dislikes the color C. If C is Red, he cannot buy a red pen; if C is Green, he cannot buy a green pen; and if C is Blue, he cannot buy a blue pen.\nDetermine the minimum amount of money he needs to buy one pen.\n\nInput\n\nThe input is given from Standard Input in the following format:\nR G B\r\nC\n\nOutput\n\nIf the minimum amount of money Takahashi needs to buy one pen is X yen, print X.\n\nConstraints\n\n\n-  1\\leq R,G,B\\leq 100\n- R, G, and B are integers.\n- C is Red, Green, or Blue.\n\nSample Input 1\n\n20 30 10\r\nBlue\n\nSample Output 1\n\n20\r\n\nA red pen costs 20 yen, a green pen costs 30 yen, and a blue pen costs 10 yen. Takahashi cannot buy a blue pen, but he can buy a red pen for 20 yen.\n\nSample Input 2\n\n100 100 100\r\nRed\n\nSample Output 2\n\n100\n\nSample Input 3\n\n37 39 93\r\nBlue\n\nSample Output 3\n\n37", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"20 30 10\\nBlue\\n\", \"output\": \"20\\n\", \"testtype\": \"stdin\"}, {\"input\": \"100 100 100\\nRed\\n\", \"output\": \"100\\n\", \"testtype\": \"stdin\"}, {\"input\": \"37 39 93\\nBlue\\n\", \"output\": \"37\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc364_d", "question_title": "K", "question_content": "There are N+Q points A_1,\\dots,A_N,B_1,\\dots,B_Q on a number line, where point A_i has a coordinate a_i and point B_j has a coordinate b_j.\nFor each j=1,2,\\dots,Q, answer the following question:\n\n- Let X be the point among A_1,A_2,\\dots,A_N that is the k_j-th closest to point B_j. Find the distance between points X and B_j.\r\nMore formally, let d_i be the distance between points A_i and B_j. Sort (d_1,d_2,\\dots,d_N) in ascending order to get the sequence (d_1',d_2',\\dots,d_N'). Find d_{k_j}'.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN Q\r\na_1 a_2 \\dots a_N\r\nb_1 k_1\r\nb_2 k_2\r\n\\vdots\r\nb_Q k_Q\n\nOutput\n\nPrint Q lines.\r\nThe l-th line (1 \\leq l \\leq Q) should contain the answer to the question for j=l as an integer.\n\nConstraints\n\n\n- 1 \\leq N, Q \\leq 10^5\n- -10^8 \\leq a_i, b_j \\leq 10^8\n- 1 \\leq k_j \\leq N\n- All input values are integers.\n\nSample Input 1\n\n4 3\r\n-3 -1 5 6\r\n-2 3\r\n2 1\r\n10 4\n\nSample Output 1\n\n7\r\n3\r\n13\r\n\nLet us explain the first query.\nThe distances from points A_1, A_2, A_3, A_4 to point B_1 are 1, 1, 7, 8, respectively, so the 3rd closest to point B_1 is point A_3.\r\nTherefore, print the distance between point A_3 and point B_1, which is 7.\n\nSample Input 2\n\n2 2\r\n0 0\r\n0 1\r\n0 2\n\nSample Output 2\n\n0\r\n0\r\n\nThere may be multiple points with the same coordinates.\n\nSample Input 3\n\n10 5\r\n-84 -60 -41 -100 8 -8 -52 -62 -61 -76\r\n-52 5\r\n14 4\r\n-2 6\r\n46 2\r\n26 7\n\nSample Output 3\n\n11\r\n66\r\n59\r\n54\r\n88", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"4 3\\n-3 -1 5 6\\n-2 3\\n2 1\\n10 4\\n\", \"output\": \"7\\n3\\n13\\n\", \"testtype\": \"stdin\"}, {\"input\": \"2 2\\n0 0\\n0 1\\n0 2\\n\", \"output\": \"0\\n0\\n\", \"testtype\": \"stdin\"}, {\"input\": \"10 5\\n-84 -60 -41 -100 8 -8 -52 -62 -61 -76\\n-52 5\\n14 4\\n-2 6\\n46 2\\n26 7\\n\", \"output\": \"11\\n66\\n59\\n54\\n88\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc365_b", "question_title": "Second Best", "question_content": "You are given an integer sequence A=(A_1,\\ldots,A_N) of length N. Here, A_1, A_2, \\ldots, A_N are all distinct.\nWhich element in A is the second largest?\n\nInput\n\nThe input is given from Standard Input in the following format:\nN \r\nA_1 A_2 \\ldots A_{N}\n\nOutput\n\nPrint the integer X such that the X-th element in A is the second largest.\n\nConstraints\n\n\n- 2 \\leq N \\leq 100\n- 1 \\leq A_i \\leq 10^9\n- A_1, A_2, \\ldots, A_N are all distinct.\n- All input values are integers.\n\nSample Input 1\n\n4\r\n8 2 5 1\n\nSample Output 1\n\n3\r\n\nThe second largest element in A is A_3, so print 3.\n\nSample Input 2\n\n8\r\n1 2 3 4 5 10 9 11\n\nSample Output 2\n\n6", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"4\\n8 2 5 1\\n\", \"output\": \"3\\n\", \"testtype\": \"stdin\"}, {\"input\": \"8\\n1 2 3 4 5 10 9 11\\n\", \"output\": \"6\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "3438", "question_title": "peaks-in-array", "question_content": "A peak in an array arr is an element that is greater than its previous and next element in arr.\nYou are given an integer array nums and a 2D integer array queries.\nYou have to process queries of two types:\n\nqueries[i] = [1, l_i, r_i], determine the count of peak elements in the subarray nums[l_i..r_i].\nqueries[i] = [2, index_i, val_i], change nums[index_i] to val_i.\n\nReturn an array answer containing the results of the queries of the first type in order.\nNotes:\n\nThe first and the last element of an array or a subarray cannot be a peak.\n\n \nExample 1:\n\nInput: nums = [3,1,4,2,5], queries = [[2,3,4],[1,0,4]]\nOutput: [0]\nExplanation:\nFirst query: We change nums[3] to 4 and nums becomes [3,1,4,4,5].\nSecond query: The number of peaks in the [3,1,4,4,5] is 0.\n\nExample 2:\n\nInput: nums = [4,1,4,2,1,5], queries = [[2,2,4],[1,0,2],[1,0,4]]\nOutput: [0,1]\nExplanation:\nFirst query: nums[2] should become 4, but it is already set to 4.\nSecond query: The number of peaks in the [4,1,4] is 0.\nThird query: The second 4 is a peak in the [4,1,4,2,1].\n\n \nConstraints:\n\n3 <= nums.length <= 10^5\n1 <= nums[i] <= 10^5\n1 <= queries.length <= 10^5\nqueries[i][0] == 1 or queries[i][0] == 2\nFor all i that:\n\t\nqueries[i][0] == 1: 0 <= queries[i][1] <= queries[i][2] <= nums.length - 1\nqueries[i][0] == 2: 0 <= queries[i][1] <= nums.length - 1, 1 <= queries[i][2] <= 10^5", "difficulty": "hard", "starter_code": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        ", "public_test_cases": "[{\"input\": \"[3, 1, 4, 2, 5]\\n[[2, 3, 4], [1, 0, 4]]\", \"output\": \"[0]\", \"testtype\": \"functional\"}, {\"input\": \"[4, 1, 4, 2, 1, 5]\\n[[2, 2, 4], [1, 0, 2], [1, 0, 4]]\", \"output\": \"[0, 1]\", \"testtype\": \"functional\"}]"}
{"question_id": "3527", "question_title": "alternating-groups-iii", "question_content": "There are some red and blue tiles arranged circularly. You are given an array of integers colors and a 2D integers array queries.\nThe color of tile i is represented by colors[i]:\n\ncolors[i] == 0 means that tile i is red.\ncolors[i] == 1 means that tile i is blue.\n\nAn alternating group is a contiguous subset of tiles in the circle with alternating colors (each tile in the group except the first and last one has a different color from its adjacent tiles in the group).\nYou have to process queries of two types:\n\nqueries[i] = [1, size_i], determine the count of alternating groups with size size_i.\nqueries[i] = [2, index_i, color_i], change colors[index_i] to color_i.\n\nReturn an array answer containing the results of the queries of the first type in order.\nNote that since colors represents a circle, the first and the last tiles are considered to be next to each other.\n \nExample 1:\n\nInput: colors = [0,1,1,0,1], queries = [[2,1,0],[1,4]]\nOutput: [2]\nExplanation:\n\nFirst query:\nChange colors[1] to 0.\n\nSecond query:\nCount of the alternating groups with size 4:\n\n\nExample 2:\n\nInput: colors = [0,0,1,0,1,1], queries = [[1,3],[2,3,0],[1,5]]\nOutput: [2,0]\nExplanation:\n\nFirst query:\nCount of the alternating groups with size 3:\n\nSecond query: colors will not change.\nThird query: There is no alternating group with size 5.\n\n \nConstraints:\n\n4 <= colors.length <= 5 * 10^4\n0 <= colors[i] <= 1\n1 <= queries.length <= 5 * 10^4\nqueries[i][0] == 1 or queries[i][0] == 2\nFor all i that:\n\t\nqueries[i][0] == 1: queries[i].length == 2, 3 <= queries[i][1] <= colors.length - 1\nqueries[i][0] == 2: queries[i].length == 3, 0 <= queries[i][1] <= colors.length - 1, 0 <= queries[i][2] <= 1", "difficulty": "hard", "starter_code": "class Solution:\n    def numberOfAlternatingGroups(self, colors: List[int], queries: List[List[int]]) -> List[int]:\n        ", "public_test_cases": "[{\"input\": \"[0, 1, 1, 0, 1]\\n[[2, 1, 0], [1, 4]]\", \"output\": \"[2]\", \"testtype\": \"functional\"}, {\"input\": \"[0, 0, 1, 0, 1, 1]\\n[[1, 3], [2, 3, 0], [1, 5]]\", \"output\": \"[2, 0]\", \"testtype\": \"functional\"}]"}
{"question_id": "2777", "question_title": "find-the-distinct-difference-array", "question_content": "You are given a 0-indexed array nums of length n.\nThe distinct difference array of nums is an array diff of length n such that diff[i] is equal to the number of distinct elements in the suffix nums[i + 1, ..., n - 1] subtracted from the number of distinct elements in the prefix nums[0, ..., i].\nReturn the distinct difference array of nums.\nNote that nums[i, ..., j] denotes the subarray of nums starting at index i and ending at index j inclusive. Particularly, if i > j then nums[i, ..., j] denotes an empty subarray.\n \nExample 1:\n\nInput: nums = [1,2,3,4,5]\nOutput: [-3,-1,1,3,5]\nExplanation: For index i = 0, there is 1 element in the prefix and 4 distinct elements in the suffix. Thus, diff[0] = 1 - 4 = -3.\nFor index i = 1, there are 2 distinct elements in the prefix and 3 distinct elements in the suffix. Thus, diff[1] = 2 - 3 = -1.\nFor index i = 2, there are 3 distinct elements in the prefix and 2 distinct elements in the suffix. Thus, diff[2] = 3 - 2 = 1.\nFor index i = 3, there are 4 distinct elements in the prefix and 1 distinct element in the suffix. Thus, diff[3] = 4 - 1 = 3.\nFor index i = 4, there are 5 distinct elements in the prefix and no elements in the suffix. Thus, diff[4] = 5 - 0 = 5.\n\nExample 2:\n\nInput: nums = [3,2,3,4,2]\nOutput: [-2,-1,0,2,3]\nExplanation: For index i = 0, there is 1 element in the prefix and 3 distinct elements in the suffix. Thus, diff[0] = 1 - 3 = -2.\nFor index i = 1, there are 2 distinct elements in the prefix and 3 distinct elements in the suffix. Thus, diff[1] = 2 - 3 = -1.\nFor index i = 2, there are 2 distinct elements in the prefix and 2 distinct elements in the suffix. Thus, diff[2] = 2 - 2 = 0.\nFor index i = 3, there are 3 distinct elements in the prefix and 1 distinct element in the suffix. Thus, diff[3] = 3 - 1 = 2.\nFor index i = 4, there are 3 distinct elements in the prefix and no elements in the suffix. Thus, diff[4] = 3 - 0 = 3.\n\n \nConstraints:\n\n1 <= n == nums.length <= 50\n1 <= nums[i] <= 50", "difficulty": "easy", "starter_code": "class Solution:\n    def distinctDifferenceArray(self, nums: List[int]) -> List[int]:\n        ", "public_test_cases": "[{\"input\": \"[1, 2, 3, 4, 5]\", \"output\": \"[-3, -1, 1, 3, 5]\", \"testtype\": \"functional\"}, {\"input\": \"[3, 2, 3, 4, 2]\", \"output\": \"[-2, -1, 0, 2, 3]\", \"testtype\": \"functional\"}]"}
{"question_id": "2779", "question_title": "number-of-adjacent-elements-with-the-same-color", "question_content": "There is a 0-indexed array nums of length n. Initially, all elements are uncolored (has a value of 0).\nYou are given a 2D integer array queries where queries[i] = [index_i, color_i].\nFor each query, you color the index index_i with the color color_i in the array nums.\nReturn an array answer of the same length as queries where answer[i] is the number of adjacent elements with the same color after the i^th query.\nMore formally, answer[i] is the number of indices j, such that 0 <= j < n - 1 and nums[j] == nums[j + 1] and nums[j] != 0 after the i^th query.\n \nExample 1:\n\nInput: n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]]\nOutput: [0,1,1,0,2]\nExplanation: Initially array nums = [0,0,0,0], where 0 denotes uncolored elements of the array.\n- After the 1^st query nums = [2,0,0,0]. The count of adjacent elements with the same color is 0.\n- After the 2^nd query nums = [2,2,0,0]. The count of adjacent elements with the same color is 1.\n- After the 3^rd query nums = [2,2,0,1]. The count of adjacent elements with the same color is 1.\n- After the 4^th query nums = [2,1,0,1]. The count of adjacent elements with the same color is 0.\n- After the 5^th query nums = [2,1,1,1]. The count of adjacent elements with the same color is 2.\n\nExample 2:\n\nInput: n = 1, queries = [[0,100000]]\nOutput: [0]\nExplanation: Initially array nums = [0], where 0 denotes uncolored elements of the array.\n- After the 1^st query nums = [100000]. The count of adjacent elements with the same color is 0.\n\n \nConstraints:\n\n1 <= n <= 10^5\n1 <= queries.length <= 10^5\nqueries[i].length == 2\n0 <= index_i <= n - 1\n1 <=  color_i <= 10^5", "difficulty": "medium", "starter_code": "class Solution:\n    def colorTheArray(self, n: int, queries: List[List[int]]) -> List[int]:\n        ", "public_test_cases": "[{\"input\": \"4\\n[[0, 2], [1, 2], [3, 1], [1, 1], [2, 1]]\", \"output\": \"[0, 1, 1, 0, 2]\", \"testtype\": \"functional\"}, {\"input\": \"1\\n[[0, 100000]]\", \"output\": \"[0]\", \"testtype\": \"functional\"}]"}
{"question_id": "2833", "question_title": "count-zero-request-servers", "question_content": "You are given an integer n denoting the total number of servers and a 2D 0-indexed integer array logs, where logs[i] = [server_id, time] denotes that the server with id server_id received a request at time time.\nYou are also given an integer x and a 0-indexed integer array queries.\nReturn a 0-indexed integer array arr of length queries.length where arr[i] represents the number of servers that did not receive any requests during the time interval [queries[i] - x, queries[i]].\nNote that the time intervals are inclusive.\n \nExample 1:\n\nInput: n = 3, logs = [[1,3],[2,6],[1,5]], x = 5, queries = [10,11]\nOutput: [1,2]\nExplanation: \nFor queries[0]: The servers with ids 1 and 2 get requests in the duration of [5, 10]. Hence, only server 3 gets zero requests.\nFor queries[1]: Only the server with id 2 gets a request in duration of [6,11]. Hence, the servers with ids 1 and 3 are the only servers that do not receive any requests during that time period.\n\n\nExample 2:\n\nInput: n = 3, logs = [[2,4],[2,1],[1,2],[3,1]], x = 2, queries = [3,4]\nOutput: [0,1]\nExplanation: \nFor queries[0]: All servers get at least one request in the duration of [1, 3].\nFor queries[1]: Only server with id 3 gets no request in the duration [2,4].\n\n\n \nConstraints:\n\n1 <= n <= 10^5\n1 <= logs.length <= 10^5\n1 <= queries.length <= 10^5\nlogs[i].length == 2\n1 <= logs[i][0] <= n\n1 <= logs[i][1] <= 10^6\n1 <= x <= 10^5\nx < queries[i] <= 10^6", "difficulty": "medium", "starter_code": "class Solution:\n    def countServers(self, n: int, logs: List[List[int]], x: int, queries: List[int]) -> List[int]:\n        ", "public_test_cases": "[{\"input\": \"3\\n[[1, 3], [2, 6], [1, 5]]\\n5\\n[10, 11]\", \"output\": \"[1, 2]\", \"testtype\": \"functional\"}, {\"input\": \"3\\n[[2, 4], [2, 1], [1, 2], [3, 1]]\\n2\\n[3, 4]\", \"output\": \"[0, 1]\", \"testtype\": \"functional\"}]"}
{"question_id": "2834", "question_title": "relocate-marbles", "question_content": "You are given a 0-indexed integer array nums representing the initial positions of some marbles. You are also given two 0-indexed integer arrays moveFrom and moveTo of equal length.\nThroughout moveFrom.length steps, you will change the positions of the marbles. On the i^th step, you will move all marbles at position moveFrom[i] to position moveTo[i].\nAfter completing all the steps, return the sorted list of occupied positions.\nNotes:\n\nWe call a position occupied if there is at least one marble in that position.\nThere may be multiple marbles in a single position.\n\n \nExample 1:\n\nInput: nums = [1,6,7,8], moveFrom = [1,7,2], moveTo = [2,9,5]\nOutput: [5,6,8,9]\nExplanation: Initially, the marbles are at positions 1,6,7,8.\nAt the i = 0th step, we move the marbles at position 1 to position 2. Then, positions 2,6,7,8 are occupied.\nAt the i = 1st step, we move the marbles at position 7 to position 9. Then, positions 2,6,8,9 are occupied.\nAt the i = 2nd step, we move the marbles at position 2 to position 5. Then, positions 5,6,8,9 are occupied.\nAt the end, the final positions containing at least one marbles are [5,6,8,9].\nExample 2:\n\nInput: nums = [1,1,3,3], moveFrom = [1,3], moveTo = [2,2]\nOutput: [2]\nExplanation: Initially, the marbles are at positions [1,1,3,3].\nAt the i = 0th step, we move all the marbles at position 1 to position 2. Then, the marbles are at positions [2,2,3,3].\nAt the i = 1st step, we move all the marbles at position 3 to position 2. Then, the marbles are at positions [2,2,2,2].\nSince 2 is the only occupied position, we return [2].\n\n \nConstraints:\n\n1 <= nums.length <= 10^5\n1 <= moveFrom.length <= 10^5\nmoveFrom.length == moveTo.length\n1 <= nums[i], moveFrom[i], moveTo[i] <= 10^9\nThe test cases are generated such that there is at least a marble in moveFrom[i] at the moment we want to apply the i^th move.", "difficulty": "medium", "starter_code": "class Solution:\n    def relocateMarbles(self, nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n        ", "public_test_cases": "[{\"input\": \"[1, 6, 7, 8]\\n[1, 7, 2]\\n[2, 9, 5]\", \"output\": \"[5, 6, 8, 9]\", \"testtype\": \"functional\"}, {\"input\": \"[1, 1, 3, 3]\\n[1, 3]\\n[2, 2]\", \"output\": \"[2]\", \"testtype\": \"functional\"}]"}
{"question_id": "2839", "question_title": "maximum-sum-queries", "question_content": "You are given two 0-indexed integer arrays nums1 and nums2, each of length n, and a 1-indexed 2D array queries where queries[i] = [x_i, y_i].\nFor the i^th query, find the maximum value of nums1[j] + nums2[j] among all indices j (0 <= j < n), where nums1[j] >= x_i and nums2[j] >= y_i, or -1 if there is no j satisfying the constraints.\nReturn an array answer where answer[i] is the answer to the i^th query.\n \nExample 1:\n\nInput: nums1 = [4,3,1,2], nums2 = [2,4,9,5], queries = [[4,1],[1,3],[2,5]]\nOutput: [6,10,7]\nExplanation: \nFor the 1st query x_i = 4 and y_i = 1, we can select index j = 0 since nums1[j] >= 4 and nums2[j] >= 1. The sum nums1[j] + nums2[j] is 6, and we can show that 6 is the maximum we can obtain.\n\nFor the 2nd query x_i = 1 and y_i = 3, we can select index j = 2 since nums1[j] >= 1 and nums2[j] >= 3. The sum nums1[j] + nums2[j] is 10, and we can show that 10 is the maximum we can obtain. \n\nFor the 3rd query x_i = 2 and y_i = 5, we can select index j = 3 since nums1[j] >= 2 and nums2[j] >= 5. The sum nums1[j] + nums2[j] is 7, and we can show that 7 is the maximum we can obtain.\n\nTherefore, we return [6,10,7].\n\nExample 2:\n\nInput: nums1 = [3,2,5], nums2 = [2,3,4], queries = [[4,4],[3,2],[1,1]]\nOutput: [9,9,9]\nExplanation: For this example, we can use index j = 2 for all the queries since it satisfies the constraints for each query.\n\nExample 3:\n\nInput: nums1 = [2,1], nums2 = [2,3], queries = [[3,3]]\nOutput: [-1]\nExplanation: There is one query in this example with x_i = 3 and y_i = 3. For every index, j, either nums1[j] < x_i or nums2[j] < y_i. Hence, there is no solution. \n\n \nConstraints:\n\nnums1.length == nums2.length \nn == nums1.length \n1 <= n <= 10^5\n1 <= nums1[i], nums2[i] <= 10^9 \n1 <= queries.length <= 10^5\nqueries[i].length == 2\nx_i == queries[i][1]\ny_i == queries[i][2]\n1 <= x_i, y_i <= 10^9", "difficulty": "hard", "starter_code": "class Solution:\n    def maximumSumQueries(self, nums1: List[int], nums2: List[int], queries: List[List[int]]) -> List[int]:\n        ", "public_test_cases": "[{\"input\": \"[4, 3, 1, 2]\\n[2, 4, 9, 5]\\n[[4, 1], [1, 3], [2, 5]]\", \"output\": \"[6, 10, 7]\", \"testtype\": \"functional\"}, {\"input\": \"[3, 2, 5]\\n[2, 3, 4]\\n[[4, 4], [3, 2], [1, 1]]\", \"output\": \"[9, 9, 9]\", \"testtype\": \"functional\"}, {\"input\": \"[2, 1]\\n[2, 3]\\n[[3, 3]]\", \"output\": \"[-1]\", \"testtype\": \"functional\"}]"}
{"question_id": "2876", "question_title": "number-of-employees-who-met-the-target", "question_content": "There are n employees in a company, numbered from 0 to n - 1. Each employee i has worked for hours[i] hours in the company.\nThe company requires each employee to work for at least target hours.\nYou are given a 0-indexed array of non-negative integers hours of length n and a non-negative integer target.\nReturn the integer denoting the number of employees who worked at least target hours.\n \nExample 1:\n\nInput: hours = [0,1,2,3,4], target = 2\nOutput: 3\nExplanation: The company wants each employee to work for at least 2 hours.\n- Employee 0 worked for 0 hours and didn't meet the target.\n- Employee 1 worked for 1 hours and didn't meet the target.\n- Employee 2 worked for 2 hours and met the target.\n- Employee 3 worked for 3 hours and met the target.\n- Employee 4 worked for 4 hours and met the target.\nThere are 3 employees who met the target.\n\nExample 2:\n\nInput: hours = [5,1,4,2,2], target = 6\nOutput: 0\nExplanation: The company wants each employee to work for at least 6 hours.\nThere are 0 employees who met the target.\n\n \nConstraints:\n\n1 <= n == hours.length <= 50\n0 <= hours[i], target <= 10^5", "difficulty": "easy", "starter_code": "class Solution:\n    def numberOfEmployeesWhoMetTarget(self, hours: List[int], target: int) -> int:\n        ", "public_test_cases": "[{\"input\": \"[0, 1, 2, 3, 4]\\n2\", \"output\": \"3\", \"testtype\": \"functional\"}, {\"input\": \"[5, 1, 4, 2, 2]\\n6\", \"output\": \"0\", \"testtype\": \"functional\"}]"}
{"question_id": "2902", "question_title": "max-pair-sum-in-an-array", "question_content": "You are given a 0-indexed integer array nums. You have to find the maximum sum of a pair of numbers from nums such that the maximum digit in both numbers are equal.\nReturn the maximum sum or -1 if no such pair exists.\n \nExample 1:\n\nInput: nums = [51,71,17,24,42]\nOutput: 88\nExplanation: \nFor i = 1 and j = 2, nums[i] and nums[j] have equal maximum digits with a pair sum of 71 + 17 = 88. \nFor i = 3 and j = 4, nums[i] and nums[j] have equal maximum digits with a pair sum of 24 + 42 = 66.\nIt can be shown that there are no other pairs with equal maximum digits, so the answer is 88.\nExample 2:\n\nInput: nums = [1,2,3,4]\nOutput: -1\nExplanation: No pair exists in nums with equal maximum digits.\n\n \nConstraints:\n\n2 <= nums.length <= 100\n1 <= nums[i] <= 10^4", "difficulty": "easy", "starter_code": "class Solution:\n    def maxSum(self, nums: List[int]) -> int:\n        ", "public_test_cases": "[{\"input\": \"[51, 71, 17, 24, 42]\", \"output\": \"88\", \"testtype\": \"functional\"}, {\"input\": \"[1, 2, 3, 4]\", \"output\": \"-1\", \"testtype\": \"functional\"}]"}
{"question_id": "3034", "question_title": "points-that-intersect-with-cars", "question_content": "You are given a 0-indexed 2D integer array nums representing the coordinates of the cars parking on a number line. For any index i, nums[i] = [start_i, end_i] where start_i is the starting point of the i^th car and end_i is the ending point of the i^th car.\nReturn the number of integer points on the line that are covered with any part of a car.\n \nExample 1:\n\nInput: nums = [[3,6],[1,5],[4,7]]\nOutput: 7\nExplanation: All the points from 1 to 7 intersect at least one car, therefore the answer would be 7.\n\nExample 2:\n\nInput: nums = [[1,3],[5,8]]\nOutput: 7\nExplanation: Points intersecting at least one car are 1, 2, 3, 5, 6, 7, 8. There are a total of 7 points, therefore the answer would be 7.\n\n \nConstraints:\n\n1 <= nums.length <= 100\nnums[i].length == 2\n1 <= start_i <= end_i <= 100", "difficulty": "easy", "starter_code": "class Solution:\n    def numberOfPoints(self, nums: List[List[int]]) -> int:\n        ", "public_test_cases": "[{\"input\": \"[[3, 6], [1, 5], [4, 7]]\", \"output\": \"7\", \"testtype\": \"functional\"}, {\"input\": \"[[1, 3], [5, 8]]\", \"output\": \"7\", \"testtype\": \"functional\"}]"}
{"question_id": "3206", "question_title": "find-common-elements-between-two-arrays", "question_content": "You are given two 0-indexed integer arrays nums1 and nums2 of sizes n and m, respectively.\nConsider calculating the following values:\n\nThe number of indices i such that 0 <= i < n and nums1[i] occurs at least once in nums2.\nThe number of indices i such that 0 <= i < m and nums2[i] occurs at least once in nums1.\n\nReturn an integer array answer of size 2 containing the two values in the above order.\n \nExample 1:\n\nInput: nums1 = [4,3,2,3,1], nums2 = [2,2,5,2,3,6]\nOutput: [3,4]\nExplanation: We calculate the values as follows:\n- The elements at indices 1, 2, and 3 in nums1 occur at least once in nums2. So the first value is 3.\n- The elements at indices 0, 1, 3, and 4 in nums2 occur at least once in nums1. So the second value is 4.\n\nExample 2:\n\nInput: nums1 = [3,4,2,3], nums2 = [1,5]\nOutput: [0,0]\nExplanation: There are no common elements between the two arrays, so the two values will be 0.\n\n \nConstraints:\n\nn == nums1.length\nm == nums2.length\n1 <= n, m <= 100\n1 <= nums1[i], nums2[i] <= 100", "difficulty": "easy", "starter_code": "class Solution:\n    def findIntersectionValues(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        ", "public_test_cases": "[{\"input\": \"[4, 3, 2, 3, 1]\\n[2, 2, 5, 2, 3, 6]\", \"output\": \"[3, 4]\", \"testtype\": \"functional\"}, {\"input\": \"[3, 4, 2, 3]\\n[1, 5]\", \"output\": \"[0, 0]\", \"testtype\": \"functional\"}]"}
{"question_id": "3242", "question_title": "count-elements-with-maximum-frequency", "question_content": "You are given an array nums consisting of positive integers.\nReturn the total frequencies of elements in nums such that those elements all have the maximum frequency.\nThe frequency of an element is the number of occurrences of that element in the array.\n \nExample 1:\n\nInput: nums = [1,2,2,3,1,4]\nOutput: 4\nExplanation: The elements 1 and 2 have a frequency of 2 which is the maximum frequency in the array.\nSo the number of elements in the array with maximum frequency is 4.\n\nExample 2:\n\nInput: nums = [1,2,3,4,5]\nOutput: 5\nExplanation: All elements of the array have a frequency of 1 which is the maximum.\nSo the number of elements in the array with maximum frequency is 5.\n\n \nConstraints:\n\n1 <= nums.length <= 100\n1 <= nums[i] <= 100", "difficulty": "easy", "starter_code": "class Solution:\n    def maxFrequencyElements(self, nums: List[int]) -> int:\n        ", "public_test_cases": "[{\"input\": \"[1, 2, 2, 3, 1, 4]\", \"output\": \"4\", \"testtype\": \"functional\"}, {\"input\": \"[1, 2, 3, 4, 5]\", \"output\": \"5\", \"testtype\": \"functional\"}]"}
{"question_id": "abc304_d", "question_title": "A Piece of Cake", "question_content": "There is a rectangular cake with some strawberries on the xy-plane. The cake occupies the rectangular area \\lbrace (x, y) : 0 \\leq x \\leq W, 0 \\leq y \\leq H \\rbrace.\nThere are N strawberries on the cake, and the coordinates of the i-th strawberry are (p_i, q_i) for i = 1, 2, \\ldots, N. No two strawberries have the same coordinates.\nTakahashi will cut the cake into several pieces with a knife, as follows.\n\n- First, cut the cake along A different lines parallel to the y-axis: lines x = a_1, x = a_2, \\ldots, x = a_A.\n- Next, cut the cake along B different lines parallel to the x-axis: lines y = b_1, y = b_2, \\ldots, y = b_B.\n\nAs a result, the cake will be divided into (A+1)(B+1) rectangular pieces. Takahashi will choose just one of these pieces to eat. Print the minimum and maximum possible numbers of strawberries on the chosen piece.\nHere, it is guaranteed that there are no strawberries along the edges of the final pieces. For a more formal description, refer to the constraints below.\n\nInput\n\nThe input is given from Standard Input in the following format:\nW H\nN\np_1 q_1\np_2 q_2\n\\vdots\np_N q_N\nA\na_1 a_2 \\ldots a_A\nB\nb_1 b_2 \\ldots b_B\n\nOutput\n\nPrint the minimum possible number of strawberries m and the maximum possible number M on the chosen piece in the following format, separated by a space.\nm M\n\nConstraints\n\n\n- 3 \\leq W, H \\leq 10^9\n- 1 \\leq N \\leq 2 \\times 10^5\n- 0 \\lt p_i \\lt W\n- 0 \\lt q_i \\lt H\n- i \\neq j \\implies (p_i, q_i) \\neq (p_j, q_j)\n- 1 \\leq A, B \\leq 2 \\times 10^5\n- 0 \\lt a_1 \\lt a_2 \\lt \\cdots \\lt a_A \\lt W\n- 0 \\lt b_1 \\lt b_2 \\lt \\cdots \\lt b_B \\lt H\n- p_i \\not \\in \\lbrace a_1, a_2, \\ldots, a_A \\rbrace\n- q_i \\not \\in \\lbrace b_1, b_2, \\ldots, b_B \\rbrace\n- All input values are integers.\n\nSample Input 1\n\n7 6\n5\n6 1\n3 1\n4 2\n1 5\n6 2\n2\n2 5\n2\n3 4\n\nSample Output 1\n\n0 2\n\nThere are nine pieces in total: six with zero strawberries, one with one strawberry, and two with two strawberries. Therefore, when choosing just one of these pieces to eat, the minimum possible number of strawberries on the chosen piece is 0, and the maximum possible number is 2.\n\nSample Input 2\n\n4 4\n4\n1 1\n3 1\n3 3\n1 3\n1\n2\n1\n2\n\nSample Output 2\n\n1 1\n\nEach piece has one strawberry on it.", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"7 6\\n5\\n6 1\\n3 1\\n4 2\\n1 5\\n6 2\\n2\\n2 5\\n2\\n3 4\\n\", \"output\": \"0 2\\n\", \"testtype\": \"stdin\"}, {\"input\": \"4 4\\n4\\n1 1\\n3 1\\n3 3\\n1 3\\n1\\n2\\n1\\n2\\n\", \"output\": \"1 1\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc306_b", "question_title": "Base 2", "question_content": "You are given a sequence A=(A_0,A_1,\\dots,A_{63}) of length 64 consisting of 0 and 1.\nFind A_0 2^0 + A_1 2^1 + \\dots + A_{63} 2^{63}.\n\nInput\n\nThe input is given from Standard Input in the following format:\nA_0 A_1 \\dots A_{63}\n\nOutput\n\nPrint the answer as an integer.\n\nConstraints\n\n\n- A_i is 0 or 1.\n\nSample Input 1\n\n1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\nSample Output 1\n\n13\n\nA_0 2^0 + A_1 2^1 + \\dots + A_{63} 2^{63} = 2^0 + 2^2 + 2^3 = 13.\n\nSample Input 2\n\n1 0 1 0 1 0 0 0 0 1 0 0 1 1 0 1 1 1 1 0 0 0 1 0 0 1 1 1 1 1 1 0 0 0 0 1 0 1 0 1 0 1 1 1 1 0 0 1 1 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0\n\nSample Output 2\n\n766067858140017173", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\", \"output\": \"13\\n\", \"testtype\": \"stdin\"}, {\"input\": \"1 0 1 0 1 0 0 0 0 1 0 0 1 1 0 1 1 1 1 0 0 0 1 0 0 1 1 1 1 1 1 0 0 0 0 1 0 1 0 1 0 1 1 1 1 0 0 1 1 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0\\n\", \"output\": \"766067858140017173\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc306_e", "question_title": "Best Performances", "question_content": "We have a sequence A=(A_1,A_2,\\dots,A_N) of length N.  Initially, all the terms are 0.\r\nUsing an integer K given in the input, we define a function f(A) as follows:\n\n- Let B be the sequence obtained by sorting A in descending order (so that it becomes monotonically non-increasing).\n- Then, let f(A)=B_1 + B_2 + \\dots + B_K.\n\nWe consider applying Q updates on this sequence.\r\nApply the following operation on the sequence A for i=1,2,\\dots,Q in this order, and print the value f(A) at that point after each update.  \n\n- Change A_{X_i} to Y_i.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN K Q\r\nX_1 Y_1\r\nX_2 Y_2\r\n\\vdots\r\nX_Q Y_Q\n\nOutput\n\nPrint Q lines in total.  The i-th line should contain the value f(A) as an integer when the i-th update has ended.\n\nConstraints\n\n\n- All input values are integers.\n- 1 \\le K \\le N \\le 5 \\times 10^5\n- 1 \\le Q \\le 5 \\times 10^5\n- 1 \\le X_i \\le N\n- 0 \\le Y_i \\le 10^9\n\nSample Input 1\n\n4 2 10\r\n1 5\r\n2 1\r\n3 3\r\n4 2\r\n2 10\r\n1 0\r\n4 0\r\n3 1\r\n2 0\r\n3 0\n\nSample Output 1\n\n5\r\n6\r\n8\r\n8\r\n15\r\n13\r\n13\r\n11\r\n1\r\n0\r\n\nIn this input, N=4 and K=2.  Q=10 updates are applied.\n\n- The 1-st update makes A=(5, 0,0,0).  Now, f(A)=5.\n- The 2-nd update makes A=(5, 1,0,0).  Now, f(A)=6.\n- The 3-rd update makes A=(5, 1,3,0).  Now, f(A)=8.\n- The 4-th update makes A=(5, 1,3,2).  Now, f(A)=8.\n- The 5-th update makes A=(5,10,3,2).  Now, f(A)=15.\n- The 6-th update makes A=(0,10,3,2).  Now, f(A)=13.\n- The 7-th update makes A=(0,10,3,0).  Now, f(A)=13.\n- The 8-th update makes A=(0,10,1,0).  Now, f(A)=11.\n- The 9-th update makes A=(0, 0,1,0).  Now, f(A)=1.\n- The 10-th update makes A=(0, 0,0,0).  Now, f(A)=0.", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"4 2 10\\n1 5\\n2 1\\n3 3\\n4 2\\n2 10\\n1 0\\n4 0\\n3 1\\n2 0\\n3 0\\n\", \"output\": \"5\\n6\\n8\\n8\\n15\\n13\\n13\\n11\\n1\\n0\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc307_a", "question_title": "Weekly Records", "question_content": "Takahashi has recorded the number of steps he walked for N weeks. He walked A_i steps on the i-th day.\nFind the total number of steps Takahashi walked each week.\r\nMore precisely, find the sum of the steps for the first week (the 1-st through 7-th day), the sum of the steps for the second week (the 8-th through 14-th day), and so on.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nA_1 A_2 \\ldots A_{7N}\n\nOutput\n\nLet B_i be the number of steps walked for the i-th week. Print B_1,B_2,\\ldots,B_N in this order, separated by spaces.\n\nConstraints\n\n\n- 1 \\leq N \\leq 10\n- 0 \\leq A_i \\leq 10^5\n- All input values are integers.\n\nSample Input 1\n\n2\r\n1000 2000 3000 4000 5000 6000 7000 2000 3000 4000 5000 6000 7000 8000\n\nSample Output 1\n\n28000 35000\r\n\nFor the first week, he walked 1000+2000+3000+4000+5000+6000+7000=28000 steps, and for the second week, he walked 2000+3000+4000+5000+6000+7000+8000=35000 steps.\n\nSample Input 2\n\n3\r\n14159 26535 89793 23846 26433 83279 50288 41971 69399 37510 58209 74944 59230 78164 6286 20899 86280 34825 34211 70679 82148\n\nSample Output 2\n\n314333 419427 335328", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"2\\n1000 2000 3000 4000 5000 6000 7000 2000 3000 4000 5000 6000 7000 8000\\n\", \"output\": \"28000 35000\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3\\n14159 26535 89793 23846 26433 83279 50288 41971 69399 37510 58209 74944 59230 78164 6286 20899 86280 34825 34211 70679 82148\\n\", \"output\": \"314333 419427 335328\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc308_a", "question_title": "New Scheme", "question_content": "Given eight integers S_1,S_2,\\dots, and S_8,\r\nprint Yes if they satisfy all of the following three conditions, and No otherwise.\n\n- The sequence (S_1,S_2,\\dots,S_8) is monotonically non-decreasing.  In other words, S_1 \\leq S_2 \\leq \\dots \\leq S_8.\n- S_1,S_2,\\dots, and S_8 are all between 100 and 675, inclusive.\n- S_1,S_2,\\dots, and S_8 are all multiples of 25.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS_1 S_2 \\dots S_8\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- 0\\leq S_i \\leq 1000\n- All input values are integers.\n\nSample Input 1\n\n125 175 250 300 400 525 600 650\n\nSample Output 1\n\nYes\r\n\nThey satisfy all of the three conditions.\n\nSample Input 2\n\n100 250 300 400 325 575 625 675\n\nSample Output 2\n\nNo\r\n\nThey violate the first condition because S_4 > S_5.\n\nSample Input 3\n\n0 23 24 145 301 413 631 632\n\nSample Output 3\n\nNo\r\n\nThey violate the second and third conditions.", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"125 175 250 300 400 525 600 650\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"100 250 300 400 325 575 625 675\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}, {\"input\": \"0 23 24 145 301 413 631 632\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc308_b", "question_title": "Default Price", "question_content": "Takahashi ate N plates of sushi at a sushi restaurant.  The color of the i-th plate is represented by a string C_i.\nThe price of a sushi corresponds to the color of the plate.  For each i=1,\\ldots,M, the sushi on a plate whose color is represented by a string D_i is worth P_i yen a plate (yen is the currency of Japan).  If the color does not coincide with any of D_1,\\ldots, and D_M, it is worth P_0 yen a plate.\nFind the total amount of the prices of sushi that Takahashi ate.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN M\r\nC_1 \\ldots C_N\r\nD_1 \\ldots D_M\r\nP_0 P_1 \\ldots P_M\n\nOutput\n\nPrint the answer as an integer.\n\nConstraints\n\n\n- 1\\leq N,M\\leq 100\n- C_i and D_i are strings of length between 1 and 20, inclusive, consisting of lowercase English letters.\n- D_1,\\ldots, and D_M are distinct.\n- 1\\leq P_i\\leq 10000\n- N, M, and P_i are integers.\n\nSample Input 1\n\n3 2\r\nred green blue\r\nblue red\r\n800 1600 2800\n\nSample Output 1\n\n5200\r\n\nA blue plate, red plate, and green plate are worth P_1 = 1600, P_2 = 2800, and P_0 = 800 yen, respectively.\nThe total amount of the prices of the sushi that he ate is 2800+800+1600=5200 yen.\n\nSample Input 2\n\n3 2\r\ncode queen atcoder\r\nking queen\r\n10 1 1\n\nSample Output 2\n\n21", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"3 2\\nred green blue\\nblue red\\n800 1600 2800\\n\", \"output\": \"5200\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3 2\\ncode queen atcoder\\nking queen\\n10 1 1\\n\", \"output\": \"21\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc309_b", "question_title": "Rotate", "question_content": "You are given a grid with N rows and N columns.  An integer A_{i, j} is written on the square at the i-th row from the top and j-th column from the left.  Here, it is guaranteed that A_{i,j} is either 0 or 1.\nShift the integers written on the outer squares clockwise by one square each, and print the resulting grid.\nHere, the outer squares are those in at least one of the 1-st row, N-th row, 1-st column, and N-th column.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nA_{1,1}A_{1,2}\\dots A_{1,N}\r\nA_{2,1}A_{2,2}\\dots A_{2,N}\r\n\\vdots\r\nA_{N,1}A_{N,2}\\dots A_{N,N}\n\nOutput\n\nLet B_{i,j} be the integer written on the square at the i-th row from the top and j-th column from the left in the grid resulting from shifting the outer squares clockwise by one square each.  Print them in the following format:\nB_{1,1}B_{1,2}\\dots B_{1,N}\r\nB_{2,1}B_{2,2}\\dots B_{2,N}\r\n\\vdots\r\nB_{N,1}B_{N,2}\\dots B_{N,N}\n\nConstraints\n\n\n- 2 \\le N \\le 100\n- 0 \\le A_{i,j} \\le 1(1 \\le i,j \\le N)\n- All input values are integers.\n\nSample Input 1\n\n4\r\n0101\r\n1101\r\n1111\r\n0000\n\nSample Output 1\n\n1010\r\n1101\r\n0111\r\n0001\r\n\nWe denote by (i,j) the square at the i-th row from the top and j-th column from the left.\nThe outer squares, in clockwise order starting from (1,1), are the following 12 squares: (1,1),(1,2),(1,3),(1,4),(2,4),(3,4),(4,4),(4,3),(4,2),(4,1),(3,1), and (2,1).\nThe sample output shows the resulting grid after shifting the integers written on those squares clockwise by one square.\n\nSample Input 2\n\n2\r\n11\r\n11\n\nSample Output 2\n\n11\r\n11\n\nSample Input 3\n\n5\r\n01010\r\n01001\r\n10110\r\n00110\r\n01010\n\nSample Output 3\n\n00101\r\n11000\r\n00111\r\n00110\r\n10100", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"4\\n0101\\n1101\\n1111\\n0000\\n\", \"output\": \"1010\\n1101\\n0111\\n0001\\n\", \"testtype\": \"stdin\"}, {\"input\": \"2\\n11\\n11\\n\", \"output\": \"11\\n11\\n\", \"testtype\": \"stdin\"}, {\"input\": \"5\\n01010\\n01001\\n10110\\n00110\\n01010\\n\", \"output\": \"00101\\n11000\\n00111\\n00110\\n10100\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc314_b", "question_title": "Roulette", "question_content": "N people, person 1, person 2, \\ldots, person N, are playing roulette.\r\nThe outcome of a spin is one of the 37 integers from 0 to 36.\r\nFor each i = 1, 2, \\ldots, N, person i has bet on C_i of the 37 possible outcomes: A_{i, 1}, A_{i, 2}, \\ldots, A_{i, C_i}.\nThe wheel has been spun, and the outcome is X.\r\nPrint the numbers of all people who have bet on X with the fewest bets, in ascending order.\nMore formally, print all integers i between 1 and N, inclusive, that satisfy both of the following conditions, in ascending order:\n\n- Person i has bet on X.\n- For each j = 1, 2, \\ldots, N, if person j has bet on X, then C_i \\leq C_j.\n\nNote that there may be no number to print (see Sample Input 2).\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nC_1\r\nA_{1, 1} A_{1, 2} \\ldots A_{1, C_1}\r\nC_2\r\nA_{2, 1} A_{2, 2} \\ldots A_{2, C_2}\r\n\\vdots\r\nC_N\r\nA_{N, 1} A_{N, 2} \\ldots A_{N, C_N}\r\nX\n\nOutput\n\nLet B_1, B_2, \\ldots, B_K be the sequence of numbers to be printed in ascending order.\r\nUsing the following format, print the count of numbers to be printed, K, on the first line,\r\nand B_1, B_2, \\ldots, B_K separated by spaces on the second line:\nK\r\nB_1 B_2 \\ldots B_K\n\nConstraints\n\n\n- 1 \\leq N \\leq 100\n- 1 \\leq C_i \\leq 37\n- 0 \\leq A_{i, j} \\leq 36\n- A_{i, 1}, A_{i, 2}, \\ldots, A_{i, C_i} are all different for each i = 1, 2, \\ldots, N.\n- 0 \\leq X \\leq 36\n- All input values are integers.\n\nSample Input 1\n\n4\r\n3\r\n7 19 20\r\n4\r\n4 19 24 0\r\n2\r\n26 10\r\n3\r\n19 31 24\r\n19\n\nSample Output 1\n\n2\r\n1 4\r\n\nThe wheel has been spun, and the outcome is 19.\r\nThe people who has bet on 19 are person 1, person 2, and person 4, and the number of their bets are 3, 4, and 3, respectively.\r\nTherefore, among the people who has bet on 19, the ones with the fewest bets are person 1 and person 4.\n\nSample Input 2\n\n3\r\n1\r\n1\r\n1\r\n2\r\n1\r\n3\r\n0\n\nSample Output 2\n\n0\r\n\r\n\nThe wheel has been spun and the outcome is 0, but no one has bet on 0, so there is no number to print.", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"4\\n3\\n7 19 20\\n4\\n4 19 24 0\\n2\\n26 10\\n3\\n19 31 24\\n19\\n\", \"output\": \"2\\n1 4\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3\\n1\\n1\\n1\\n2\\n1\\n3\\n0\\n\", \"output\": \"0\\n\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc314_d", "question_title": "LOWER", "question_content": "You are given a string S of length N consisting of uppercase and lowercase English letters.\nLet us perform Q operations on the string S.\nThe i-th operation (1\\leq i\\leq Q) is represented by a tuple (t _ i,x _ i,c _ i) of two integers and one character, as follows.\n\n- If t _ i=1, change the x _ i-th character of S to c _ i.\n- If t _ i=2, convert all uppercase letters in S to lowercase (do not use x _ i,c _ i for this operation).\n- If t _ i=3, convert all lowercase letters in S to uppercase (do not use x _ i,c _ i for this operation).\n\nPrint the S after the Q operations.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\nS\nQ\nt _ 1 x _ 1 c _ 1\nt _ 2 x _ 2 c _ 2\n\\vdots\nt _ Q x _ Q c _ Q\n\nOutput\n\nPrint the answer in a single line.\n\nConstraints\n\n\n- 1\\leq N\\leq5\\times10^5\n- S is a string of length N consisting of uppercase and lowercase English letters.\n- 1\\leq Q\\leq5\\times10^5\n- 1\\leq t _ i\\leq3\\ (1\\leq i\\leq Q)\n- If t _ i=1, then 1\\leq x _ i\\leq N\\ (1\\leq i\\leq Q).\n- c _ i is an uppercase or lowercase English letter.\n- If t _ i\\neq 1, then x _ i=0 and c _ i= 'a'.\n- N,Q,t _ i,x _ i are all integers.\n\nSample Input 1\n\n7\nAtCoder\n5\n1 4 i\n3 0 a\n1 5 b\n2 0 a\n1 4 Y\n\nSample Output 1\n\natcYber\n\nInitially, the string S is AtCoder.\n\n- The first operation changes the 4-th character to i, changing S to AtCider.\n- The second operation converts all lowercase letters to uppercase, changing S to ATCIDER.\n- The third operation changes the 5-th character to b, changing S to ATCIbER.\n- The fourth operation converts all uppercase letters to lowercase, changing S to atciber.\n- The fifth operation changes the 4-th character to Y, changing S to atcYber.\n\nAfter the operations, the string S is atcYber, so print atcYber.\n\nSample Input 2\n\n35\nTheQuickBrownFoxJumpsOverTheLazyDog\n10\n2 0 a\n1 19 G\n1 13 m\n1 2 E\n1 21 F\n2 0 a\n1 27 b\n3 0 a\n3 0 a\n1 15 i\n\nSample Output 2\n\nTEEQUICKBROWMFiXJUGPFOVERTBELAZYDOG", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"7\\nAtCoder\\n5\\n1 4 i\\n3 0 a\\n1 5 b\\n2 0 a\\n1 4 Y\\n\", \"output\": \"atcYber\\n\", \"testtype\": \"stdin\"}, {\"input\": \"35\\nTheQuickBrownFoxJumpsOverTheLazyDog\\n10\\n2 0 a\\n1 19 G\\n1 13 m\\n1 2 E\\n1 21 F\\n2 0 a\\n1 27 b\\n3 0 a\\n3 0 a\\n1 15 i\\n\", \"output\": \"TEEQUICKBROWMFiXJUGPFOVERTBELAZYDOG\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc320_e", "question_title": "Somen Nagashi", "question_content": "There are N people gathered for an event called Flowing Noodles. The people are lined up in a row, numbered 1 to N in order from front to back.\nDuring the event, the following occurrence happens M times:\n\n- At time T_i, a quantity W_i of noodles is flown down. The person at the front of the row gets all of it (if no one is in the row, no one gets it). That person then steps out of the row and returns to their original position in the row at time T_i+S_i.\n\nA person who returns to the row at time X is considered to be in the row at time X.\nAfter all the M occurrences, report the total amount of noodles each person has got.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN M\r\nT_1 W_1 S_1\r\n\\vdots\r\nT_M W_M S_M\n\nOutput\n\nPrint N lines.\r\nThe i-th line should contain the amount of noodles person i has got.\n\nConstraints\n\n\n- 1 \\leq N \\leq 2\\times 10^5\n- 1 \\leq M \\leq 2\\times 10^5\n- 0 <T_1 <\\ldots < T_M \\leq 10^9\n- 1 \\leq S_i \\leq 10^9\n- 1 \\leq W_i \\leq 10^9\n- All input values are integers.\n\nSample Input 1\n\n3 5\r\n1 1 3\r\n2 10 100\r\n4 100 10000\r\n10 1000 1000000000\r\n100 1000000000 1\n\nSample Output 1\n\n101\r\n10\r\n1000\r\n\nThe event proceeds as follows:\n\n- At time 1, a quantity 1 of noodles is flown down. People 1, 2, and 3 are in the row, and the person at the front, person 1, gets the noodles and steps out of the row.\n- At time 2, a quantity 10 of noodles is flown down. People 2 and 3 are in the row, and the person at the front, person 2, gets the noodles and steps out of the row.\n- At time 4, person 1 returns to the row.\n- At time 4, a quantity 100 of noodles is flown down. People 1 and 3 are in the row, and the person at the front, person 1, gets the noodles and steps out of the row.\n- At time 10, a quantity 1000 of noodles is flown down. Only person 3 is in the row, and the person at the front, person 3, gets the noodles and steps out of the row.\n- At time 100, a quantity 1000000000 of noodles is flown down. No one is in the row, so no one gets these noodles.\n- At time 102, person 2 returns to the row.\n- At time 10004, person 1 returns to the row.\n- At time 1000000010, person 3 returns to the row.\n\nThe total amounts of noodles people 1, 2, and 3 have got are 101, 10, and 1000, respectively.\n\nSample Input 2\n\n3 1\r\n1 1 1\n\nSample Output 2\n\n1\r\n0\r\n0\n\nSample Input 3\n\n1 8\r\n1 1 1\r\n2 2 2\r\n3 3 3\r\n4 4 4\r\n5 5 5\r\n6 6 6\r\n7 7 7\r\n8 8 8\n\nSample Output 3\n\n15", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"3 5\\n1 1 3\\n2 10 100\\n4 100 10000\\n10 1000 1000000000\\n100 1000000000 1\\n\", \"output\": \"101\\n10\\n1000\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3 1\\n1 1 1\\n\", \"output\": \"1\\n0\\n0\\n\", \"testtype\": \"stdin\"}, {\"input\": \"1 8\\n1 1 1\\n2 2 2\\n3 3 3\\n4 4 4\\n5 5 5\\n6 6 6\\n7 7 7\\n8 8 8\\n\", \"output\": \"15\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc324_a", "question_title": "Same", "question_content": "You are given N integers A _ 1,A _ 2,\\ldots,A _ N.\nIf their values are all equal, print Yes; otherwise, print No.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nA _ 1 A _ 2 \\ldots A _ N\n\nOutput\n\nPrint a single line containing Yes if the values of the given A _ 1,A _ 2,\\ldots,A _ N are all equal, and No otherwise.\n\nConstraints\n\n\n- 2\\leq N\\leq100\n- 1\\leq A _ i\\leq100\\ (1\\leq i\\leq N)\n- All input values are integers.\n\nSample Input 1\n\n3\r\n3 2 4\n\nSample Output 1\n\nNo\r\n\nWe have A _ 1\\neq A _ 2, so you should print No.\n\nSample Input 2\n\n4\r\n3 3 3 3\n\nSample Output 2\n\nYes\r\n\nWe have A _ 1=A _ 2=A _ 3=A _ 4, so you should print Yes.\n\nSample Input 3\n\n10\r\n73 8 55 26 97 48 37 47 35 55\n\nSample Output 3\n\nNo", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"3\\n3 2 4\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}, {\"input\": \"4\\n3 3 3 3\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"10\\n73 8 55 26 97 48 37 47 35 55\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc328_a", "question_title": "Not Too Hard", "question_content": "There is a programming contest with N problems. For each i = 1, 2, \\ldots, N, the score for the i-th problem is S_i.\nPrint the total score for all problems with a score of X or less.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN X\r\nS_1 S_2 \\ldots S_N\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- All input values are integers.\n- 4 \\leq N \\leq 8\n- 100 \\leq S_i \\leq 675\n- 100 \\leq X \\leq 675\n\nSample Input 1\n\n6 200\r\n100 675 201 200 199 328\n\nSample Output 1\n\n499\r\n\nThree problems have a score of 200 or less: the first, fourth, and fifth, for a total score of S_1 + S_4 + S_5 = 100 + 200 + 199 = 499.\n\nSample Input 2\n\n8 675\r\n675 675 675 675 675 675 675 675\n\nSample Output 2\n\n5400\n\nSample Input 3\n\n8 674\r\n675 675 675 675 675 675 675 675\n\nSample Output 3\n\n0", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"6 200\\n100 675 201 200 199 328\\n\", \"output\": \"499\\n\", \"testtype\": \"stdin\"}, {\"input\": \"8 675\\n675 675 675 675 675 675 675 675\\n\", \"output\": \"5400\\n\", \"testtype\": \"stdin\"}, {\"input\": \"8 674\\n675 675 675 675 675 675 675 675\\n\", \"output\": \"0\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc328_c", "question_title": "Consecutive", "question_content": "You are given a string S = S_1S_2\\ldots S_N of length N consisting of lowercase English letters.\nAdditionally, you are given Q queries about the string S.\r\nFor i = 1, 2, \\ldots, Q, the i-th query is represented by two integers l_i, r_i and asks the following.\n\nIn the substring S_{l_i}S_{l_i+1}\\ldots S_{r_i} of S, which ranges from the l_i-th to the r_i-th character, how many places are there where the same lowercase English letter occurs twice in a row?\r\nIn other words, how many integers p satisfy l_i \\leq p \\leq r_i-1 and S_p = S_{p+1}?\n\nPrint the answer for each of the Q queries.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN Q\r\nS\r\nl_1 r_1\r\nl_2 r_2\r\n\\vdots\r\nl_Q r_Q\n\nOutput\n\nPrint Q lines.\r\nFor i = 1, 2, \\ldots, Q, the i-th line should contain the answer to the i-th query.\n\nConstraints\n\n\n- N and Q are integers.\n- 1 \\leq N, Q \\leq 3 \\times 10^5\n- S is a string of length N consisting of lowercase English letters.\n- l_i and r_i are integers.\n- 1 \\leq l_i \\leq r_i \\leq N\n\nSample Input 1\n\n11 4\r\nmississippi\r\n3 9\r\n4 10\r\n4 6\r\n7 7\n\nSample Output 1\n\n2\r\n2\r\n0\r\n0\r\n\nThe answers to the four queries are as follows.\n\n- For the first query, S_3S_4\\ldots S_9 =  ssissip has two places where the same lowercase English letter occurs twice in a row: S_3S_4 =  ss and S_6S_7 =  ss.\n- For the second query, S_4S_5\\ldots S_{10} =  sissipp has two places where the same lowercase English letter occurs twice in a row: S_6S_7 =  ss and S_9S_{10} =  pp.\n- For the third query, S_4S_5S_6 =  sis has zero places where the same lowercase English letter occurs twice in a row.\n- For the fourth query, S_7 =  s has zero places where the same lowercase English letter occurs twice in a row.\n\nSample Input 2\n\n5 1\r\naaaaa\r\n1 5\n\nSample Output 2\n\n4\r\n\nS_1S_2\\ldots S_5 =  aaaaa has four places where the same lowercase English letter occurs twice in a row:\r\nS_1S_2 =  aa, S_2S_3 =  aa, S_3S_4 =  aa, and S_4S_5 =  aa.", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"11 4\\nmississippi\\n3 9\\n4 10\\n4 6\\n7 7\\n\", \"output\": \"2\\n2\\n0\\n0\\n\", \"testtype\": \"stdin\"}, {\"input\": \"5 1\\naaaaa\\n1 5\\n\", \"output\": \"4\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc329_f", "question_title": "Colored Ball", "question_content": "There are N boxes numbered 1, 2, \\ldots, N. Initially, box i contains one ball of color C_i.\nYou are given Q queries, which you should process in order.\nEach query is given by a pair of integers (a,b) and asks you to do the following:\n\n- Move all the balls from box a to box b, and then print the number of different colors of balls in box b.\n\nHere, the boxes a and b may be empty.\n\nInput\n\nThe input is given from Standard Input in the following format, where \\text{query}_i represents the i-th query:\nN Q\r\nC_1 C_2 \\ldots C_N\r\n\\text{query}_1\r\n\\text{query}_2\r\n\\vdots\r\n\\text{query}_Q\r\n\nEach query is given in the following format:\na b\n\nOutput\n\nPrint Q lines.\r\nThe i-th line should contain the response to the i-th query.\n\nConstraints\n\n\n- 1 \\leq N, Q \\leq 200000\n- 1 \\leq C_i \\leq N\n- 1 \\leq a, b \\leq N\n- a \\neq b\n- All input values are integers.\n\nSample Input 1\n\n6 5\r\n1 1 1 2 2 3\r\n1 2\r\n6 4\r\n5 1\r\n3 6\r\n4 6\n\nSample Output 1\n\n1\r\n2\r\n1\r\n1\r\n3\r\n\n\n- \r\nFor the first query, move all the balls from box 1 to box 2. Box 2 now contains two balls of color 1, so print 1.\n\n- \r\nFor the second query, move all the balls from box 6 to box 4. Box 4 now contains one ball of color 2 and one ball of color 3, so print 2.\n\n- \r\nFor the third query, move all the balls from box 5 to box 1. Box 1 now contains one ball of color 2, so print 1.\n\n- \r\nFor the fourth query, move all the balls from box 3 to box 6. Box 6 now contains one ball of color 1, so print 1.\n\n- \r\nFor the fifth query, move all the balls from box 4 to box 6. Box 6 now contains one ball of color 1, one ball of color 2, and one ball of color 3, so print 3.\n\nSample Input 2\n\n5 3\r\n2 4 2 4 2\r\n3 1\r\n2 5\r\n3 2\n\nSample Output 2\n\n1\r\n2\r\n0", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"6 5\\n1 1 1 2 2 3\\n1 2\\n6 4\\n5 1\\n3 6\\n4 6\\n\", \"output\": \"1\\n2\\n1\\n1\\n3\\n\", \"testtype\": \"stdin\"}, {\"input\": \"5 3\\n2 4 2 4 2\\n3 1\\n2 5\\n3 2\\n\", \"output\": \"1\\n2\\n0\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc330_a", "question_title": "Counting Passes", "question_content": "N people labeled 1,2,\\dots,N took an exam, and person i scored A_i points.\r\nOnly those who scored at least L points pass this exam.\r\nDetermine how many people out of the N have passed the exam.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN L\r\nA_1 A_2 \\dots A_N\n\nOutput\n\nPrint the answer as an integer.\n\nConstraints\n\n\n- All input values are integers.\n- 1 \\le N \\le 100\n- 1 \\le L \\le 1000\n- 0 \\le A_i \\le 1000\n\nSample Input 1\n\n5 60\r\n60 20 100 90 40\n\nSample Output 1\n\n3\r\n\nFive people took the exam. You need to score at least 60 points to pass.\n\n- Person 1 scored 60 points, so they passed.\n- Person 2 scored 20 points, so they did not pass.\n- Person 3 scored 100 points, so they passed.\n- Person 4 scored 90 points, so they passed.\n- Person 5 scored 40 points, so they did not pass.\n\nFrom the above, we can see that three people have passed.\n\nSample Input 2\n\n4 80\r\n79 78 77 76\n\nSample Output 2\n\n0\r\n\nThere may be cases no one has passed.\n\nSample Input 3\n\n10 50\r\n31 41 59 26 53 58 97 93 23 84\n\nSample Output 3\n\n6", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"5 60\\n60 20 100 90 40\\n\", \"output\": \"3\\n\", \"testtype\": \"stdin\"}, {\"input\": \"4 80\\n79 78 77 76\\n\", \"output\": \"0\\n\", \"testtype\": \"stdin\"}, {\"input\": \"10 50\\n31 41 59 26 53 58 97 93 23 84\\n\", \"output\": \"6\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc331_c", "question_title": "Sum of Numbers Greater Than Me", "question_content": "You are given a sequence A=(A_1,\\ldots,A_N) of length N.\nFor each i=1,\\ldots,N, solve the following problem.\nProblem: Find the sum of all elements in A that are greater than A_i.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nA_1 \\ldots A_N\n\nOutput\n\nFor each 1\\leq k\\leq N, let B_k be the answer to the problem when i=k. Print B_1,\\ldots,B_N in this order, separated by spaces.\n\nConstraints\n\n\n- 1 \\leq N \\leq 2\\times 10^5\n- 1 \\leq A_i \\leq 10^6\n- All input values are integers.\n\nSample Input 1\n\n5\r\n1 4 1 4 2\n\nSample Output 1\n\n10 0 10 0 8\r\n\n\n- For i=1, the sum of elements greater than A_1=1 is 4+4+2=10.\n- For i=2, the sum of elements greater than A_2=4 is 0.\n- For i=3, the sum of elements greater than A_3=1 is 4+4+2=10.\n- For i=4, the sum of elements greater than A_4=4 is 0.\n- For i=5, the sum of elements greater than A_5=2 is 4+4=8.\n\nSample Input 2\n\n10\r\n31 42 59 26 53 58 97 93 23 54\n\nSample Output 2\n\n456 414 190 487 361 249 0 97 513 307\n\nSample Input 3\n\n50\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\nSample Output 3\n\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"5\\n1 4 1 4 2\\n\", \"output\": \"10 0 10 0 8\\n\", \"testtype\": \"stdin\"}, {\"input\": \"10\\n31 42 59 26 53 58 97 93 23 54\\n\", \"output\": \"456 414 190 487 361 249 0 97 513 307\\n\", \"testtype\": \"stdin\"}, {\"input\": \"50\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\", \"output\": \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc335_c", "question_title": "Loong Tracking", "question_content": "Takahashi has created a game where the player controls a dragon on a coordinate plane.\nThe dragon consists of N parts numbered 1 to N, with part 1 being called the head.\nInitially, part i is located at the coordinates (i,0). Process Q queries as follows.\n\n- 1 C: Move the head by 1 in direction C. Here, C is one of R, L, U, and D, which represent the positive x-direction, negative x-direction, positive y-direction, and negative y-direction, respectively. Each part other than the head moves to follow the part in front of it. That is, part i (2\\leq i \\leq N) moves to the coordinates where part i-1 was before the move.\n- 2 p: Find the coordinates of part p.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN Q\n\\mathrm{query}_1\n\\vdots\n\\mathrm{query}_Q\n\nEach query is in one of the following two formats:\n1 C\n\n2 p\n\nOutput\n\nPrint q lines, where q is the number of queries of the second type.\nThe i-th line should contain x and y separated by a space, where (x,y) are the answer to the i-th such query.\n\nConstraints\n\n\n- 2 \\leq N \\leq 10^6\n- 1 \\leq Q \\leq 2\\times 10^5\n- For the first type of query, C is one of R, L, U, and D.\n- For the second type of query, 1\\leq p \\leq N.\n- All numerical input values are integers.\n\nSample Input 1\n\n5 9\n2 3\n1 U\n2 3\n1 R\n1 D\n2 3\n1 L\n2 1\n2 5\n\nSample Output 1\n\n3 0\n2 0\n1 1\n1 0\n1 0\n\nAt each time when processing the second type of query, the parts are at the following positions:\n\nNote that multiple parts may exist at the same coordinates.", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"5 9\\n2 3\\n1 U\\n2 3\\n1 R\\n1 D\\n2 3\\n1 L\\n2 1\\n2 5\\n\", \"output\": \"3 0\\n2 0\\n1 1\\n1 0\\n1 0\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc337_c", "question_title": "Lining Up 2", "question_content": "There are N people standing in a line: person 1, person 2, \\ldots, person N.\nYou are given the arrangement of the people as a sequence A=(A _ 1,A _ 2,\\ldots,A _ N) of length N.\nA _ i\\ (1\\leq i\\leq N) represents the following information:\n\n- if A _ i=-1, person i is at the front of the line;\n- if A _ i\\neq -1, person i is right behind person A _ i.\n\nPrint the people's numbers in the line from front to back.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nA _ 1 A _ 2 \\ldots A _ N\n\nOutput\n\nIf person s _ 1, person s _ 2, \\ldots, person s _ N are standing in the line in this order, print s _ 1, s _ 2, \\ldots, and s _ N in this order, separated by spaces.\n\nConstraints\n\n\n- 1\\leq N\\leq3\\times10 ^ 5\n- A _ i=-1 or 1\\leq A _ i\\leq N\\ (1\\leq i\\leq N)\n- There is exactly one way to arrange the N people consistent with the information given.\n- All input values are integers.\n\nSample Input 1\n\n6\r\n4 1 -1 5 3 2\n\nSample Output 1\n\n3 5 4 1 2 6\r\n\nIf person 3, person 5, person 4, person 1, person 2, and person 6 stand in line in this order from front to back, the arrangement matches the given information.\nIndeed, it can be seen that:\n\n- person 1 is standing right behind person 4,\n- person 2 is standing right behind person 1,\n- person 3 is at the front of the line,\n- person 4 is standing right behind person 5,\n- person 5 is standing right behind person 3, and\n- person 6 is standing right behind person 2.\n\nThus, print 3, 5, 4, 1, 2, and 6 in this order, separated by spaces.\n\nSample Input 2\n\n10\r\n-1 1 2 3 4 5 6 7 8 9\n\nSample Output 2\n\n1 2 3 4 5 6 7 8 9 10\n\nSample Input 3\n\n30\r\n3 25 20 6 18 12 26 1 29 -1 21 17 23 9 8 30 10 15 22 27 4 13 5 11 16 24 28 2 19 7\n\nSample Output 3\n\n10 17 12 6 4 21 11 24 26 7 30 16 25 2 28 27 20 3 1 8 15 18 5 23 13 22 19 29 9 14", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"6\\n4 1 -1 5 3 2\\n\", \"output\": \"3 5 4 1 2 6\\n\", \"testtype\": \"stdin\"}, {\"input\": \"10\\n-1 1 2 3 4 5 6 7 8 9\\n\", \"output\": \"1 2 3 4 5 6 7 8 9 10\\n\", \"testtype\": \"stdin\"}, {\"input\": \"30\\n3 25 20 6 18 12 26 1 29 -1 21 17 23 9 8 30 10 15 22 27 4 13 5 11 16 24 28 2 19 7\\n\", \"output\": \"10 17 12 6 4 21 11 24 26 7 30 16 25 2 28 27 20 3 1 8 15 18 5 23 13 22 19 29 9 14\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc340_b", "question_title": "Append", "question_content": "You have an empty sequence A. There are Q queries given, and you need to process them in the order they are given.\nThe queries are of the following two types:\n\n- 1 x: Append x to the end of A.\n- 2 k: Find the k-th value from the end of A. It is guaranteed that the length of A is at least k when this query is given.\n\nInput\n\nThe input is given from Standard Input in the following format:\nQ\n\\mathrm{query}_1\n\\mathrm{query}_2\n\\vdots\n\\mathrm{query}_Q\n\nEach query is in one of the following two formats:\n1 x\n\n2 k\n\nOutput\n\nPrint q lines, where q is the number of queries of the second type.\nThe i-th line should contain the answer to the i-th such query.\n\nConstraints\n\n\n- 1 \\leq Q \\leq 100\n- In the first type of query, x is an integer satisfying 1 \\leq x \\leq 10^9.\n- In the second type of query, k is a positive integer not greater than the current length of sequence A.\n\nSample Input 1\n\n5\n1 20\n1 30\n2 1\n1 40\n2 3\n\nSample Output 1\n\n30\n20\n\n\n- Initially, A is empty.\n- The first query appends 20 to the end of A, making A=(20).\n- The second query appends 30 to the end of A, making A=(20,30).\n- The answer to the third query is 30, which is the 1-st value from the end of A=(20,30).\n- The fourth query appends 40 to the end of A, making A=(20,30,40).\n- The answer to the fifth query is 20, which is the 3-rd value from the end of A=(20,30,40).", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"5\\n1 20\\n1 30\\n2 1\\n1 40\\n2 3\\n\", \"output\": \"30\\n20\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc341_e", "question_title": "Alternating String", "question_content": "A string consisting of 0 and 1 is called a good string if two consecutive characters in the string are always different.\nYou are given a string S of length N consisting of 0 and 1.\nQ queries will be given and must be processed in order.\nThere are two types of queries:\n\n- 1 L R: Flip each of the L-th to R-th characters of S. That is, for each integer i satisfying L\\leq i\\leq R, change the i-th character of S to 0 if it is 1, and vice versa.\n- 2 L R: Let S' be the string of length (R-L+1) obtained by extracting the L-th to R-th characters of S (without changing the order). Print Yes if S' is a good string and No otherwise.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN Q\nS\nquery_1\nquery_2\n\\vdots\nquery_Q\n\nEach query query_i (1\\leq i\\leq Q) is given in the form:\n1 L R \n\nor:\n2 L R\n\nOutput\n\nLet K be the number of queries of type 2. Print K lines.\nThe i-th line should contain the response to the i-th query of type 2.\n\nConstraints\n\n\n- 1\\leq N, Q\\leq 5\\times 10^5\n- S is a string of length N consisting of 0 and 1.\n- 1\\leq L\\leq R\\leq N for queries of types 1 and 2.\n- There is at least one query of type 2.\n- N, Q, L, and R are integers.\n\nSample Input 1\n\n5 6\n10100\n2 1 3\n2 1 5\n1 1 4\n2 1 5\n1 3 3\n2 2 4\n\nSample Output 1\n\nYes\nNo\nYes\nNo\n\nInitially, S=10100. When processing the queries in the order they are given, the following occurs:\n\n- For the first query, the string obtained by extracting the 1-st to 3-rd characters of S is S'=101. This is a good string, so print Yes.\n- For the second query, the string obtained by extracting the 1-st to 5-th characters of S is S'=10100. This is not a good string, so print No.\n- For the third query, flip each of the 1-st to 4-th characters of S. The string S becomes S=01010.\n- For the fourth query, the string obtained by extracting the 1-st to 5-th character of S is S'=01010. This is a good string, so print Yes.\n- For the fifth query, flip the 3-rd character of S. The string S becomes S=01110.\n- For the sixth query, the string obtained by extracting the 2-nd to 4-th character of S is S'=111. This is not a good string, so print No.\n\nSample Input 2\n\n1 2\n1\n1 1 1\n2 1 1\n\nSample Output 2\n\nYes\n\nNote that a string of a single character 0 or 1 satisfies the condition of being a good string.", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"5 6\\n10100\\n2 1 3\\n2 1 5\\n1 1 4\\n2 1 5\\n1 3 3\\n2 2 4\\n\", \"output\": \"Yes\\nNo\\nYes\\nNo\\n\", \"testtype\": \"stdin\"}, {\"input\": \"1 2\\n1\\n1 1 1\\n2 1 1\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc342_c", "question_title": "Many Replacement", "question_content": "You are given a string S of length N consisting of lowercase English letters.\nYou will perform an operation Q times on the string S.\r\nThe i-th operation (1\\leq i\\leq Q) is represented by a pair of characters (c _ i,d _ i), which corresponds to the following operation:\n\n- Replace all occurrences of the character c _ i in S with the character d _ i.\n\nPrint the string S after all operations are completed.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nS\r\nQ\r\nc _ 1 d _ 1\r\nc _ 2 d _ 2\r\n\\vdots\r\nc _ Q d _ Q\n\nOutput\n\nPrint the string S after all operations are completed.\n\nConstraints\n\n\n- 1\\leq N\\leq2\\times10^5\n- S is a string of length N consisting of lowercase English letters.\n- 1\\leq Q\\leq2\\times10^5\n- c _ i and d _ i are lowercase English letters (1\\leq i\\leq Q).\n- N and Q are integers.\n\nSample Input 1\n\n7\r\natcoder\r\n4\r\nr a\r\nt e\r\nd v\r\na r\n\nSample Output 1\n\nrecover\r\n\nS changes as follows: atcoder → atcodea → aecodea → aecovea → recover.\r\nFor example, in the fourth operation, all occurrences of a in S={}aecovea (the first and seventh characters) are replaced with r, resulting in S={}recover.\nAfter all operations are completed, S={}recover, so print recover.\n\nSample Input 2\n\n3\r\nabc\r\n4\r\na a\r\ns k\r\nn n\r\nz b\n\nSample Output 2\n\nabc\r\n\nThere may be operations where c _ i=d _ i or S does not contain c _ i.\n\nSample Input 3\n\n34\r\nsupercalifragilisticexpialidocious\r\n20\r\ng c\r\nl g\r\ng m\r\nc m\r\nr o\r\ns e\r\na a\r\no f\r\nf s\r\ne t\r\nt l\r\nd v\r\np k\r\nv h\r\nx i\r\nh n\r\nn j\r\ni r\r\ns i\r\nu a\n\nSample Output 3\n\nlaklimamriiamrmrllrmlrkramrjimrial", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"7\\natcoder\\n4\\nr a\\nt e\\nd v\\na r\\n\", \"output\": \"recover\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3\\nabc\\n4\\na a\\ns k\\nn n\\nz b\\n\", \"output\": \"abc\\n\", \"testtype\": \"stdin\"}, {\"input\": \"34\\nsupercalifragilisticexpialidocious\\n20\\ng c\\nl g\\ng m\\nc m\\nr o\\ns e\\na a\\no f\\nf s\\ne t\\nt l\\nd v\\np k\\nv h\\nx i\\nh n\\nn j\\ni r\\ns i\\nu a\\n\", \"output\": \"laklimamriiamrmrllrmlrkramrjimrial\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc343_d", "question_title": "Diversity of Scores", "question_content": "Takahashi is hosting a contest with N players numbered 1 to N. \nThe players will compete for points. Currently, all players have zero points.\nTakahashi's foreseeing ability lets him know how the players' scores will change. Specifically, for i=1,2,\\dots,T, the score of player A_i will increase by B_i points at i seconds from now. There will be no other change in the scores.\nTakahashi, who prefers diversity in scores, wants to know how many different score values will appear among the players' scores at each moment. For each i=1,2,\\dots,T, find the number of different score values among the players' scores at i+0.5 seconds from now.\nFor example, if the players have 10, 20, 30, and 20 points at some moment, there are three different score values among the players' scores at that moment.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN T\nA_1 B_1\nA_2 B_2\n\\vdots\nA_T B_T\n\nOutput\n\nPrint T lines.\nThe i-th line (1\\leq i \\leq T) should contain an integer representing the number of different score values among the players' scores at i+0.5 seconds from now.\n\nConstraints\n\n\n- 1\\leq N, T\\leq 2\\times 10^5\n- 1\\leq A_i \\leq N\n- 1\\leq B_i \\leq 10^9\n- All input values are integers.\n\nSample Input 1\n\n3 4\n1 10\n3 20\n2 10\n2 10\n\nSample Output 1\n\n2\n3\n2\n2\n\nLet S be the sequence of scores of players 1, 2, 3 in this order.\nCurrently, S=\\lbrace 0,0,0\\rbrace.\n\n- After one second, the score of player 1 increases by 10 points, making S=\\lbrace 10,0,0\\rbrace. Thus, there are two different score values among the players' scores at 1.5 seconds from now.\n- After two seconds, the score of player 3 increases by 20 points, making S=\\lbrace 10,0,20\\rbrace. Thus, there are three different score values among the players' scores at 2.5 seconds from now.\n- After three seconds, the score of player 2 increases by 10 points, making S=\\lbrace 10,10,20\\rbrace. Therefore, there are two different score values among the players' scores at 3.5 seconds from now.\n- After four seconds, the score of player 2 increases by 10 points, making S=\\lbrace 10,20,20\\rbrace. Therefore, there are two different score values among the players' scores at 4.5 seconds from now.\n\nSample Input 2\n\n1 3\n1 3\n1 4\n1 3\n\nSample Output 2\n\n1\n1\n1\n\nSample Input 3\n\n10 10\n7 2620\n9 2620\n8 3375\n1 3375\n6 1395\n5 1395\n6 2923\n10 3375\n9 5929\n5 1225\n\nSample Output 3\n\n2\n2\n3\n3\n4\n4\n5\n5\n6\n5", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"3 4\\n1 10\\n3 20\\n2 10\\n2 10\\n\", \"output\": \"2\\n3\\n2\\n2\\n\", \"testtype\": \"stdin\"}, {\"input\": \"1 3\\n1 3\\n1 4\\n1 3\\n\", \"output\": \"1\\n1\\n1\\n\", \"testtype\": \"stdin\"}, {\"input\": \"10 10\\n7 2620\\n9 2620\\n8 3375\\n1 3375\\n6 1395\\n5 1395\\n6 2923\\n10 3375\\n9 5929\\n5 1225\\n\", \"output\": \"2\\n2\\n3\\n3\\n4\\n4\\n5\\n5\\n6\\n5\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc378_c", "question_title": "Repeating", "question_content": "You are given a sequence of N positive numbers, A = (A_1, A_2, \\dots, A_N). Find the sequence B = (B_1, B_2, \\dots, B_N) of length N defined as follows.\n\n- For i = 1, 2, \\dots, N, define B_i as follows:\n- Let B_i be the most recent position before i where an element equal to A_i appeared. If such a position does not exist, let B_i = -1.\nMore precisely, if there exists a positive integer j such that A_i = A_j and j < i, let B_i be the largest such j. If no such j exists, let B_i = -1.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\nA_1 A_2 \\dots A_N\n\nOutput\n\nPrint the elements of B in one line, separated by spaces.\n\nConstraints\n\n\n- 1 \\leq N \\leq 2 \\times 10^5\n- 1 \\leq A_i \\leq 10^9\n- All input values are integers.\n\nSample Input 1\n\n5\n1 2 1 1 3\n\nSample Output 1\n\n-1 -1 1 3 -1\n\n\n- i = 1: There is no 1 before A_1 = 1, so B_1 = -1.\n- i = 2: There is no 2 before A_2 = 2, so B_2 = -1.\n- i = 3: The most recent occurrence of 1 before A_3 = 1 is A_1, so B_3 = 1.\n- i = 4: The most recent occurrence of 1 before A_4 = 1 is A_3, so B_4 = 3.\n- i = 5: There is no 3 before A_5 = 3, so B_5 = -1.\n\nSample Input 2\n\n4\n1 1000000000 1000000000 1\n\nSample Output 2\n\n-1 -1 2 1", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"5\\n1 2 1 1 3\", \"output\": \"-1 -1 1 3 -1\", \"testtype\": \"stdin\"}, {\"input\": \"4\\n1 1000000000 1000000000 1\", \"output\": \"-1 -1 2 1\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc380_e", "question_title": "1D Bucket Tool", "question_content": "There are N cells in a row, numbered 1 to N.\nFor each 1 \\leq i < N, cells i and i+1 are adjacent.\nInitially, cell i is painted with color i.\nYou are given Q queries. Process them in order. Each query is of one of the following two types.\n\n- 1 x c: Repaint the following to color c: all reachable cells reachable from cell x by repeatedly moving to an adjacent cell painted in the same color as the current cell.\n- 2 c: Print the number of cells painted with color c.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN Q\n\\mathrm{query}_1\n\\vdots\n\\mathrm{query}_Q\n\nEach query is given in one of the following two formats:\n1 x c\n\n2 c\n\nOutput\n\nLet q be the number of queries of the second type. Print q lines.\nThe i-th line should contain the answer to the i-th such query.\n\nConstraints\n\n\n- 1 \\leq N \\leq 5 \\times 10^5\n- 1 \\leq Q \\leq 2 \\times 10^5\n- In queries of the first type, 1 \\leq x \\leq N.\n- In queries of the first and second types, 1 \\leq c \\leq N.\n- There is at least one query of the second type.\n- All input values are integers.\n\nSample Input 1\n\n5 6\n1 5 4\n1 4 2\n2 2\n1 3 2\n1 2 3\n2 3\n\nSample Output 1\n\n3\n4\n\nThe queries recolor the cells as shown in the figure.", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"5 6\\n1 5 4\\n1 4 2\\n2 2\\n1 3 2\\n1 2 3\\n2 3\", \"output\": \"3\\n4\", \"testtype\": \"stdin\"}]"}
{"question_id": "3610", "question_title": "find-x-sum-of-all-k-long-subarrays-i", "question_content": "You are given an array nums of n integers and two integers k and x.\nThe x-sum of an array is calculated by the following procedure:\n\nCount the occurrences of all elements in the array.\nKeep only the occurrences of the top x most frequent elements. If two elements have the same number of occurrences, the element with the bigger value is considered more frequent.\nCalculate the sum of the resulting array.\n\nNote that if an array has less than x distinct elements, its x-sum is the sum of the array.\nReturn an integer array answer of length n - k + 1 where answer[i] is the x-sum of the subarray nums[i..i + k - 1].\n \nExample 1:\n\nInput: nums = [1,1,2,2,3,4,2,3], k = 6, x = 2\nOutput: [6,10,12]\nExplanation:\n\nFor subarray [1, 1, 2, 2, 3, 4], only elements 1 and 2 will be kept in the resulting array. Hence, answer[0] = 1 + 1 + 2 + 2.\nFor subarray [1, 2, 2, 3, 4, 2], only elements 2 and 4 will be kept in the resulting array. Hence, answer[1] = 2 + 2 + 2 + 4. Note that 4 is kept in the array since it is bigger than 3 and 1 which occur the same number of times.\nFor subarray [2, 2, 3, 4, 2, 3], only elements 2 and 3 are kept in the resulting array. Hence, answer[2] = 2 + 2 + 2 + 3 + 3.\n\n\nExample 2:\n\nInput: nums = [3,8,7,8,7,5], k = 2, x = 2\nOutput: [11,15,15,15,12]\nExplanation:\nSince k == x, answer[i] is equal to the sum of the subarray nums[i..i + k - 1].\n\n \nConstraints:\n\n1 <= n == nums.length <= 50\n1 <= nums[i] <= 50\n1 <= x <= k <= nums.length", "difficulty": "easy", "starter_code": "class Solution:\n    def findXSum(self, nums: List[int], k: int, x: int) -> List[int]:\n        ", "public_test_cases": "[{\"input\": \"[1, 1, 2, 2, 3, 4, 2, 3]\\n6\\n2\", \"output\": \"[6, 10, 12]\", \"testtype\": \"functional\"}, {\"input\": \"[3, 8, 7, 8, 7, 5]\\n2\\n2\", \"output\": \"[11, 15, 15, 15, 12]\", \"testtype\": \"functional\"}]"}
{"question_id": "3651", "question_title": "transformed-array", "question_content": "You are given an integer array nums that represents a circular array. Your task is to create a new array result of the same size, following these rules:\nFor each index i (where 0 <= i < nums.length), perform the following independent actions:\n\n\nIf nums[i] > 0: Start at index i and move nums[i] steps to the right in the circular array. Set result[i] to the value of the index where you land.\nIf nums[i] < 0: Start at index i and move abs(nums[i]) steps to the left in the circular array. Set result[i] to the value of the index where you land.\nIf nums[i] == 0: Set result[i] to nums[i].\n\nReturn the new array result.\nNote: Since nums is circular, moving past the last element wraps around to the beginning, and moving before the first element wraps back to the end.\n \nExample 1:\n\nInput: nums = [3,-2,1,1]\nOutput: [1,1,1,3]\nExplanation:\n\nFor nums[0] that is equal to 3, If we move 3 steps to right, we reach nums[3]. So result[0] should be 1.\nFor nums[1] that is equal to -2, If we move 2 steps to left, we reach nums[3]. So result[1] should be 1.\nFor nums[2] that is equal to 1, If we move 1 step to right, we reach nums[3]. So result[2] should be 1.\nFor nums[3] that is equal to 1, If we move 1 step to right, we reach nums[0]. So result[3] should be 3.\n\n\nExample 2:\n\nInput: nums = [-1,4,-1]\nOutput: [-1,-1,4]\nExplanation:\n\nFor nums[0] that is equal to -1, If we move 1 step to left, we reach nums[2]. So result[0] should be -1.\nFor nums[1] that is equal to 4, If we move 4 steps to right, we reach nums[2]. So result[1] should be -1.\nFor nums[2] that is equal to -1, If we move 1 step to left, we reach nums[1]. So result[2] should be 4.\n\n\n \nConstraints:\n\n1 <= nums.length <= 100\n-100 <= nums[i] <= 100", "difficulty": "easy", "starter_code": "class Solution:\n    def constructTransformedArray(self, nums: List[int]) -> List[int]:\n        ", "public_test_cases": "[{\"input\": \"[3, -2, 1, 1]\", \"output\": \"[1, 1, 1, 3]\", \"testtype\": \"functional\"}, {\"input\": \"[-1, 4, -1]\", \"output\": \"[-1, -1, 4]\", \"testtype\": \"functional\"}]"}
{"question_id": "abc344_c", "question_title": "A+B+C", "question_content": "You are given three sequences A=(A_1,\\ldots,A_N), B=(B_1,\\ldots,B_M), and C=(C_1,\\ldots,C_L).\nAdditionally, a sequence X=(X_1,\\ldots,X_Q) is given. For each i=1,\\ldots,Q, solve the following problem:\nProblem: Is it possible to select one element from each of A, B, and C so that their sum is X_i?\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\nA_1 \\ldots A_N\nM\nB_1 \\ldots B_M\nL \nC_1 \\ldots C_L\nQ\nX_1 \\ldots X_Q\n\nOutput\n\nPrint Q lines.\nThe i-th line should contain Yes if it is possible to select one element from each of A, B, and C so that their sum is X_i, and No otherwise.\n\nConstraints\n\n\n- 1 \\leq N,M,L \\leq 100\n- 0 \\leq A_i, B_i ,C_i \\leq 10^8\n- 1 \\leq Q \\leq 2\\times 10^5\n- 0 \\leq X_i \\leq 3\\times 10^8\n- All input values are integers.\n\nSample Input 1\n\n3\n1 2 3\n2\n2 4\n6\n1 2 4 8 16 32\n4\n1 5 10 50\n\nSample Output 1\n\nNo\nYes\nYes\nNo\n\n\n- It is impossible to select one element from each of A, B, and C so that their sum is 1.\n- Selecting 1, 2, and 2 from A, B, and C, respectively, makes the sum 5.\n- Selecting 2, 4, and 4 from A, B, and C, respectively, makes the sum 10.\n- It is impossible to select one element from each of A, B, and C so that their sum is 50.", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"3\\n1 2 3\\n2\\n2 4\\n6\\n1 2 4 8 16 32\\n4\\n1 5 10 50\\n\", \"output\": \"No\\nYes\\nYes\\nNo\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc344_b", "question_title": "Delimiter", "question_content": "You are given N integers A_1,A_2,\\dots,A_N, one per line, over N lines. However, N is not given in the input.\r\nFurthermore, the following is guaranteed:\n\n- A_i \\neq 0 ( 1 \\le i \\le N-1 )\n- A_N = 0\n\nPrint A_N, A_{N-1},\\dots,A_1 in this order.\n\nInput\n\nThe input is given from Standard Input in the following format:\nA_1\r\nA_2\r\n\\vdots\r\nA_N\n\nOutput\n\nPrint A_N, A_{N-1}, \\dots, A_1 in this order, as integers, separated by newlines.\n\nConstraints\n\n\n- All input values are integers.\n- 1 \\le N \\le 100\n- 1 \\le A_i \\le 10^9 ( 1 \\le i \\le N-1 )\n- A_N = 0\n\nSample Input 1\n\n3\r\n2\r\n1\r\n0\n\nSample Output 1\n\n0\r\n1\r\n2\r\n3\r\n\nNote again that N is not given in the input.\r\nHere, N=4 and A=(3,2,1,0).\n\nSample Input 2\n\n0\n\nSample Output 2\n\n0\r\n\nA=(0).\n\nSample Input 3\n\n123\r\n456\r\n789\r\n987\r\n654\r\n321\r\n0\n\nSample Output 3\n\n0\r\n321\r\n654\r\n987\r\n789\r\n456\r\n123", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"3\\n2\\n1\\n0\\n\", \"output\": \"0\\n1\\n2\\n3\\n\", \"testtype\": \"stdin\"}, {\"input\": \"0\\n\", \"output\": \"0\\n\", \"testtype\": \"stdin\"}, {\"input\": \"123\\n456\\n789\\n987\\n654\\n321\\n0\\n\", \"output\": \"0\\n321\\n654\\n987\\n789\\n456\\n123\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc344_e", "question_title": "Insert or Erase", "question_content": "You are given a sequence A=(A_1,\\ldots,A_N) of length N. The elements of A are distinct.\nProcess Q queries in the order they are given. Each query is of one of the following two types:\n\n- 1 x y : Insert y immediately after the element x in A. It is guaranteed that x exists in A when this query is given.\n- 2 x : Remove the element x from A. It is guaranteed that x exists in A when this query is given.\n\nIt is guaranteed that after processing each query, A will not be empty, and its elements will be distinct.\nPrint A after processing all the queries.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN \r\nA_1 \\ldots A_N\r\nQ\r\n\\mathrm{Query}_1\r\n\\vdots \r\n\\mathrm{Query}_Q\r\n\nHere, \\mathrm{Query}_i represents the i-th query and is given in one of the following formats:\n1 x y\r\n\n2 x\n\nOutput\n\nLet A=(A_1,\\ldots,A_K) be the sequence after processing all the queries. Print A_1,\\ldots,A_K in this order, separated by spaces.\n\nConstraints\n\n\n- 1 \\leq N \\leq 2\\times 10^5 \n- 1 \\leq Q \\leq 2\\times 10^5\n- 1 \\leq A_i \\leq 10^9\n- A_i \\neq A_j \n- For queries of the first type, 1 \\leq x,y \\leq 10^9.\n- When a query of the first type is given, x exists in A.\n- For queries of the second type, 1 \\leq x \\leq 10^9.\n- When a query of the second type is given, x exists in A.\n- After processing each query, A is not empty, and its elements are distinct.\n- All input values are integers.\n\nSample Input 1\n\n4\r\n2 1 4 3\r\n4\r\n2 1\r\n1 4 5\r\n2 2\r\n1 5 1\n\nSample Output 1\n\n4 5 1 3\r\n\nThe queries are processed as follows:\n\n- Initially, A=(2,1,4,3).\n- The first query removes 1, making A=(2,4,3).\n- The second query inserts 5 immediately after 4, making A=(2,4,5,3).\n- The third query removes 2, making A=(4,5,3).\n- The fourth query inserts 1 immediately after 5, making A=(4,5,1,3).\n\nSample Input 2\n\n6\r\n3 1 4 5 9 2\r\n7\r\n2 5\r\n1 3 5\r\n1 9 7\r\n2 9\r\n2 3\r\n1 2 3\r\n2 4\n\nSample Output 2\n\n5 1 7 2 3", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"4\\n2 1 4 3\\n4\\n2 1\\n1 4 5\\n2 2\\n1 5 1\\n\", \"output\": \"4 5 1 3\\n\", \"testtype\": \"stdin\"}, {\"input\": \"6\\n3 1 4 5 9 2\\n7\\n2 5\\n1 3 5\\n1 9 7\\n2 9\\n2 3\\n1 2 3\\n2 4\\n\", \"output\": \"5 1 7 2 3\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc346_a", "question_title": "Adjacent Product", "question_content": "You are given N integers A_1, A_2, \\dots, A_N.\r\nAlso, define B_i = A_i \\times A_{i+1}\\ (1 \\leq i \\leq N-1).\nPrint B_1, B_2, \\dots, B_{N-1} in this order, separated by spaces.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nA_1 A_2 \\dots A_N\n\nOutput\n\nPrint B_1, B_2, \\dots, B_{N-1} in this order, separated by spaces.\n\nConstraints\n\n\n- 2 \\leq N \\leq 100\n- 1 \\leq A_i \\leq 100\n- All input values are integers.\n\nSample Input 1\n\n3\r\n3 4 6\n\nSample Output 1\n\n12 24\r\n\nWe have B_1 = A_1 \\times A_2 = 12, B_2 = A_2 \\times A_3 = 24.\n\nSample Input 2\n\n5\r\n22 75 26 45 72\n\nSample Output 2\n\n1650 1950 1170 3240", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"3\\n3 4 6\\n\", \"output\": \"12 24\\n\", \"testtype\": \"stdin\"}, {\"input\": \"5\\n22 75 26 45 72\\n\", \"output\": \"1650 1950 1170 3240\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc347_a", "question_title": "Divisible", "question_content": "You are given positive integers N and K, and a sequence of length N, A=(A_1,A_2,\\ldots,A_N).\nExtract all elements of A that are multiples of K, divide them by K, and print the quotients.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN K\r\nA_1 A_2 \\ldots A_N\n\nOutput\n\nDivide all elements of A that are multiples of K and print the quotients in ascending order with spaces in between.\n\nConstraints\n\n\n- 1\\leq N,K\\leq 100\n- 1\\leq A_1 < A_2 < \\ldots < A_N \\leq 100\n- A has at least one multiple of K.\n- All given numbers are integers.\n\nSample Input 1\n\n5 2\r\n2 5 6 7 10\n\nSample Output 1\n\n1 3 5\r\n\nThe multiples of 2 among the elements in A are 2, 6, and 10. Divide them by 2 to get 1, 3, and 5, and print them in ascending order with spaces in between.\n\nSample Input 2\n\n3 1\r\n3 4 7\n\nSample Output 2\n\n3 4 7\n\nSample Input 3\n\n5 10\r\n50 51 54 60 65\n\nSample Output 3\n\n5 6", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"5 2\\n2 5 6 7 10\\n\", \"output\": \"1 3 5\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3 1\\n3 4 7\\n\", \"output\": \"3 4 7\\n\", \"testtype\": \"stdin\"}, {\"input\": \"5 10\\n50 51 54 60 65\\n\", \"output\": \"5 6\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc348_c", "question_title": "Colorful Beans", "question_content": "There are N types of beans, one bean of each type. The i-th type of bean has a deliciousness of A_i and a color of C_i. The beans are mixed and can only be distinguished by color.\nYou will choose one color of beans and eat one bean of that color. By selecting the optimal color, maximize the minimum possible deliciousness of the bean you eat.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nA_1 C_1\r\nA_2 C_2\r\n\\vdots\r\nA_N C_N\n\nOutput\n\nPrint as an integer the maximum value of the minimum possible deliciousness of the bean you eat.\n\nConstraints\n\n\n- 1 \\leq N \\leq 2 \\times 10^{5}\n- 1 \\leq A_i \\leq 10^{9}\n- 1 \\leq C_i \\leq 10^{9}\n- All input values are integers.\n\nSample Input 1\n\n4\r\n100 1\r\n20 5\r\n30 5\r\n40 1\n\nSample Output 1\n\n40\r\n\nNote that beans of the same color cannot be distinguished from each other.\nYou can choose color 1 or color 5.\r\n\n- There are two types of beans of color 1, with deliciousness of 100 and 40. Thus, the minimum deliciousness when choosing color 1 is 40.\n- There are two types of beans of color 5, with deliciousness of 20 and 30. Thus, the minimum deliciousness when choosing color 5 is 20.\n\nTo maximize the minimum deliciousness, you should choose color 1, so print the minimum deliciousness in that case: 40.\n\nSample Input 2\n\n10\r\n68 3\r\n17 2\r\n99 2\r\n92 4\r\n82 4\r\n10 3\r\n100 2\r\n78 1\r\n3 1\r\n35 4\n\nSample Output 2\n\n35", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"4\\n100 1\\n20 5\\n30 5\\n40 1\\n\", \"output\": \"40\\n\", \"testtype\": \"stdin\"}, {\"input\": \"10\\n68 3\\n17 2\\n99 2\\n92 4\\n82 4\\n10 3\\n100 2\\n78 1\\n3 1\\n35 4\\n\", \"output\": \"35\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc350_b", "question_title": "Dentist Aoki", "question_content": "Takahashi has N teeth, one in each of the holes numbered 1, 2, \\dots, N.\r\nDentist Aoki will perform Q treatments on these teeth and holes.\r\nIn the i-th treatment, hole T_i is treated as follows:\n\n- If there is a tooth in hole T_i, remove the tooth from hole T_i.\n- If there is no tooth in hole T_i (i.e., the hole is empty), grow a tooth in hole T_i.\n\nAfter all treatments are completed, how many teeth does Takahashi have?\n\nInput\n\nThe input is given from Standard Input in the following format:\nN Q\r\nT_1 T_2 \\dots T_Q\n\nOutput\n\nPrint the number of teeth as an integer.\n\nConstraints\n\n\n- All input values are integers.\n- 1 \\le N, Q \\le 1000\n- 1 \\le T_i \\le N\n\nSample Input 1\n\n30 6\r\n2 9 18 27 18 9\n\nSample Output 1\n\n28\r\n\nInitially, Takahashi has 30 teeth, and Aoki performs six treatments.\n\n- In the first treatment, hole 2 is treated. There is a tooth in hole 2, so it is removed.\n- In the second treatment, hole 9 is treated. There is a tooth in hole 9, so it is removed.\n- In the third treatment, hole 18 is treated. There is a tooth in hole 18, so it is removed.\n- In the fourth treatment, hole 27 is treated. There is a tooth in hole 27, so it is removed.\n- In the fifth treatment, hole 18 is treated. There is no tooth in hole 18, so a tooth is grown.\n- In the sixth treatment, hole 9 is treated. There is no tooth in hole 9, so a tooth is grown.\n\nThe final count of teeth is 28.\n\nSample Input 2\n\n1 7\r\n1 1 1 1 1 1 1\n\nSample Output 2\n\n0\n\nSample Input 3\n\n9 20\r\n9 5 1 2 2 2 8 9 2 1 6 2 6 5 8 7 8 5 9 8\n\nSample Output 3\n\n5", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"30 6\\n2 9 18 27 18 9\\n\", \"output\": \"28\\n\", \"testtype\": \"stdin\"}, {\"input\": \"1 7\\n1 1 1 1 1 1 1\\n\", \"output\": \"0\\n\", \"testtype\": \"stdin\"}, {\"input\": \"9 20\\n9 5 1 2 2 2 8 9 2 1 6 2 6 5 8 7 8 5 9 8\\n\", \"output\": \"5\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc355_e", "question_title": "Guess the Sum", "question_content": "This is an interactive problem (where your program interacts with the judge via input and output).\nYou are given a positive integer N and integers L and R such that 0 \\leq L \\leq R < 2^N. The judge has a hidden sequence A = (A_0, A_1, \\dots, A_{2^N-1}) consisting of integers between 0 and 99, inclusive.\nYour goal is to find the remainder when A_L + A_{L+1} + \\dots + A_R is divided by 100. However, you cannot directly know the values of the elements in the sequence A. Instead, you can ask the judge the following question:\n\n- Choose non-negative integers i and j such that 2^i(j+1) \\leq 2^N. Let l = 2^i j and r = 2^i (j+1) - 1. Ask for the remainder when A_l + A_{l+1} + \\dots + A_r is divided by 100.\n\nLet m be the minimum number of questions required to determine the remainder when A_L + A_{L+1} + \\dots + A_R is divided by 100 for any sequence A. You need to find this remainder within m questions.\n\nInput and Output\n\nThis is an interactive problem (where your program interacts with the judge via input and output).\nFirst, read the integers N, L, and R from Standard Input:\nN L R\r\n\nThen, repeat asking questions until you can determine the remainder when A_L + A_{L+1} + \\dots + A_R is divided by 100. Each question should be printed in the following format:\n? i j\r\n\nHere, i and j must satisfy the following constraints:\n\n- i and j are non-negative integers.\n- 2^i(j+1) \\leq 2^N\n\nThe response to the question will be given in the following format from Standard Input:\nT\r\n\nHere, T is the answer to the question, which is the remainder when A_l + A_{l+1} + \\dots + A_r is divided by 100, where l = 2^i j and r = 2^i (j+1) - 1.\nIf i and j do not satisfy the constraints, or if the number of questions exceeds m, then T will be -1.\nIf the judge returns -1, your program is already considered incorrect. In this case, terminate the program immediately.\nOnce you have determined the remainder when A_L + A_{L+1} + \\dots + A_R is divided by 100, print the remainder S in the following format and terminate the program immediately:\n! S\n\nInput and Output\n\nThis is an interactive problem (where your program interacts with the judge via input and output).\nFirst, read the integers N, L, and R from Standard Input:\nN L R\r\n\nThen, repeat asking questions until you can determine the remainder when A_L + A_{L+1} + \\dots + A_R is divided by 100. Each question should be printed in the following format:\n? i j\r\n\nHere, i and j must satisfy the following constraints:\n\n- i and j are non-negative integers.\n- 2^i(j+1) \\leq 2^N\n\nThe response to the question will be given in the following format from Standard Input:\nT\r\n\nHere, T is the answer to the question, which is the remainder when A_l + A_{l+1} + \\dots + A_r is divided by 100, where l = 2^i j and r = 2^i (j+1) - 1.\nIf i and j do not satisfy the constraints, or if the number of questions exceeds m, then T will be -1.\nIf the judge returns -1, your program is already considered incorrect. In this case, terminate the program immediately.\nOnce you have determined the remainder when A_L + A_{L+1} + \\dots + A_R is divided by 100, print the remainder S in the following format and terminate the program immediately:\n! S\n\nConstraints\n\n\n- 1 \\leq N \\leq 18\n- 0 \\leq L \\leq R \\leq 2^N - 1\n- All input values are integers.\n\n", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"3 1 5\\n31 41 59 26 53 58 97 93\\n3\\n\", \"output\": \"37\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc355_c", "question_title": "Bingo 2", "question_content": "There is an N \\times N grid, where the cell at the i-th row from the top and the j-th column from the left contains the integer N \\times (i-1) + j.\nOver T turns, integers will be announced. On Turn i, the integer A_i is announced, and the cell containing A_i is marked. Determine the turn on which Bingo is achieved for the first time. If Bingo is not achieved within T turns, print -1.\nHere, achieving Bingo means satisfying at least one of the following conditions:\n\n- There exists a row in which all N cells are marked.\n- There exists a column in which all N cells are marked.\n- There exists a diagonal line (from top-left to bottom-right or from top-right to bottom-left) in which all N cells are marked.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN T\r\nA_1 A_2 \\ldots A_T\n\nOutput\n\nIf Bingo is achieved within T turns, print the turn number on which Bingo is achieved for the first time; otherwise, print -1.\n\nConstraints\n\n\n- 2 \\leq N \\leq 2 \\times 10^3\n- 1 \\leq T \\leq \\min(N^2, 2 \\times 10^5)\n- 1 \\leq A_i \\leq N^2\n- A_i \\neq A_j if i \\neq j.\n- All input values are integers.\n\nSample Input 1\n\n3 5\r\n5 1 8 9 7\n\nSample Output 1\n\n4\r\n\nThe state of the grid changes as follows. Bingo is achieved for the first time on Turn 4.\n\nSample Input 2\n\n3 5\r\n4 2 9 7 5\n\nSample Output 2\n\n-1\r\n\nBingo is not achieved within five turns, so print -1.\n\nSample Input 3\n\n4 12\r\n13 9 6 5 2 7 16 14 8 3 10 11\n\nSample Output 3\n\n9", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"3 5\\n5 1 8 9 7\\n\", \"output\": \"4\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3 5\\n4 2 9 7 5\\n\", \"output\": \"-1\\n\", \"testtype\": \"stdin\"}, {\"input\": \"4 12\\n13 9 6 5 2 7 16 14 8 3 10 11\\n\", \"output\": \"9\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "3363", "question_title": "most-frequent-ids", "question_content": "The problem involves tracking the frequency of IDs in a collection that changes over time. You have two integer arrays, nums and freq, of equal length n. Each element in nums represents an ID, and the corresponding element in freq indicates how many times that ID should be added to or removed from the collection at each step.\n\nAddition of IDs: If freq[i] is positive, it means freq[i] IDs with the value nums[i] are added to the collection at step i.\nRemoval of IDs: If freq[i] is negative, it means -freq[i] IDs with the value nums[i] are removed from the collection at step i.\n\nReturn an array ans of length n, where ans[i] represents the count of the most frequent ID in the collection after the i^th step. If the collection is empty at any step, ans[i] should be 0 for that step.\n \nExample 1:\n\nInput: nums = [2,3,2,1], freq = [3,2,-3,1]\nOutput: [3,3,2,2]\nExplanation:\nAfter step 0, we have 3 IDs with the value of 2. So ans[0] = 3.\nAfter step 1, we have 3 IDs with the value of 2 and 2 IDs with the value of 3. So ans[1] = 3.\nAfter step 2, we have 2 IDs with the value of 3. So ans[2] = 2.\nAfter step 3, we have 2 IDs with the value of 3 and 1 ID with the value of 1. So ans[3] = 2.\n\nExample 2:\n\nInput: nums = [5,5,3], freq = [2,-2,1]\nOutput: [2,0,1]\nExplanation:\nAfter step 0, we have 2 IDs with the value of 5. So ans[0] = 2.\nAfter step 1, there are no IDs. So ans[1] = 0.\nAfter step 2, we have 1 ID with the value of 3. So ans[2] = 1.\n\n \nConstraints:\n\n1 <= nums.length == freq.length <= 10^5\n1 <= nums[i] <= 10^5\n-10^5 <= freq[i] <= 10^5\nfreq[i] != 0\nThe input is generated such that the occurrences of an ID will not be negative in any step.", "difficulty": "medium", "starter_code": "class Solution:\n    def mostFrequentIDs(self, nums: List[int], freq: List[int]) -> List[int]:\n        ", "public_test_cases": "[{\"input\": \"[2, 3, 2, 1]\\n[3, 2, -3, 1]\", \"output\": \"[3, 3, 2, 2]\", \"testtype\": \"functional\"}, {\"input\": \"[5, 5, 3]\\n[2, -2, 1]\", \"output\": \"[2, 0, 1]\", \"testtype\": \"functional\"}]"}
{"question_id": "3376", "question_title": "longest-common-suffix-queries", "question_content": "You are given two arrays of strings wordsContainer and wordsQuery.\nFor each wordsQuery[i], you need to find a string from wordsContainer that has the longest common suffix with wordsQuery[i]. If there are two or more strings in wordsContainer that share the longest common suffix, find the string that is the smallest in length. If there are two or more such strings that have the same smallest length, find the one that occurred earlier in wordsContainer.\nReturn an array of integers ans, where ans[i] is the index of the string in wordsContainer that has the longest common suffix with wordsQuery[i].\n \nExample 1:\n\nInput: wordsContainer = [\"abcd\",\"bcd\",\"xbcd\"], wordsQuery = [\"cd\",\"bcd\",\"xyz\"]\nOutput: [1,1,1]\nExplanation:\nLet's look at each wordsQuery[i] separately:\n\nFor wordsQuery[0] = \"cd\", strings from wordsContainer that share the longest common suffix \"cd\" are at indices 0, 1, and 2. Among these, the answer is the string at index 1 because it has the shortest length of 3.\nFor wordsQuery[1] = \"bcd\", strings from wordsContainer that share the longest common suffix \"bcd\" are at indices 0, 1, and 2. Among these, the answer is the string at index 1 because it has the shortest length of 3.\nFor wordsQuery[2] = \"xyz\", there is no string from wordsContainer that shares a common suffix. Hence the longest common suffix is \"\", that is shared with strings at index 0, 1, and 2. Among these, the answer is the string at index 1 because it has the shortest length of 3.\n\n\nExample 2:\n\nInput: wordsContainer = [\"abcdefgh\",\"poiuygh\",\"ghghgh\"], wordsQuery = [\"gh\",\"acbfgh\",\"acbfegh\"]\nOutput: [2,0,2]\nExplanation:\nLet's look at each wordsQuery[i] separately:\n\nFor wordsQuery[0] = \"gh\", strings from wordsContainer that share the longest common suffix \"gh\" are at indices 0, 1, and 2. Among these, the answer is the string at index 2 because it has the shortest length of 6.\nFor wordsQuery[1] = \"acbfgh\", only the string at index 0 shares the longest common suffix \"fgh\". Hence it is the answer, even though the string at index 2 is shorter.\nFor wordsQuery[2] = \"acbfegh\", strings from wordsContainer that share the longest common suffix \"gh\" are at indices 0, 1, and 2. Among these, the answer is the string at index 2 because it has the shortest length of 6.\n\n\n \nConstraints:\n\n1 <= wordsContainer.length, wordsQuery.length <= 10^4\n1 <= wordsContainer[i].length <= 5 * 10^3\n1 <= wordsQuery[i].length <= 5 * 10^3\nwordsContainer[i] consists only of lowercase English letters.\nwordsQuery[i] consists only of lowercase English letters.\nSum of wordsContainer[i].length is at most 5 * 10^5.\nSum of wordsQuery[i].length is at most 5 * 10^5.", "difficulty": "hard", "starter_code": "class Solution:\n    def stringIndices(self, wordsContainer: List[str], wordsQuery: List[str]) -> List[int]:\n        ", "public_test_cases": "[{\"input\": \"[\\\"abcd\\\", \\\"bcd\\\", \\\"xbcd\\\"]\\n[\\\"cd\\\", \\\"bcd\\\", \\\"xyz\\\"]\", \"output\": \"[1, 1, 1]\", \"testtype\": \"functional\"}, {\"input\": \"[\\\"abcdefgh\\\", \\\"poiuygh\\\", \\\"ghghgh\\\"]\\n[\\\"gh\\\", \\\"acbfgh\\\", \\\"acbfegh\\\"]\", \"output\": \"[2, 0, 2]\", \"testtype\": \"functional\"}]"}
{"question_id": "3420", "question_title": "find-occurrences-of-an-element-in-an-array", "question_content": "You are given an integer array nums, an integer array queries, and an integer x.\nFor each queries[i], you need to find the index of the queries[i]^th occurrence of x in the nums array. If there are fewer than queries[i] occurrences of x, the answer should be -1 for that query.\nReturn an integer array answer containing the answers to all queries.\n \nExample 1:\n\nInput: nums = [1,3,1,7], queries = [1,3,2,4], x = 1\nOutput: [0,-1,2,-1]\nExplanation:\n\nFor the 1^st query, the first occurrence of 1 is at index 0.\nFor the 2^nd query, there are only two occurrences of 1 in nums, so the answer is -1.\nFor the 3^rd query, the second occurrence of 1 is at index 2.\nFor the 4^th query, there are only two occurrences of 1 in nums, so the answer is -1.\n\n\nExample 2:\n\nInput: nums = [1,2,3], queries = [10], x = 5\nOutput: [-1]\nExplanation:\n\nFor the 1^st query, 5 doesn't exist in nums, so the answer is -1.\n\n\n \nConstraints:\n\n1 <= nums.length, queries.length <= 10^5\n1 <= queries[i] <= 10^5\n1 <= nums[i], x <= 10^4", "difficulty": "medium", "starter_code": "class Solution:\n    def occurrencesOfElement(self, nums: List[int], queries: List[int], x: int) -> List[int]:\n        ", "public_test_cases": "[{\"input\": \"[1, 3, 1, 7]\\n[1, 3, 2, 4]\\n1\", \"output\": \"[0, -1, 2, -1]\", \"testtype\": \"functional\"}, {\"input\": \"[1, 2, 3]\\n[10]\\n5\", \"output\": \"[-1]\", \"testtype\": \"functional\"}]"}
{"question_id": "abc366_b", "question_title": "Vertical Writing", "question_content": "You are given a horizontally written text. Convert it to vertical writing, filling spaces with *.\n\nYou are given N strings S_1, S_2, \\dots, S_N consisting of lowercase English letters. Let M be the maximum length of these strings.\nPrint M strings T_1, T_2, \\dots, T_M that satisfy the following conditions:\n\n- Each T_i consists of lowercase English letters and *.\n- Each T_i does not end with *.\n- For each 1 \\leq i \\leq N, the following holds:\n- For each 1 \\leq j \\leq |S_i|, the (N-i+1)-th character of T_j exists, and the concatenation of the (N-i+1)-th characters of T_1, T_2, \\dots, T_{|S_i|} in this order equals S_i.\n- For each |S_i| + 1 \\leq j \\leq M, the (N-i+1)-th character of T_j either does not exist or is *.\n\n\n\nHere, |S_i| denotes the length of the string S_i.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\nS_1\nS_2\n\\vdots\nS_N\n\nOutput\n\nPrint the answer in the following format:\nT_1\nT_2\n\\vdots\nT_M\n\nConstraints\n\n\n- N is an integer between 1 and 100, inclusive.\n- Each S_i is a string of lowercase English letters with length between 1 and 100, inclusive.\n\nSample Input 1\n\n3\nabc\nde\nfghi\n\nSample Output 1\n\nfda\ngeb\nh*c\ni\n\nPlacing * as the 2nd character of T_3 puts the c in the correct position.\nOn the other hand, placing * as the 2nd and 3rd characters of T_4 would make T_4 end with *, which violates the condition.\n\nSample Input 2\n\n3\natcoder\nbeginner\ncontest\n\nSample Output 2\n\ncba\noet\nngc\ntio\nend\nsne\nter\n*r", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"3\\nabc\\nde\\nfghi\\n\", \"output\": \"fda\\ngeb\\nh*c\\ni\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3\\natcoder\\nbeginner\\ncontest\\n\", \"output\": \"cba\\noet\\nngc\\ntio\\nend\\nsne\\nter\\n*r\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc366_d", "question_title": "Cuboid Sum Query", "question_content": "You are given a positive integer N, and an integer A_{x,y,z} for each triple of integers (x, y, z) such that 1 \\leq x, y, z \\leq N.\nYou will be given Q queries in the following format, which must be processed in order.\nFor the i-th query (1 \\leq i \\leq Q), you are given a tuple of integers (Lx_i, Rx_i, Ly_i, Ry_i, Lz_i, Rz_i) such that 1 \\leq Lx_i \\leq Rx_i \\leq N, 1 \\leq Ly_i \\leq Ry_i \\leq N, and 1 \\leq Lz_i \\leq Rz_i \\leq N. Find:\n\\displaystyle{\\sum_{x=Lx_i}^{Rx_i} \\sum_{y=Ly_i}^{Ry_i} \\sum_{z=Lz_i}^{Rz_i} A_{x,y,z}}.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nA_{1,1,1} A_{1,1,2} \\ldots A_{1,1,N}\r\nA_{1,2,1} A_{1,2,2} \\ldots A_{1,2,N}\r\n\\vdots\r\nA_{1,N,1} A_{1,N,2} \\ldots A_{1,N,N}\r\nA_{2,1,1} A_{2,1,2} \\ldots A_{2,1,N}\r\nA_{2,2,1} A_{2,2,2} \\ldots A_{2,2,N}\r\n\\vdots\r\nA_{2,N,1} A_{2,N,2} \\ldots A_{2,N,N}\r\n\\vdots\r\nA_{N,1,1} A_{N,1,2} \\ldots A_{N,1,N}\r\nA_{N,2,1} A_{N,2,2} \\ldots A_{N,2,N}\r\n\\vdots\r\nA_{N,N,1} A_{N,N,2} \\ldots A_{N,N,N}\r\nQ\r\nLx_1 Rx_1 Ly_1 Ry_1 Lz_1 Rz_1\r\nLx_2 Rx_2 Ly_2 Ry_2 Lz_2 Rz_2\r\n\\vdots\r\nLx_Q Rx_Q Ly_Q Ry_Q Lz_Q Rz_Q\n\nOutput\n\nPrint Q lines.\r\nThe i-th line should contain the answer to the i-th query.\n\nConstraints\n\n\n- 1 \\leq N \\leq 100\n- 1 \\leq Q \\leq 2 \\times 10^{5}\n- 0 \\leq A_{x,y,z} \\leq 999 (1 \\leq x, y, z \\leq N)\n- 1 \\leq Lx_i \\leq Rx_i \\leq N (1 \\leq i \\leq Q)\n- 1 \\leq Ly_i \\leq Ry_i \\leq N (1 \\leq i \\leq Q)\n- 1 \\leq Lz_i \\leq Rz_i \\leq N (1 \\leq i \\leq Q)\n- All input values are integers.\n\nSample Input 1\n\n2\r\n1 2\r\n3 4\r\n5 6\r\n7 8\r\n2\r\n1 2 2 2 1 1\r\n2 2 1 2 1 2\n\nSample Output 1\n\n10\r\n26\r\n\nFor the 1st query, the sought value is A_{1,2,1} + A_{2,2,1} = 3 + 7 = 10. Thus, print 10.\nFor the 2nd query, the sought value is A_{2,1,1} + A_{2,1,2} + A_{2,2,1} + A_{2,2,2} = 5 + 6 + 7 + 8 = 26. Thus, print 26.\n\nSample Input 2\n\n3\r\n733 857 714\r\n956 208 257\r\n123 719 648\r\n840 881 245\r\n245 112 746\r\n306 942 694\r\n58 870 849\r\n13 208 789\r\n687 906 783\r\n8\r\n3 3 3 3 1 1\r\n1 3 2 3 3 3\r\n2 2 2 3 1 1\r\n1 3 1 1 1 1\r\n2 3 2 3 2 3\r\n1 2 1 1 1 2\r\n3 3 2 2 1 3\r\n1 2 2 3 2 3\n\nSample Output 2\n\n687\r\n3917\r\n551\r\n1631\r\n5180\r\n3311\r\n1010\r\n4326", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"2\\n1 2\\n3 4\\n5 6\\n7 8\\n2\\n1 2 2 2 1 1\\n2 2 1 2 1 2\\n\", \"output\": \"10\\n26\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3\\n733 857 714\\n956 208 257\\n123 719 648\\n840 881 245\\n245 112 746\\n306 942 694\\n58 870 849\\n13 208 789\\n687 906 783\\n8\\n3 3 3 3 1 1\\n1 3 2 3 3 3\\n2 2 2 3 1 1\\n1 3 1 1 1 1\\n2 3 2 3 2 3\\n1 2 1 1 1 2\\n3 3 2 2 1 3\\n1 2 2 3 2 3\\n\", \"output\": \"687\\n3917\\n551\\n1631\\n5180\\n3311\\n1010\\n4326\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc366_c", "question_title": "Balls and Bag Query", "question_content": "You have an empty bag.\r\nYou are given Q queries, which must be processed in order.\nThere are three types of queries.\n\n- 1 x : Put one ball with the integer x written on it into the bag.\n- 2 x : Remove one ball with the integer x written on it from the bag and discard it. It is guaranteed that the bag has a ball with the integer x written on it when this query is given.\n- 3 : Print the number of different integers written on the balls in the bag.\n\nInput\n\nThe input is given from Standard Input in the following format:\nQ\r\n\\text{query}_1\r\n\\text{query}_2\r\n\\vdots\r\n\\text{query}_Q\r\n\nThe i-th query \\text{query}_i is given in one of the following three formats:\n1 x\r\n\n2 x\r\n\n3\n\nOutput\n\nIf there are K queries of the third type, print K lines.\r\nThe i-th line (1 \\leq i \\leq K) should contain the answer to the i-th query of the third type.\n\nConstraints\n\n\n- 1 \\leq Q \\leq 2 \\times 10^{5}\n- 1 \\leq x \\leq 10^{6}\n- When a query of the second type is given, the bag has a ball with the integer x written on it.\n- There is at least one query of the third type.\n- All input values are integers.\n\nSample Input 1\n\n8\r\n1 3\r\n1 1\r\n1 4\r\n3\r\n2 1\r\n3\r\n1 5\r\n3\n\nSample Output 1\n\n3\r\n2\r\n3\r\n\nInitially, the bag is empty.\nFor the first query 1 3, a ball with the integer 3 written on it enters the bag.\nFor the second query 1 1, a ball with the integer 1 written on it enters the bag.\nFor the third query 1 4, a ball with the integer 4 written on it enters the bag.\nFor the fourth query 3, the bag has balls with the integers 1, 3, 4, so print 3.\nFor the fifth query 2 1, a ball with the integer 1 written on it is removed from the bag.\nFor the sixth query 3, the bag has balls with the integers 3, 4, so print 2.\nFor the seventh query 1 5, a ball with the integer 5 written on it enters the bag.\nFor the eighth query 3, the bag has balls with the integers 3, 4, 5, so print 3.\n\nSample Input 2\n\n8\r\n1 2\r\n1 2\r\n3\r\n2 2\r\n1 4\r\n1 4\r\n2 2\r\n3\n\nSample Output 2\n\n1\r\n1", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"8\\n1 3\\n1 1\\n1 4\\n3\\n2 1\\n3\\n1 5\\n3\\n\", \"output\": \"3\\n2\\n3\\n\", \"testtype\": \"stdin\"}, {\"input\": \"8\\n1 2\\n1 2\\n3\\n2 2\\n1 4\\n1 4\\n2 2\\n3\\n\", \"output\": \"1\\n1\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc367_f", "question_title": "Rearrange Query", "question_content": "You are given sequences of positive integers of length N: A=(A_1,A_2,\\ldots,A_N) and B=(B_1,B_2,\\ldots,B_N).\nYou are given Q queries to process in order. The i-th query is explained below.\n\n- You are given positive integers l_i,r_i,L_i,R_i. Print Yes if it is possible to rearrange the subsequence (A_{l_i},A_{l_i+1},\\ldots,A_{r_i}) to match the subsequence (B_{L_i},B_{L_i+1},\\ldots,B_{R_i}), and No otherwise.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN Q\r\nA_1 A_2 \\ldots A_N\r\nB_1 B_2 \\ldots B_N\r\nl_1 r_1 L_1 R_1\r\nl_2 r_2 L_2 R_2\r\n\\vdots\r\nl_Q r_Q L_Q R_Q\n\nOutput\n\nPrint Q lines. The i-th line should contain the answer to the i-th query.\n\nConstraints\n\n\n-  1\\leq N,Q\\leq 2\\times 10^5\n-  1\\leq A_i,B_i\\leq N\n-  1\\leq l_i \\leq r_i\\leq N\n-  1\\leq L_i \\leq R_i\\leq N\n- All input values are integers.\n\nSample Input 1\n\n5 4\r\n1 2 3 2 4\r\n2 3 1 4 2\r\n1 3 1 3\r\n1 2 3 5\r\n1 4 2 5\r\n1 5 1 5\n\nSample Output 1\n\nYes\r\nNo\r\nNo\r\nYes\r\n\n\n- For the 1st query, it is possible to rearrange (1,2,3) to match (2,3,1). Hence, we print Yes.\n- For the 2nd query, it is impossible to rearrange (1,2) in any way to match (1,4,2). Hence, we print No.\n- For the 3rd query, it is impossible to rearrange (1,2,3,2) in any way to match (3,1,4,2). Hence, we print No.\n- For the 4th query, it is possible to rearrange (1,2,3,2,4) to match (2,3,1,4,2). Hence, we print Yes.\n\nSample Input 2\n\n4 4\r\n4 4 4 4\r\n4 4 4 4\r\n1 2 2 3\r\n3 3 1 1\r\n1 3 1 4\r\n1 4 2 3\n\nSample Output 2\n\nYes\r\nYes\r\nNo\r\nNo", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"5 4\\n1 2 3 2 4\\n2 3 1 4 2\\n1 3 1 3\\n1 2 3 5\\n1 4 2 5\\n1 5 1 5\\n\", \"output\": \"Yes\\nNo\\nNo\\nYes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"4 4\\n4 4 4 4\\n4 4 4 4\\n1 2 2 3\\n3 3 1 1\\n1 3 1 4\\n1 4 2 3\\n\", \"output\": \"Yes\\nYes\\nNo\\nNo\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc371_d", "question_title": "1D Country", "question_content": "There are N villages on a number line. The i-th village is located at coordinate X_i, and has P_i villagers.\nAnswer Q queries. The i-th query is in the following format:\n\n- Given integers L_i and R_i, find the total number of villagers living in villages located between coordinates L_i and R_i, inclusive.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\nX_1 \\ldots X_N\nP_1 \\ldots P_N\nQ\nL_1 R_1\n\\vdots\nL_Q R_Q\n\nOutput\n\nPrint Q lines.\nThe i-th line(1\\leq i \\leq Q) should contain the answer to the i-th query.\n\nConstraints\n\n\n- 1\\leq N,Q\\leq 2\\times 10^5\n- -10^9\\leq X_1 < X_2 < \\ldots < X_N \\leq 10^9\n- 1\\leq P_i\\leq 10^9\n- -10^9\\leq L_i \\leq R_i \\leq 10^9\n- All input values are integers.\n\nSample Input 1\n\n4\n1 3 5 7\n1 2 3 4\n4\n1 1\n2 6\n0 10\n2 2\n\nSample Output 1\n\n1\n5\n10\n0\n\nConsider the first query. The villages between coordinates 1 and 1 are the village at coordinate 1, with 1 villager. Hence, the answer is 1.\nConsider the second query. The villages between coordinates 2 and 6 are the villages at coordinates 3 and 5, with 2 and 3 villagers, respectively. Hence, the answer is 2+3=5.\n\nSample Input 2\n\n7\n-10 -5 -3 -1 0 1 4\n2 5 6 5 2 1 7\n8\n-7 7\n-1 5\n-10 -4\n-8 10\n-5 0\n-10 5\n-8 7\n-8 -3\n\nSample Output 2\n\n26\n15\n7\n26\n18\n28\n26\n11", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"4\\n1 3 5 7\\n1 2 3 4\\n4\\n1 1\\n2 6\\n0 10\\n2 2\\n\", \"output\": \"1\\n5\\n10\\n0\\n\", \"testtype\": \"stdin\"}, {\"input\": \"7\\n-10 -5 -3 -1 0 1 4\\n2 5 6 5 2 1 7\\n8\\n-7 7\\n-1 5\\n-10 -4\\n-8 10\\n-5 0\\n-10 5\\n-8 7\\n-8 -3\\n\", \"output\": \"26\\n15\\n7\\n26\\n18\\n28\\n26\\n11\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc372_e", "question_title": "K", "question_content": "There is an undirected graph with N vertices and 0 edges. The vertices are numbered 1 to N.\nYou are given Q queries to process in order. Each query is of one of the following two types:\n\n- Type 1: Given in the format 1 u v. Add an edge between vertices u and v.\n- Type 2: Given in the format 2 v k. Print the k-th largest vertex number among the vertices connected to vertex v. If there are fewer than k vertices connected to v, print -1.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN Q\r\n\\mathrm{query}_1\r\n\\mathrm{query}_2\r\n\\vdots\r\n\\mathrm{query}_Q\r\n\nHere, \\mathrm{query}_i is the i-th query and is given in one of the following formats:\n1 u v\r\n\n2 v k\n\nOutput\n\nLet q be the number of Type 2 queries. Print q lines.\r\nThe i-th line should contain the answer to the i-th Type 2 query.\n\nConstraints\n\n\n- 1 \\leq N, Q \\leq 2 \\times 10^5\n- In a Type 1 query, 1 \\leq u < v \\leq N.\n- In a Type 2 query, 1 \\leq v \\leq N, 1 \\leq k \\leq 10.\n- All input values are integers.\n\nSample Input 1\n\n4 10\r\n1 1 2\r\n2 1 1\r\n2 1 2\r\n2 1 3\r\n1 1 3\r\n1 2 3\r\n1 3 4\r\n2 1 1\r\n2 1 3\r\n2 1 5\n\nSample Output 1\n\n2\r\n1\r\n-1\r\n4\r\n2\r\n-1\r\n\n\n- In the first query, an edge is added between vertices 1 and 2.\n- In the second query, two vertices are connected to vertex 1: 1 and 2. Among them, the 1-st largest vertex number is 2, which should be printed.\n- In the third query, two vertices are connected to vertex 1: 1 and 2. Among them, the 2-nd largest vertex number is 1, which should be printed.\n- In the fourth query, two vertices are connected to vertex 1: 1 and 2, which is fewer than 3, so print -1.\n- In the fifth query, an edge is added between vertices 1 and 3.\n- In the sixth query, an edge is added between vertices 2 and 3.\n- In the seventh query, an edge is added between vertices 3 and 4.\n- In the eighth query, four vertices are connected to vertex 1: 1,2,3,4. Among them, the 1-st largest vertex number is 4, which should be printed.\n- In the ninth query, four vertices are connected to vertex 1: 1,2,3,4. Among them, the 3-rd largest vertex number is 2, which should be printed.\n- In the tenth query, four vertices are connected to vertex 1: 1,2,3,4, which is fewer than 5, so print -1.\n\nSample Input 2\n\n6 20\r\n1 3 4\r\n1 3 5\r\n2 1 1\r\n2 3 1\r\n1 1 5\r\n2 6 9\r\n2 1 3\r\n2 6 1\r\n1 4 6\r\n2 2 1\r\n2 6 2\r\n2 4 7\r\n1 1 4\r\n2 6 2\r\n2 3 4\r\n1 2 5\r\n2 4 1\r\n1 1 6\r\n2 3 3\r\n2 1 3\n\nSample Output 2\n\n1\r\n5\r\n-1\r\n3\r\n6\r\n2\r\n5\r\n-1\r\n5\r\n3\r\n6\r\n4\r\n4", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"4 10\\n1 1 2\\n2 1 1\\n2 1 2\\n2 1 3\\n1 1 3\\n1 2 3\\n1 3 4\\n2 1 1\\n2 1 3\\n2 1 5\\n\", \"output\": \"2\\n1\\n-1\\n4\\n2\\n-1\\n\", \"testtype\": \"stdin\"}, {\"input\": \"6 20\\n1 3 4\\n1 3 5\\n2 1 1\\n2 3 1\\n1 1 5\\n2 6 9\\n2 1 3\\n2 6 1\\n1 4 6\\n2 2 1\\n2 6 2\\n2 4 7\\n1 1 4\\n2 6 2\\n2 3 4\\n1 2 5\\n2 4 1\\n1 1 6\\n2 3 3\\n2 1 3\\n\", \"output\": \"1\\n5\\n-1\\n3\\n6\\n2\\n5\\n-1\\n5\\n3\\n6\\n4\\n4\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "3495", "question_title": "k-th-nearest-obstacle-queries", "question_content": "There is an infinite 2D plane.\nYou are given a positive integer k. You are also given a 2D array queries, which contains the following queries:\n\nqueries[i] = [x, y]: Build an obstacle at coordinate (x, y) in the plane. It is guaranteed that there is no obstacle at this coordinate when this query is made.\n\nAfter each query, you need to find the distance of the k^th nearest obstacle from the origin.\nReturn an integer array results where results[i] denotes the k^th nearest obstacle after query i, or results[i] == -1 if there are less than k obstacles.\nNote that initially there are no obstacles anywhere.\nThe distance of an obstacle at coordinate (x, y) from the origin is given by |x| + |y|.\n \nExample 1:\n\nInput: queries = [[1,2],[3,4],[2,3],[-3,0]], k = 2\nOutput: [-1,7,5,3]\nExplanation:\n\nInitially, there are 0 obstacles.\nAfter queries[0], there are less than 2 obstacles.\nAfter queries[1], there are obstacles at distances 3 and 7.\nAfter queries[2], there are obstacles at distances 3, 5, and 7.\nAfter queries[3], there are obstacles at distances 3, 3, 5, and 7.\n\n\nExample 2:\n\nInput: queries = [[5,5],[4,4],[3,3]], k = 1\nOutput: [10,8,6]\nExplanation:\n\nAfter queries[0], there is an obstacle at distance 10.\nAfter queries[1], there are obstacles at distances 8 and 10.\nAfter queries[2], there are obstacles at distances 6, 8, and 10.\n\n\n \nConstraints:\n\n1 <= queries.length <= 2 * 10^5\nAll queries[i] are unique.\n-10^9 <= queries[i][0], queries[i][1] <= 10^9\n1 <= k <= 10^5", "difficulty": "medium", "starter_code": "class Solution:\n    def resultsArray(self, queries: List[List[int]], k: int) -> List[int]:\n        ", "public_test_cases": "[{\"input\": \"[[1, 2], [3, 4], [2, 3], [-3, 0]]\\n2\", \"output\": \"[-1, 7, 5, 3]\", \"testtype\": \"functional\"}, {\"input\": \"[[5, 5], [4, 4], [3, 3]]\\n1\", \"output\": \"[10, 8, 6]\", \"testtype\": \"functional\"}]"}
{"question_id": "3541", "question_title": "report-spam-message", "question_content": "You are given an array of strings message and an array of strings bannedWords.\nAn array of words is considered spam if there are at least two words in it that exactly match any word in bannedWords.\nReturn true if the array message is spam, and false otherwise.\n \nExample 1:\n\nInput: message = [\"hello\",\"world\",\"leetcode\"], bannedWords = [\"world\",\"hello\"]\nOutput: true\nExplanation:\nThe words \"hello\" and \"world\" from the message array both appear in the bannedWords array.\n\nExample 2:\n\nInput: message = [\"hello\",\"programming\",\"fun\"], bannedWords = [\"world\",\"programming\",\"leetcode\"]\nOutput: false\nExplanation:\nOnly one word from the message array (\"programming\") appears in the bannedWords array.\n\n \nConstraints:\n\n1 <= message.length, bannedWords.length <= 10^5\n1 <= message[i].length, bannedWords[i].length <= 15\nmessage[i] and bannedWords[i] consist only of lowercase English letters.", "difficulty": "medium", "starter_code": "class Solution:\n    def reportSpam(self, message: List[str], bannedWords: List[str]) -> bool:\n        ", "public_test_cases": "[{\"input\": \"[\\\"hello\\\", \\\"world\\\", \\\"leetcode\\\"]\\n[\\\"world\\\", \\\"hello\\\"]\", \"output\": \"true\", \"testtype\": \"functional\"}, {\"input\": \"[\\\"hello\\\", \\\"programming\\\", \\\"fun\\\"]\\n[\\\"world\\\", \\\"programming\\\", \\\"leetcode\\\"]\", \"output\": \"false\", \"testtype\": \"functional\"}]"}
{"question_id": "3583", "question_title": "sorted-gcd-pair-queries", "question_content": "You are given an integer array nums of length n and an integer array queries.\nLet gcdPairs denote an array obtained by calculating the GCD of all possible pairs (nums[i], nums[j]), where 0 <= i < j < n, and then sorting these values in ascending order.\nFor each query queries[i], you need to find the element at index queries[i] in gcdPairs.\nReturn an integer array answer, where answer[i] is the value at gcdPairs[queries[i]] for each query.\nThe term gcd(a, b) denotes the greatest common divisor of a and b.\n \nExample 1:\n\nInput: nums = [2,3,4], queries = [0,2,2]\nOutput: [1,2,2]\nExplanation:\ngcdPairs = [gcd(nums[0], nums[1]), gcd(nums[0], nums[2]), gcd(nums[1], nums[2])] = [1, 2, 1].\nAfter sorting in ascending order, gcdPairs = [1, 1, 2].\nSo, the answer is [gcdPairs[queries[0]], gcdPairs[queries[1]], gcdPairs[queries[2]]] = [1, 2, 2].\n\nExample 2:\n\nInput: nums = [4,4,2,1], queries = [5,3,1,0]\nOutput: [4,2,1,1]\nExplanation:\ngcdPairs sorted in ascending order is [1, 1, 1, 2, 2, 4].\n\nExample 3:\n\nInput: nums = [2,2], queries = [0,0]\nOutput: [2,2]\nExplanation:\ngcdPairs = [2].\n\n \nConstraints:\n\n2 <= n == nums.length <= 10^5\n1 <= nums[i] <= 5 * 10^4\n1 <= queries.length <= 10^5\n0 <= queries[i] < n * (n - 1) / 2", "difficulty": "hard", "starter_code": "class Solution:\n    def gcdValues(self, nums: List[int], queries: List[int]) -> List[int]:\n        ", "public_test_cases": "[{\"input\": \"[2, 3, 4]\\n[0, 2, 2]\", \"output\": \"[1, 2, 2]\", \"testtype\": \"functional\"}, {\"input\": \"[4, 4, 2, 1]\\n[5, 3, 1, 0]\", \"output\": \"[4, 2, 1, 1]\", \"testtype\": \"functional\"}, {\"input\": \"[2, 2]\\n[0, 0]\", \"output\": \"[2, 2]\", \"testtype\": \"functional\"}]"}
{"question_id": "abc389_f", "question_title": "Rated Range", "question_content": "Takahashi plans to participate in N AtCoder contests.\nIn the i-th contest (1 \\leq i \\leq N), if his rating is between L_i and R_i (inclusive), his rating increases by 1.\nYou are given Q queries in the following format:\n\n- An integer X is given. Assuming that Takahashi's initial rating is X, determine his rating after participating in all N contests.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nL_1 R_1\r\nL_2 R_2\r\n\\vdots\r\nL_N R_N\r\nQ\r\n\\text{query}_1\r\n\\text{query}_2\r\n\\vdots\r\n\\text{query}_Q\r\n\nHere, \\text{query}_i is the i-th query in the form:\nX\n\nOutput\n\nPrint Q lines. The i-th line should contain the answer to the i-th query.\n\nConstraints\n\n\n- 1 \\leq N \\leq 2 \\times 10^5\n- 1 \\leq L_i \\leq R_i \\leq 5 \\times 10^5 (1 \\leq i \\leq N)\n- 1 \\leq Q \\leq 3 \\times 10^5\n- For each query, 1 \\leq X \\leq 5 \\times 10^5.\n- All input values are integers.\n\nSample Input 1\n\n5\r\n1 5\r\n1 3\r\n3 6\r\n2 4\r\n4 7\r\n3\r\n3\r\n2\r\n5\n\nSample Output 1\n\n6\r\n6\r\n8\r\n\nFor the 1st query, the rating changes as follows:\n\n- In the 1st contest, the rating is between 1 and 5, so it increases by 1, becoming 4.  \n- In the 2nd contest, the rating is not between 1 and 3, so it remains 4.  \n- In the 3rd contest, the rating is between 3 and 6, so it increases by 1, becoming 5.  \n- In the 4th contest, the rating is not between 2 and 4, so it remains 5.  \n- In the 5th contest, the rating is between 4 and 7, so it increases by 1, becoming 6.\n\nFor the 2nd query, the rating increases in the 1st, 2nd, 3rd, and 5th contests, ending at 6.\nFor the 3rd query, the rating increases in the 1st, 3rd, and 5th contests, ending at 8.\n\nSample Input 2\n\n10\r\n1 1999\r\n1 1999\r\n1200 2399\r\n1 1999\r\n1 1999\r\n1 1999\r\n2000 500000\r\n1 1999\r\n1 1999\r\n1600 2799\r\n7\r\n1\r\n1995\r\n2000\r\n2399\r\n500000\r\n2799\r\n1000\n\nSample Output 2\n\n8\r\n2002\r\n2003\r\n2402\r\n500001\r\n2800\r\n1007\n\nSample Input 3\n\n15\r\n260522 414575\r\n436426 479445\r\n148772 190081\r\n190629 433447\r\n47202 203497\r\n394325 407775\r\n304784 463982\r\n302156 468417\r\n131932 235902\r\n78537 395728\r\n223857 330739\r\n286918 329211\r\n39679 238506\r\n63340 186568\r\n160016 361868\r\n10\r\n287940\r\n296263\r\n224593\r\n101449\r\n336991\r\n390310\r\n323355\r\n177068\r\n11431\r\n8580\n\nSample Output 3\n\n287946\r\n296269\r\n224599\r\n101453\r\n336997\r\n390315\r\n323363\r\n177075\r\n11431\r\n8580", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"5\\n1 5\\n1 3\\n3 6\\n2 4\\n4 7\\n3\\n3\\n2\\n5\", \"output\": \"6\\n6\\n8\", \"testtype\": \"stdin\"}, {\"input\": \"10\\n1 1999\\n1 1999\\n1200 2399\\n1 1999\\n1 1999\\n1 1999\\n2000 500000\\n1 1999\\n1 1999\\n1600 2799\\n7\\n1\\n1995\\n2000\\n2399\\n500000\\n2799\\n1000\", \"output\": \"8\\n2002\\n2003\\n2402\\n500001\\n2800\\n1007\", \"testtype\": \"stdin\"}, {\"input\": \"15\\n260522 414575\\n436426 479445\\n148772 190081\\n190629 433447\\n47202 203497\\n394325 407775\\n304784 463982\\n302156 468417\\n131932 235902\\n78537 395728\\n223857 330739\\n286918 329211\\n39679 238506\\n63340 186568\\n160016 361868\\n10\\n287940\\n296263\\n224593\\n101449\\n336991\\n390310\\n323355\\n177068\\n11431\\n8580\", \"output\": \"287946\\n296269\\n224599\\n101453\\n336997\\n390315\\n323363\\n177075\\n11431\\n8580\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc391_a", "question_title": "Lucky Direction", "question_content": "You are given a string D representing one of the eight directions (north, east, west, south, northeast, northwest, southeast, southwest). The correspondence between the directions and their representing strings is as follows.\n\n- North: N\n- East: E\n- West: W\n- South: S\n- Northeast: NE\n- Northwest: NW\n- Southeast: SE\n- Southwest: SW\n\nPrint the string representing the direction opposite to the direction denoted by D.\n\nInput\n\nThe input is given from Standard Input in the following format:\nD\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- D is one of N, E, W, S, NE, NW, SE, SW.\n\nSample Input 1\n\nN\n\nSample Output 1\n\nS\r\n\nPrint S, which represents south, the direction opposite to north.\n\nSample Input 2\n\nSE\n\nSample Output 2\n\nNW\r\n\nPrint NW, which represents northwest, the direction opposite to southeast.", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"N\", \"output\": \"S\", \"testtype\": \"stdin\"}, {\"input\": \"SE\", \"output\": \"NW\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc392_f", "question_title": "Insert", "question_content": "There is an empty array A. For i = 1,2,\\ldots,N, perform the following operation in order:\n\n- Insert the number i into A so that it becomes the P_i-th element from the beginning.\n- More precisely, replace A with the concatenation of the first P_i-1 elements of A, then i, then the remaining elements of A starting from the P_i-th element, in this order.\n\n\n\nOutput the final array A after all operations have been completed.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nP_1 P_2 \\ldots P_N\n\nOutput\n\nLet the final array be A = (A_1, A_2, \\ldots, A_N).\r\nPrint A_1, A_2, \\ldots, A_N in this order, separated by spaces.\n\nConstraints\n\n\n- 1 \\leq N \\leq 5\\times 10^5\n- 1 \\leq P_i \\leq i\n- All input values are integers.\n\nSample Input 1\n\n4\r\n1 1 2 1\n\nSample Output 1\n\n4 2 3 1\r\n\nThe operations are performed as follows:\n\n- Insert the number 1 so that it becomes the 1st element of A. Now, A = (1).\n- Insert the number 2 so that it becomes the 1st element of A. Now, A = (2, 1).\n- Insert the number 3 so that it becomes the 2nd element of A. Now, A = (2, 3, 1).\n- Insert the number 4 so that it becomes the 1st element of A. Now, A = (4, 2, 3, 1).\n\nSample Input 2\n\n5\r\n1 2 3 4 5\n\nSample Output 2\n\n1 2 3 4 5", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"4\\n1 1 2 1\", \"output\": \"4 2 3 1\", \"testtype\": \"stdin\"}, {\"input\": \"5\\n1 2 3 4 5\", \"output\": \"1 2 3 4 5\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc392_c", "question_title": "Bib", "question_content": "There are N people numbered from 1 to N.\nPerson i is wearing a bib with the number Q_i and is staring at person P_i.\nFor each i = 1,2,\\ldots,N, find the number written on the bib of the person that the person wearing the bib with number i is staring at.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nP_1 P_2 \\dots P_N\r\nQ_1 Q_2 \\dots Q_N\n\nOutput\n\nLet S_i be the number written on the bib of the person that the person wearing the bib with number i is staring at.\r\nPrint S_1, S_2, \\ldots, S_N in this order, separated by a single space.\n\nConstraints\n\n\n- 2 \\leq N \\leq 3\\times 10^5\n- 1 \\leq P_i \\leq N\n- The values of P_i are distinct.\n- 1 \\leq Q_i \\leq N\n- The values of Q_i are distinct.\n- All input values are integers.\n\nSample Input 1\n\n4\r\n4 3 2 1\r\n2 3 1 4\n\nSample Output 1\n\n3 4 1 2\r\n\nPerson 3 is wearing the bib with the number 1, and the person that person 3 is staring at, person 2, is wearing the bib with the number 3.\r\nThus, the answer for i = 1 is 3.\n\nSample Input 2\n\n10\r\n2 6 4 3 7 8 9 10 1 5\r\n1 4 8 2 10 5 7 3 9 6\n\nSample Output 2\n\n4 8 6 5 3 10 9 2 1 7", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"4\\n4 3 2 1\\n2 3 1 4\", \"output\": \"3 4 1 2\", \"testtype\": \"stdin\"}, {\"input\": \"10\\n2 6 4 3 7 8 9 10 1 5\\n1 4 8 2 10 5 7 3 9 6\", \"output\": \"4 8 6 5 3 10 9 2 1 7\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc394_a", "question_title": "22222", "question_content": "You are given a string S consisting of digits.\nRemove all characters from S except for 2, and then concatenate the remaining characters in their original order to form a new string.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- S is a string consisting of digits with length between 1 and 100, inclusive.\n- S contains at least one 2.\n\nSample Input 1\n\n20250222\n\nSample Output 1\n\n22222\r\n\nBy removing 0, 5, and 0 from 20250222 and then concatenating the remaining characters in their original order, the string 22222 is obtained.\n\nSample Input 2\n\n2\n\nSample Output 2\n\n2\n\nSample Input 3\n\n22222000111222222\n\nSample Output 3\n\n22222222222", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"20250222\", \"output\": \"22222\", \"testtype\": \"stdin\"}, {\"input\": \"2\", \"output\": \"2\", \"testtype\": \"stdin\"}, {\"input\": \"22222000111222222\", \"output\": \"22222222222\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc396_b", "question_title": "Card Pile", "question_content": "There is a stack of 100 cards, each labeled with the integer 0.\nProcess Q queries. Each query is of one of the following:\n\n- Type 1: Place a card labeled with an integer x on top of the stack.\n- Type 2: Remove the top card of the stack and output the integer written on that removed card. Under the constraints of this problem, the stack always has at least one card.\n\nInput\n\nThe input is given from Standard Input in the following format:\nQ\r\n\\text{query}_1\r\n\\text{query}_2\r\n\\vdots\r\n\\text{query}_Q\r\n\nThe i-th query \\text{query}_i starts with the query type c_i (1 or 2), followed by the integer x if c_i=1.\nThat is, each query is in one of the following two formats:\n1 x\r\n\n2\n\nOutput\n\nLet q be the number of queries with c_i=2. Print q lines.\nThe j-th line (1 \\le j \\le q) should contain the answer to the j-th such query.\n\nConstraints\n\n\n- 1 \\le Q \\le 100\n- 1 \\le x \\le 100\n- There is at least one query of type 2.\n- All input values are integers.\n\nSample Input 1\n\n6\r\n2\r\n1 4\r\n1 3\r\n2\r\n2\r\n2\n\nSample Output 1\n\n0\r\n3\r\n4\r\n0\r\n\nAfter processing each query, the stack is as follows:\n\n- Remove the top card of the stack. The integer on the removed card is 0, so output 0.\n- The stack then has 99 cards labeled with 0.\n\n\n- Add a card labeled 4 on top.\n- The stack then has 1 card labeled 4, and 99 cards labeled 0, from top to bottom.\n\n\n- Add a card labeled 3 on top.\n- The stack then has 1 card labeled 3, 1 card labeled 4, and 99 cards labeled 0, from top to bottom.\n\n\n- Remove the top card. The integer on that card is 3, so output 3.\n- The stack then has 1 card labeled 4, and 99 cards labeled 0, from top to bottom.\n\n\n- Remove the top card. The integer on that card is 4, so output 4.\n- The stack then has 99 cards labeled 0.\n\n\n- Remove the top card. The integer on that card is 0, so output 0.\n- The stack then has 98 cards labeled 0.\n\nSample Input 2\n\n5\r\n2\r\n2\r\n2\r\n2\r\n2\n\nSample Output 2\n\n0\r\n0\r\n0\r\n0\r\n0", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"6\\n2\\n1 4\\n1 3\\n2\\n2\\n2\", \"output\": \"0\\n3\\n4\\n0\", \"testtype\": \"stdin\"}, {\"input\": \"5\\n2\\n2\\n2\\n2\\n2\", \"output\": \"0\\n0\\n0\\n0\\n0\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc398_c", "question_title": "Uniqueness", "question_content": "There are N people, labeled 1 to N. Person i has an integer A_i.\nAmong the people who satisfy the condition \"None of the other N-1 people has the same integer as themselves,\" find the one with the greatest integer, and print that person's label.\nIf no person satisfies the condition, report that fact instead.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nA_1 A_2 \\ldots A_N\n\nOutput\n\nIf no person satisfies the condition \"None of the other N-1 people has the same integer as themselves,\" print -1.\nOtherwise, among those who satisfy it, print the label of the person whose integer is the largest.\n\nConstraints\n\n\n- 1 \\leq N \\leq 3\\times 10^5\n- 1 \\leq A_i \\leq 10^9\n- All input values are integers.\n\nSample Input 1\n\n9\r\n2 9 9 7 9 2 4 5 8\n\nSample Output 1\n\n9\r\n\nThose who satisfy the condition are the persons labeled 4, 7, 8, and 9.\r\nTheir integers are 7, 4, 5, and 8, respectively, and the person with the largest integer is the person labeled 9.\r\nThus, the answer is 9.\n\nSample Input 2\n\n4\r\n1000000000 1000000000 998244353 998244353\n\nSample Output 2\n\n-1\r\n\nIf no person satisfies the condition, print -1.", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"9\\n2 9 9 7 9 2 4 5 8\", \"output\": \"9\", \"testtype\": \"stdin\"}, {\"input\": \"4\\n1000000000 1000000000 998244353 998244353\", \"output\": \"-1\", \"testtype\": \"stdin\"}]"}
{"question_id": "3705", "question_title": "find-the-largest-almost-missing-integer", "question_content": "You are given an integer array nums and an integer k.\nAn integer x is almost missing from nums if x appears in exactly one subarray of size k within nums.\nReturn the largest almost missing integer from nums. If no such integer exists, return -1.\nA subarray is a contiguous sequence of elements within an array.\n \nExample 1:\n\nInput: nums = [3,9,2,1,7], k = 3\nOutput: 7\nExplanation:\n\n1 appears in 2 subarrays of size 3: [9, 2, 1] and [2, 1, 7].\n2 appears in 3 subarrays of size 3: [3, 9, 2], [9, 2, 1], [2, 1, 7].\n3 appears in 1 subarray of size 3: [3, 9, 2].\n7 appears in 1 subarray of size 3: [2, 1, 7].\n9 appears in 2 subarrays of size 3: [3, 9, 2], and [9, 2, 1].\n\nWe return 7 since it is the largest integer that appears in exactly one subarray of size k.\n\nExample 2:\n\nInput: nums = [3,9,7,2,1,7], k = 4\nOutput: 3\nExplanation:\n\n1 appears in 2 subarrays of size 4: [9, 7, 2, 1], [7, 2, 1, 7].\n2 appears in 3 subarrays of size 4: [3, 9, 7, 2], [9, 7, 2, 1], [7, 2, 1, 7].\n3 appears in 1 subarray of size 4: [3, 9, 7, 2].\n7 appears in 3 subarrays of size 4: [3, 9, 7, 2], [9, 7, 2, 1], [7, 2, 1, 7].\n9 appears in 2 subarrays of size 4: [3, 9, 7, 2], [9, 7, 2, 1].\n\nWe return 3 since it is the largest and only integer that appears in exactly one subarray of size k.\n\nExample 3:\n\nInput: nums = [0,0], k = 1\nOutput: -1\nExplanation:\nThere is no integer that appears in only one subarray of size 1.\n\n \nConstraints:\n\n1 <= nums.length <= 50\n0 <= nums[i] <= 50\n1 <= k <= nums.length", "difficulty": "easy", "starter_code": "class Solution:\n    def largestInteger(self, nums: List[int], k: int) -> int:\n        ", "public_test_cases": "[{\"input\": \"[3, 9, 2, 1, 7]\\n3\", \"output\": \"7\", \"testtype\": \"functional\"}, {\"input\": \"[3, 9, 7, 2, 1, 7]\\n4\", \"output\": \"3\", \"testtype\": \"functional\"}, {\"input\": \"[0, 0]\\n1\", \"output\": \"-1\", \"testtype\": \"functional\"}]"}
{"question_id": "3778", "question_title": "transform-array-by-parity", "question_content": "You are given an integer array nums. Transform nums by performing the following operations in the exact order specified:\n\nReplace each even number with 0.\nReplace each odd numbers with 1.\nSort the modified array in non-decreasing order.\n\nReturn the resulting array after performing these operations.\n \nExample 1:\n\nInput: nums = [4,3,2,1]\nOutput: [0,0,1,1]\nExplanation:\n\nReplace the even numbers (4 and 2) with 0 and the odd numbers (3 and 1) with 1. Now, nums = [0, 1, 0, 1].\nAfter sorting nums in non-descending order, nums = [0, 0, 1, 1].\n\n\nExample 2:\n\nInput: nums = [1,5,1,4,2]\nOutput: [0,0,1,1,1]\nExplanation:\n\nReplace the even numbers (4 and 2) with 0 and the odd numbers (1, 5 and 1) with 1. Now, nums = [1, 1, 1, 0, 0].\nAfter sorting nums in non-descending order, nums = [0, 0, 1, 1, 1].\n\n\n \nConstraints:\n\n1 <= nums.length <= 100\n1 <= nums[i] <= 1000", "difficulty": "easy", "starter_code": "class Solution:\n    def transformArray(self, nums: List[int]) -> List[int]:\n        ", "public_test_cases": "[{\"input\": \"[4, 3, 2, 1]\", \"output\": \"[0, 0, 1, 1]\", \"testtype\": \"functional\"}, {\"input\": \"[1, 5, 1, 4, 2]\", \"output\": \"[0, 0, 1, 1, 1]\", \"testtype\": \"functional\"}]"}
