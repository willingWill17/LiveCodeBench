question_id: 3568
==================================================

QUESTION TITLE:
--------------------
find-the-key-of-the-numbers

DIFFICULTY:
--------------------
easy

QUESTION CONTENT:
--------------------
You are given three positive integers num1, num2, and num3.
The key of num1, num2, and num3 is defined as a four-digit number such that:

Initially, if any number has less than four digits, it is padded with leading zeros.
The i^th digit (1 <= i <= 4) of the key is generated by taking the smallest digit among the i^th digits of num1, num2, and num3.

Return the key of the three numbers without leading zeros (if any).
 
Example 1:

Input: num1 = 1, num2 = 10, num3 = 1000
Output: 0
Explanation:
On padding, num1 becomes "0001", num2 becomes "0010", and num3 remains "1000".

The 1^st digit of the key is min(0, 0, 1).
The 2^nd digit of the key is min(0, 0, 0).
The 3^rd digit of the key is min(0, 1, 0).
The 4^th digit of the key is min(1, 0, 0).

Hence, the key is "0000", i.e. 0.

Example 2:

Input: num1 = 987, num2 = 879, num3 = 798
Output: 777

Example 3:

Input: num1 = 1, num2 = 2, num3 = 3
Output: 1

 
Constraints:

1 <= num1, num2, num3 <= 9999

STARTER CODE:
--------------------
class Solution:
    def generateKey(self, num1: int, num2: int, num3: int) -> int:
        

PUBLIC TEST CASES:
--------------------
Test Case 1:
  Input:
    1
    10
    1000
  Output: 0
  Type: functional

Test Case 2:
  Input:
    987
    879
    798
  Output: 777
  Type: functional

Test Case 3:
  Input:
    1
    2
    3
  Output: 1
  Type: functional

