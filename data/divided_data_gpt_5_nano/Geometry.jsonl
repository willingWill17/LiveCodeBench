{"question_id": "abc361_b", "question_title": "Intersection of Cuboids", "question_content": "You are trying to implement collision detection in a 3D game.\n\nIn a 3-dimensional space, let C(a,b,c,d,e,f) denote the cuboid with a diagonal connecting (a,b,c) and (d,e,f), and with all faces parallel to the xy-plane, yz-plane, or zx-plane.\r\n(This definition uniquely determines C(a,b,c,d,e,f).)\nGiven two cuboids C(a,b,c,d,e,f) and C(g,h,i,j,k,l), determine whether their intersection has a positive volume.\n\nInput\n\nThe input is given from Standard Input in the following format:\na b c d e f\r\ng h i j k l\n\nOutput\n\nPrint Yes if the intersection of the two cuboids has a positive volume, and No otherwise.\n\nConstraints\n\n\n- 0 \\leq a < d \\leq 1000\n- 0 \\leq b < e \\leq 1000\n- 0 \\leq c < f \\leq 1000\n- 0 \\leq g < j \\leq 1000\n- 0 \\leq h < k \\leq 1000\n- 0 \\leq i < l \\leq 1000\n- All input values are integers.\n\nSample Input 1\n\n0 0 0 4 5 6\r\n2 3 4 5 6 7\n\nSample Output 1\n\nYes\r\n\nThe positional relationship of the two cuboids is shown in the figure below, and their intersection has a volume of 8.\n\nSample Input 2\n\n0 0 0 2 2 2\r\n0 0 2 2 2 4\n\nSample Output 2\n\nNo\r\n\nThe two cuboids touch at a face, where the volume of the intersection is 0.\n\nSample Input 3\n\n0 0 0 1000 1000 1000\r\n10 10 10 100 100 100\n\nSample Output 3\n\nYes", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"0 0 0 4 5 6\\n2 3 4 5 6 7\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"0 0 0 2 2 2\\n0 0 2 2 2 4\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}, {\"input\": \"0 0 0 1000 1000 1000\\n10 10 10 100 100 100\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc362_b", "question_title": "Right Triangle", "question_content": "In the xy-plane, there are three points A(x_A, y_A), B(x_B, y_B), and C(x_C, y_C) that are not collinear. Determine whether the triangle ABC is a right triangle.\n\nInput\n\nThe input is given from Standard Input in the following format:\nx_A y_A\r\nx_B y_B\r\nx_C y_C\n\nOutput\n\nPrint Yes if the triangle ABC is a right triangle, and No otherwise.\n\nConstraints\n\n\n- -1000 \\leq x_A, y_A, x_B, y_B, x_C, y_C \\leq 1000\n- The three points A, B, and C are not collinear.\n- All input values are integers.\n\nSample Input 1\n\n0 0\r\n4 0\r\n0 3\n\nSample Output 1\n\nYes\r\n\nThe triangle ABC is a right triangle.\n\nSample Input 2\n\n-4 3\r\n2 1\r\n3 4\n\nSample Output 2\n\nYes\r\n\nThe triangle ABC is a right triangle.\n\nSample Input 3\n\n2 4\r\n-3 2\r\n1 -2\n\nSample Output 3\n\nNo\r\n\nThe triangle ABC is not a right triangle.", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"0 0\\n4 0\\n0 3\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"-4 3\\n2 1\\n3 4\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"2 4\\n-3 2\\n1 -2\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "3461", "question_title": "find-the-minimum-area-to-cover-all-ones-i", "question_content": "You are given a 2D binary array grid. Find a rectangle with horizontal and vertical sides with the smallest area, such that all the 1's in grid lie inside this rectangle.\nReturn the minimum possible area of the rectangle.\n \nExample 1:\n\nInput: grid = [[0,1,0],[1,0,1]]\nOutput: 6\nExplanation:\n\nThe smallest rectangle has a height of 2 and a width of 3, so it has an area of 2 * 3 = 6.\n\nExample 2:\n\nInput: grid = [[1,0],[0,0]]\nOutput: 1\nExplanation:\n\nThe smallest rectangle has both height and width 1, so its area is 1 * 1 = 1.\n\n \nConstraints:\n\n1 <= grid.length, grid[i].length <= 1000\ngrid[i][j] is either 0 or 1.\nThe input is generated such that there is at least one 1 in grid.", "difficulty": "medium", "starter_code": "class Solution:\n    def minimumArea(self, grid: List[List[int]]) -> int:\n        ", "public_test_cases": "[{\"input\": \"[[0, 1, 0], [1, 0, 1]]\", \"output\": \"6\", \"testtype\": \"functional\"}, {\"input\": \"[[1, 0], [0, 0]]\", \"output\": \"1\", \"testtype\": \"functional\"}]"}
{"question_id": "abc307_c", "question_title": "Ideal Sheet", "question_content": "Takahashi has two sheets A and B, each composed of black squares and transparent squares, and an infinitely large sheet C composed of transparent squares.\nThere is also an ideal sheet X for Takahashi composed of black squares and transparent squares.\nThe sizes of sheets A, B, and X are H_A rows \\times W_A columns, H_B rows \\times W_B columns, and H_X rows \\times W_X columns, respectively.\nThe squares of sheet A are represented by H_A strings of length W_A, A_1, A_2, \\ldots, A_{H_A} consisting of . and #.\nIf the j-th character (1\\leq j\\leq W_A) of A_i (1\\leq i\\leq H_A) is ., the square at the i-th row from the top and j-th column from the left is transparent; if it is #, that square is black.\nSimilarly, the squares of sheets B and X are represented by H_B strings of length W_B, B_1, B_2, \\ldots, B_{H_B}, and H_X strings of length W_X, X_1, X_2, \\ldots, X_{H_X}, respectively.\nTakahashi's goal is to create sheet X using all black squares in sheets A and B by following the steps below with sheets A, B, and C.\n\n- Paste sheets A and B onto sheet C along the grid. Each sheet can be pasted anywhere by translating it, but it cannot be cut or rotated.\n- Cut out an H_X\\times W_X area from sheet C along the grid. Here, a square of the cut-out sheet will be black if a black square of sheet A or B is pasted there, and transparent otherwise.\n\nDetermine whether Takahashi can achieve his goal by appropriately choosing the positions where the sheets are pasted and the area to cut out, that is, whether he can satisfy both of the following conditions.\n\n- The cut-out sheet includes all black squares of sheets A and B. The black squares of sheets A and B may overlap on the cut-out sheet.\n- The cut-out sheet coincides sheet X without rotating or flipping.\n\nInput\n\nThe input is given from Standard Input in the following format:\nH_A W_A\nA_1\nA_2\n\\vdots\nA_{H_A}\nH_B W_B\nB_1\nB_2\n\\vdots\nB_{H_B}\nH_X W_X\nX_1\nX_2\n\\vdots\nX_{H_X}\n\nOutput\n\nIf Takahashi can achieve the goal described in the problem statement, print Yes; otherwise, print No.\n\nConstraints\n\n\n- 1\\leq H_A, W_A, H_B, W_B, H_X, W_X\\leq 10\n- H_A, W_A, H_B, W_B, H_X, W_X are integers.\n- A_i is a string of length W_A consisting of . and #.\n- B_i is a string of length W_B consisting of . and #.\n- X_i is a string of length W_X consisting of . and #.\n- Sheets A, B, and X each contain at least one black square.\n\nSample Input 1\n\n3 5\n#.#..\n.....\n.#...\n2 2\n#.\n.#\n5 3\n...\n#.#\n.#.\n.#.\n...\n\nSample Output 1\n\nYes\n\nFirst, paste sheet A onto sheet C, as shown in the figure below.\n     \\vdots\n  .......  \n  .#.#...  \n\\cdots.......\\cdots\n  ..#....  \n  .......  \n     \\vdots\n\nNext, paste sheet B so that its top-left corner aligns with that of sheet A, as shown in the figure below.\n     \\vdots\n  .......  \n  .#.#...  \n\\cdots..#....\\cdots\n  ..#....  \n  .......  \n     \\vdots\n\nNow, cut out a 5\\times 3 area with the square in the first row and second column of the range illustrated above as the top-left corner, as shown in the figure below.\n...\n#.#\n.#.\n.#.\n...\n\nThis includes all black squares of sheets A and B and matches sheet X, satisfying the conditions.\nTherefore, print Yes.\n\nSample Input 2\n\n2 2\n#.\n.#\n2 2\n#.\n.#\n2 2\n##\n##\n\nSample Output 2\n\nNo\n\nNote that sheets A and B may not be rotated or flipped when pasting them.\n\nSample Input 3\n\n1 1\n#\n1 2\n##\n1 1\n#\n\nSample Output 3\n\nNo\n\nNo matter how you paste or cut, you cannot cut out a sheet that includes all black squares of sheet B, so you cannot satisfy the first condition.\nTherefore, print No.\n\nSample Input 4\n\n3 3\n###\n...\n...\n3 3\n#..\n#..\n#..\n3 3\n..#\n..#\n###\n\nSample Output 4\n\nYes", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"3 5\\n#.#..\\n.....\\n.#...\\n2 2\\n#.\\n.#\\n5 3\\n...\\n#.#\\n.#.\\n.#.\\n...\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"2 2\\n#.\\n.#\\n2 2\\n#.\\n.#\\n2 2\\n##\\n##\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}, {\"input\": \"1 1\\n#\\n1 2\\n##\\n1 1\\n#\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3 3\\n###\\n...\\n...\\n3 3\\n#..\\n#..\\n#..\\n3 3\\n..#\\n..#\\n###\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc312_b", "question_title": "TaK Code", "question_content": "Takahashi invented Tak Code, a two-dimensional code.  A TaK Code satisfies all of the following conditions:\n\n- It is a region consisting of nine horizontal rows and nine vertical columns.\n- All the 18 cells in the top-left and bottom-right three-by-three regions are black.\n- All the 14 cells that are adjacent (horizontally, vertically, or diagonally) to the top-left or bottom-right three-by-three region are white.\n\nIt is not allowed to rotate a TaK Code.\nYou are given a grid with N horizontal rows and M vertical columns.\nThe state of the grid is described by N strings, S_1,\\ldots, and S_N, each of length M.  The cell at the i-th row from the top and j-th column from the left is black if the j-th character of S_i is #, and white if it is ..\nFind all the nine-by-nine regions, completely contained in the grid, that satisfy the conditions of a TaK Code.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN M\nS_1\n\\vdots\nS_N\n\nOutput\n\nFor all pairs (i,j) such that the nine-by-nine region, whose top-left cell is at the i-th row from the top and j-th columns from the left, satisfies the conditions of a TaK Code, print a line containing i, a space, and j in this order.\nThe pairs must be sorted in lexicographical ascending order; that is, i must be in ascending order, and within the same i, j must be in ascending order.\n\nConstraints\n\n\n- 9 \\leq N,M \\leq 100\n- N and M are integers.\n- S_i is a string of length M consisting of . and #.\n\nSample Input 1\n\n19 18\n###......###......\n###......###......\n###..#...###..#...\n..............#...\n..................\n..................\n......###......###\n......###......###\n......###......###\n.###..............\n.###......##......\n.###..............\n............###...\n...##.......###...\n...##.......###...\n.......###........\n.......###........\n.......###........\n........#.........\n\nSample Output 1\n\n1 1\n1 10\n7 7\n10 2\n\nA TaK Code looks like the following, where # is a black cell, . is a white cell, and ? can be either black or white.\n###.?????\n###.?????\n###.?????\n....?????\n?????????\n?????....\n?????.###\n?????.###\n?????.###\n\nIn the grid given by the input, the nine-by-nine region, whose top-left cell is at the 10-th row from the top and 2-nd column from the left, satisfies the conditions of a TaK Code, as shown below.\n###......\n###......\n###......\n.........\n..##.....\n..##.....\n......###\n......###\n......###\n\nSample Input 2\n\n9 21\n###.#...........#.###\n###.#...........#.###\n###.#...........#.###\n....#...........#....\n#########...#########\n....#...........#....\n....#.###...###.#....\n....#.###...###.#....\n....#.###...###.#....\n\nSample Output 2\n\n1 1\n\nSample Input 3\n\n18 18\n######............\n######............\n######............\n######............\n######............\n######............\n..................\n..................\n..................\n..................\n..................\n..................\n............######\n............######\n............######\n............######\n............######\n............######\n\nSample Output 3\n\n\n\nThere may be no region that satisfies the conditions of TaK Code.", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"19 18\\n###......###......\\n###......###......\\n###..#...###..#...\\n..............#...\\n..................\\n..................\\n......###......###\\n......###......###\\n......###......###\\n.###..............\\n.###......##......\\n.###..............\\n............###...\\n...##.......###...\\n...##.......###...\\n.......###........\\n.......###........\\n.......###........\\n........#.........\\n\", \"output\": \"1 1\\n1 10\\n7 7\\n10 2\\n\", \"testtype\": \"stdin\"}, {\"input\": \"9 21\\n###.#...........#.###\\n###.#...........#.###\\n###.#...........#.###\\n....#...........#....\\n#########...#########\\n....#...........#....\\n....#.###...###.#....\\n....#.###...###.#....\\n....#.###...###.#....\\n\", \"output\": \"1 1\\n\", \"testtype\": \"stdin\"}, {\"input\": \"18 18\\n######............\\n######............\\n######............\\n######............\\n######............\\n######............\\n..................\\n..................\\n..................\\n..................\\n..................\\n..................\\n............######\\n............######\\n............######\\n............######\\n............######\\n............######\\n\", \"output\": \"\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc312_e", "question_title": "Tangency of Cuboids", "question_content": "There are N rectangular cuboids in a three-dimensional space.\nThese cuboids do not overlap.  Formally, for any two different cuboids among them, their intersection has a volume of 0.\nThe diagonal of the i-th cuboid is a segment that connects two points (X_{i,1},Y_{i,1},Z_{i,1}) and (X_{i,2},Y_{i,2},Z_{i,2}), and its edges are all parallel to one of the coordinate axes.\nFor each cuboid, find the number of other cuboids that share a face with it.\r\nFormally, for each i, find the number of j with 1\\leq j \\leq N and j\\neq i such that the intersection of the surfaces of the i-th and j-th cuboids has a positive area.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nX_{1,1} Y_{1,1} Z_{1,1} X_{1,2} Y_{1,2} Z_{1,2}\r\n\\vdots\r\nX_{N,1} Y_{N,1} Z_{N,1} X_{N,2} Y_{N,2} Z_{N,2}\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- 1 \\leq N \\leq 10^5\n- 0 \\leq X_{i,1} < X_{i,2} \\leq 100\n- 0 \\leq Y_{i,1} < Y_{i,2} \\leq 100\n- 0 \\leq Z_{i,1} < Z_{i,2} \\leq 100\n- Cuboids do not have an intersection with a positive volume.\n- All input values are integers.\n\nSample Input 1\n\n4\r\n0 0 0 1 1 1\r\n0 0 1 1 1 2\r\n1 1 1 2 2 2\r\n3 3 3 4 4 4\n\nSample Output 1\n\n1\r\n1\r\n0\r\n0\r\n\nThe 1-st and 2-nd cuboids share a rectangle whose diagonal is the segment connecting two points (0,0,1) and (1,1,1).\r\nThe 1-st and 3-rd cuboids share a point (1,1,1), but do not share a surface.\n\nSample Input 2\n\n3\r\n0 0 10 10 10 20\r\n3 4 1 15 6 10\r\n0 9 6 1 20 10\n\nSample Output 2\n\n2\r\n1\r\n1\n\nSample Input 3\n\n8\r\n0 0 0 1 1 1\r\n0 0 1 1 1 2\r\n0 1 0 1 2 1\r\n0 1 1 1 2 2\r\n1 0 0 2 1 1\r\n1 0 1 2 1 2\r\n1 1 0 2 2 1\r\n1 1 1 2 2 2\n\nSample Output 3\n\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"4\\n0 0 0 1 1 1\\n0 0 1 1 1 2\\n1 1 1 2 2 2\\n3 3 3 4 4 4\\n\", \"output\": \"1\\n1\\n0\\n0\\n\", \"testtype\": \"stdin\"}, {\"input\": \"3\\n0 0 10 10 10 20\\n3 4 1 15 6 10\\n0 9 6 1 20 10\\n\", \"output\": \"2\\n1\\n1\\n\", \"testtype\": \"stdin\"}, {\"input\": \"8\\n0 0 0 1 1 1\\n0 0 1 1 1 2\\n0 1 0 1 2 1\\n0 1 1 1 2 2\\n1 0 0 2 1 1\\n1 0 1 2 1 2\\n1 1 0 2 2 1\\n1 1 1 2 2 2\\n\", \"output\": \"3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc333_b", "question_title": "Pentagon", "question_content": "A regular pentagon P is shown in the figure below.\n\nDetermine whether the length of the line segment connecting points S_1 and S_2 of P equals the length of the line segment connecting points T_1 and T_2.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS_1S_2\r\nT_1T_2\n\nOutput\n\nIf the length of the line segment connecting points S_1 and S_2 of P equals the length of the line segment connecting points T_1 and T_2, print Yes; otherwise, print No.\n\nConstraints\n\n\n- Each of S_1, S_2, T_1, and T_2 is one of the characters A, B, C, D, and E.\n- S_1 \\neq S_2\n- T_1 \\neq T_2\n\nSample Input 1\n\nAC\r\nEC\n\nSample Output 1\n\nYes\r\n\nThe length of the line segment connecting point A and point C of P equals the length of the line segment connecting point E and point C.\n\nSample Input 2\n\nDA\r\nEA\n\nSample Output 2\n\nNo\r\n\nThe length of the line segment connecting point D and point A of P does not equal the length of the line segment connecting point E and point A.\n\nSample Input 3\n\nBD\r\nBD\n\nSample Output 3\n\nYes", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"AC\\nEC\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}, {\"input\": \"DA\\nEA\\n\", \"output\": \"No\\n\", \"testtype\": \"stdin\"}, {\"input\": \"BD\\nBD\\n\", \"output\": \"Yes\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc375_b", "question_title": "Traveling Takahashi Problem", "question_content": "Takahashi is at the origin on a two-dimensional coordinate plane.\nThe cost for him to move from point (a, b) to point (c, d) is \\sqrt{(a - c)^2 + (b - d)^2}.\nFind the total cost when he starts at the origin, visits N points (X_1, Y_1), \\ldots, (X_N, Y_N) in this order, and then returns to the origin.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nX_1 Y_1\r\n\\vdots\r\nX_N Y_N\n\nOutput\n\nPrint the answer.\r\nYour output will be considered correct if its absolute or relative error from the true value is at most 10^{-6}.\n\nConstraints\n\n\n- 1 \\leq N \\leq 2 \\times 10^5\n- -10^9 \\leq X_i, Y_i \\leq 10^9\n- All input values are integers.\n\nSample Input 1\n\n2\r\n1 2\r\n-1 0\n\nSample Output 1\n\n6.06449510224597979401\r\n\nThe journey consists of the following three steps:\n\n- Move from (0, 0) to (1, 2). The cost is \\sqrt{(0 - 1)^2 + (0 - 2)^2} = \\sqrt{5} = 2.236067977....\n- Move from (1, 2) to (-1, 0). The cost is \\sqrt{(1 - (-1))^2 + (2 - 0)^2} = \\sqrt{8} = 2.828427124....\n- Move from (-1, 0) to (0, 0). The cost is \\sqrt{(-1 - 0)^2 + (0 - 0)^2} = \\sqrt{1} = 1.\n\nThe total cost is 6.064495102....\n\nSample Input 2\n\n7\r\n-14142 13562\r\n-17320 50807\r\n-22360 67977\r\n24494 89742\r\n-26457 51311\r\n28284 27124\r\n31622 77660\n\nSample Output 2\n\n384694.57587932075868509383\n\nSample Input 3\n\n5\r\n-100000 100000\r\n100000 -100000\r\n-100000 100000\r\n100000 -100000\r\n-100000 100000\n\nSample Output 3\n\n1414213.56237309504880168872", "difficulty": "easy", "starter_code": "", "public_test_cases": "[{\"input\": \"2\\n1 2\\n-1 0\\n\", \"output\": \"6.06449510224597979401\\n\", \"testtype\": \"stdin\"}, {\"input\": \"7\\n-14142 13562\\n-17320 50807\\n-22360 67977\\n24494 89742\\n-26457 51311\\n28284 27124\\n31622 77660\\n\", \"output\": \"384694.57587932075868509383\\n\", \"testtype\": \"stdin\"}, {\"input\": \"5\\n-100000 100000\\n100000 -100000\\n-100000 100000\\n100000 -100000\\n-100000 100000\\n\", \"output\": \"1414213.56237309504880168872\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc377_c", "question_title": "Avoid Knight Attack", "question_content": "There is a grid of N^2 squares with N rows and N columns.\nLet (i,j) denote the square at the i-th row from the top (1\\leq i\\leq N) and j-th column from the left (1\\leq j\\leq N).\nEach square is either empty or has a piece placed on it.\nThere are M pieces placed on the grid, and the k-th (1\\leq k\\leq M) piece is placed on square (a_k,b_k).\nYou want to place your piece on an empty square in such a way that it cannot be captured by any of the existing pieces.\nA piece placed on square (i,j) can capture pieces that satisfy any of the following conditions:\n\n- Placed on square (i+2,j+1)\n- Placed on square (i+1,j+2)\n- Placed on square (i-1,j+2)\n- Placed on square (i-2,j+1)\n- Placed on square (i-2,j-1)\n- Placed on square (i-1,j-2)\n- Placed on square (i+1,j-2)\n- Placed on square (i+2,j-1)\n\nHere, conditions involving non-existent squares are considered to never be satisfied.\nFor example, a piece placed on square (4,4) can capture pieces placed on the squares shown in blue in the following figure:\n\nHow many squares can you place your piece on?\n\nInput\n\nThe input is given from Standard Input in the following format:\nN M\na_1 b_1\na_2 b_2\n\\vdots\na_M b_M\n\nOutput\n\nPrint the number of empty squares where you can place your piece without it being captured by any existing pieces.\n\nConstraints\n\n\n- 1\\leq N\\leq10^9\n- 1\\leq M\\leq2\\times10^5\n- 1\\leq a_k\\leq N,1\\leq b_k\\leq N\\ (1\\leq k\\leq M)\n- (a_k,b_k)\\neq(a_l,b_l)\\ (1\\leq k\\lt l\\leq M)\n- All input values are integers.\n\nSample Input 1\n\n8 6\n1 4\n2 1\n3 8\n4 5\n5 2\n8 3\n\nSample Output 1\n\n38\n\nThe existing pieces can capture pieces placed on the squares shown in blue in the following figure:\n\nTherefore, you can place your piece on the remaining 38 squares.\n\nSample Input 2\n\n1000000000 1\n1 1\n\nSample Output 2\n\n999999999999999997\n\nOut of 10^{18} squares, only 3 squares cannot be used: squares (1,1), (2,3), and (3,2).\nNote that the answer may be 2^{32} or greater.\n\nSample Input 3\n\n20 10\n1 4\n7 11\n7 15\n8 10\n11 6\n12 5\n13 1\n15 2\n20 10\n20 15\n\nSample Output 3\n\n338", "difficulty": "medium", "starter_code": "", "public_test_cases": "[{\"input\": \"8 6\\n1 4\\n2 1\\n3 8\\n4 5\\n5 2\\n8 3\\n\", \"output\": \"38\\n\", \"testtype\": \"stdin\"}, {\"input\": \"1000000000 1\\n1 1\\n\", \"output\": \"999999999999999997\\n\", \"testtype\": \"stdin\"}, {\"input\": \"20 10\\n1 4\\n7 11\\n7 15\\n8 10\\n11 6\\n12 5\\n13 1\\n15 2\\n20 10\\n20 15\\n\", \"output\": \"338\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc385_f", "question_title": "Visible Buildings", "question_content": "There are N buildings numbered 1 to N on a number line.\nBuilding i is at coordinate X_i and has height H_i. The size in directions other than height is negligible.\nFrom a point P with coordinate x and height h, building i is considered visible if there exists a point Q on building i such that the line segment PQ does not intersect with any other building.\nFind the maximum height at coordinate 0 from which it is not possible to see all buildings. Height must be non-negative; if it is possible to see all buildings at height 0 at coordinate 0, report -1 instead.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\nX_1 H_1\n\\vdots\nX_N H_N\n\nOutput\n\nIf it is possible to see all buildings from coordinate 0 and height 0, print -1. Otherwise, print the maximum height at coordinate 0 from which it is not possible to see all buildings. Answers with an absolute or relative error of at most 10^{-9} from the true answer will be considered correct.\n\nConstraints\n\n\n- 1 \\leq N \\leq 2 \\times 10^5\n- 1 \\leq X_1 < \\dots < X_N \\leq 10^9\n- 1 \\leq H_i \\leq 10^9\n- All input values are integers.\n\nSample Input 1\n\n3\n3 2\n5 4\n7 5\n\nSample Output 1\n\n1.500000000000000000\n\nFrom coordinate 0 and height 1.5, building 3 cannot be seen. If the height is even slightly greater than 1.5, all buildings including building 3 can be seen. Thus, the answer is 1.5.\n\nSample Input 2\n\n2\n1 1\n2 100\n\nSample Output 2\n\n-1\n\nNote that -1.000 or similar outputs would be considered incorrect.\n\nSample Input 3\n\n3\n1 1\n2 2\n3 3\n\nSample Output 3\n\n0.000000000000000000\n\nSample Input 4\n\n4\n10 10\n17 5\n20 100\n27 270\n\nSample Output 4\n\n17.142857142857142350", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"3\\n3 2\\n5 4\\n7 5\", \"output\": \"1.500000000000000000\", \"testtype\": \"stdin\"}, {\"input\": \"2\\n1 1\\n2 100\", \"output\": \"-1\", \"testtype\": \"stdin\"}, {\"input\": \"3\\n1 1\\n2 2\\n3 3\", \"output\": \"0.000000000000000000\", \"testtype\": \"stdin\"}, {\"input\": \"4\\n10 10\\n17 5\\n20 100\\n27 270\", \"output\": \"17.142857142857142350\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc385_d", "question_title": "Santa Claus 2", "question_content": "There are N houses at points (X_1,Y_1),\\ldots,(X_N,Y_N) on a two-dimensional plane.\nInitially, Santa Claus is at point (S_x,S_y). He will act according to the sequence (D_1,C_1),\\ldots,(D_M,C_M) as follows:\n\n- For i=1,2,\\ldots,M in order, he moves as follows:\n- Let (x,y) be the point where he currently is.\n- If D_i is U, move in a straight line from (x,y) to (x,y+C_i).\n- If D_i is D, move in a straight line from (x,y) to (x,y-C_i).\n- If D_i is L, move in a straight line from (x,y) to (x-C_i,y).\n- If D_i is R, move in a straight line from (x,y) to (x+C_i,y).\n\n\n\n\n\nFind the point where he is after completing all actions, and the number of distinct houses he passed through or arrived at during his actions. If the same house is passed multiple times, it is only counted once.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN M S_x S_y\nX_1 Y_1\n\\vdots\nX_N Y_N\nD_1 C_1\n\\vdots\nD_M C_M\n\nOutput\n\nLet (X,Y) be the point where he is after completing all actions, and C be the number of distinct houses passed through or arrived at. Print X,Y,C in this order separated by spaces.\n\nConstraints\n\n\n- 1 \\leq N \\leq 2\\times 10^5\n- 1 \\leq M \\leq 2\\times 10^5\n- -10^9 \\leq X_i,Y_i \\leq 10^9\n- The pairs (X_i,Y_i) are distinct.\n- -10^9 \\leq S_x,S_y \\leq 10^9\n- There is no house at (S_x,S_y).\n- Each D_i is one of U, D, L, R.\n- 1 \\leq C_i \\leq 10^9\n- All input numbers are integers.\n\nSample Input 1\n\n3 4 3 2\n2 2\n3 3\n2 1\nL 2\nD 1\nR 1\nU 2\n\nSample Output 1\n\n2 3 2\n\nSanta Claus behaves as follows:\n\n\n- D_1= L, so he moves from (3,2) to (3-2,2) in a straight line. During this, he passes through the house at (2,2).\n- D_2= D, so he moves from (1,2) to (1,2-1) in a straight line.\n- D_3= R, so he moves from (1,1) to (1+1,1) in a straight line. During this, he passes through the house at (2,1).\n- D_4= U, so he moves from (2,1) to (2,1+2) in a straight line. During this, he passes through the house at (2,2), but it has already been passed.\n\nThe number of houses he passed or arrived during his actions is 2.\n\nSample Input 2\n\n1 3 0 0\n1 1\nR 1000000000\nR 1000000000\nR 1000000000\n\nSample Output 2\n\n3000000000 0 0\n\nBe careful with overflow.", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"3 4 3 2\\n2 2\\n3 3\\n2 1\\nL 2\\nD 1\\nR 1\\nU 2\", \"output\": \"2 3 2\", \"testtype\": \"stdin\"}, {\"input\": \"1 3 0 0\\n1 1\\nR 1000000000\\nR 1000000000\\nR 1000000000\", \"output\": \"3000000000 0 0\", \"testtype\": \"stdin\"}]"}
{"question_id": "abc351_e", "question_title": "Jump Distance Sum", "question_content": "On a coordinate plane, there are N points P_1, P_2, \\ldots, P_N, where point P_i has coordinates (X_i, Y_i).\nThe distance \\text{dist}(A, B) between two points A and B is defined as follows:\n\nA rabbit is initially at point A.\nA rabbit at position (x, y) can jump to (x+1, y+1), (x+1, y-1), (x-1, y+1), or (x-1, y-1) in one jump.\n\\text{dist}(A, B) is defined as the minimum number of jumps required to get from point A to point B.\nIf it is impossible to get from point A to point B after any number of jumps, let \\text{dist}(A, B) = 0.\n\nCalculate the sum \\displaystyle\\sum_{i=1}^{N-1}\\displaystyle\\sum_{j=i+1}^N \\text{dist}(P_i, P_j).\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\nX_1 Y_1\nX_2 Y_2\n\\vdots\nX_N Y_N\n\nOutput\n\nPrint the value of \\displaystyle\\sum_{i=1}^{N-1}\\displaystyle\\sum_{j=i+1}^N \\text{dist}(P_i, P_j) as an integer.\n\nConstraints\n\n\n- 2 \\leq N \\leq 2 \\times 10^5\n- 0 \\leq X_i, Y_i \\leq 10^8\n- For i \\neq j, (X_i, Y_i) \\neq (X_j, Y_j)\n- All input values are integers.\n\nSample Input 1\n\n3\n0 0\n1 3\n5 6\n\nSample Output 1\n\n3\n\nP_1, P_2, and P_3 have coordinates (0,0), (1,3), and (5,6), respectively.\nThe rabbit can get from P_1 to P_2 in three jumps via (0,0) \\to (1,1) \\to (0,2) \\to (1,3), but not in two or fewer jumps,\nso \\text{dist}(P_1, P_2) = 3.\nThe rabbit cannot get from P_1 to P_3 or from P_2 to P_3, so \\text{dist}(P_1, P_3) = \\text{dist}(P_2, P_3) = 0.\nTherefore, the answer is \\displaystyle\\sum_{i=1}^{2}\\displaystyle\\sum_{j=i+1}^3\\text{dist}(P_i, P_j)=\\text{dist}(P_1, P_2)+\\text{dist}(P_1, P_3)+\\text{dist}(P_2, P_3)=3+0+0=3.\n\nSample Input 2\n\n5\n0 5\n1 7\n2 9\n3 8\n4 6\n\nSample Output 2\n\n11", "difficulty": "hard", "starter_code": "", "public_test_cases": "[{\"input\": \"3\\n0 0\\n1 3\\n5 6\\n\", \"output\": \"3\\n\", \"testtype\": \"stdin\"}, {\"input\": \"5\\n0 5\\n1 7\\n2 9\\n3 8\\n4 6\\n\", \"output\": \"11\\n\", \"testtype\": \"stdin\"}]"}
{"question_id": "3344", "question_title": "minimize-manhattan-distances", "question_content": "You are given a array points representing integer coordinates of some points on a 2D plane, where points[i] = [x_i, y_i].\nThe distance between two points is defined as their Manhattan distance.\nReturn the minimum possible value for maximum distance between any two points by removing exactly one point.\n \nExample 1:\n\nInput: points = [[3,10],[5,15],[10,2],[4,4]]\nOutput: 12\nExplanation:\nThe maximum distance after removing each point is the following:\n\nAfter removing the 0^th point the maximum distance is between points (5, 15) and (10, 2), which is |5 - 10| + |15 - 2| = 18.\nAfter removing the 1^st point the maximum distance is between points (3, 10) and (10, 2), which is |3 - 10| + |10 - 2| = 15.\nAfter removing the 2^nd point the maximum distance is between points (5, 15) and (4, 4), which is |5 - 4| + |15 - 4| = 12.\nAfter removing the 3^rd point the maximum distance is between points (5, 15) and (10, 2), which is |5 - 10| + |15 - 2| = 18.\n\n12 is the minimum possible maximum distance between any two points after removing exactly one point.\n\nExample 2:\n\nInput: points = [[1,1],[1,1],[1,1]]\nOutput: 0\nExplanation:\nRemoving any of the points results in the maximum distance between any two points of 0.\n\n \nConstraints:\n\n3 <= points.length <= 10^5\npoints[i].length == 2\n1 <= points[i][0], points[i][1] <= 10^8", "difficulty": "hard", "starter_code": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        ", "public_test_cases": "[{\"input\": \"[[3, 10], [5, 15], [10, 2], [4, 4]]\", \"output\": \"12\", \"testtype\": \"functional\"}, {\"input\": \"[[1, 1], [1, 1], [1, 1]]\", \"output\": \"0\", \"testtype\": \"functional\"}]"}
{"question_id": "3485", "question_title": "maximize-score-of-numbers-in-ranges", "question_content": "You are given an array of integers start and an integer d, representing n intervals [start[i], start[i] + d].\nYou are asked to choose n integers where the i^th integer must belong to the i^th interval. The score of the chosen integers is defined as the minimum absolute difference between any two integers that have been chosen.\nReturn the maximum possible score of the chosen integers.\n \nExample 1:\n\nInput: start = [6,0,3], d = 2\nOutput: 4\nExplanation:\nThe maximum possible score can be obtained by choosing integers: 8, 0, and 4. The score of these chosen integers is min(|8 - 0|, |8 - 4|, |0 - 4|) which equals 4.\n\nExample 2:\n\nInput: start = [2,6,13,13], d = 5\nOutput: 5\nExplanation:\nThe maximum possible score can be obtained by choosing integers: 2, 7, 13, and 18. The score of these chosen integers is min(|2 - 7|, |2 - 13|, |2 - 18|, |7 - 13|, |7 - 18|, |13 - 18|) which equals 5.\n\n \nConstraints:\n\n2 <= start.length <= 10^5\n0 <= start[i] <= 10^9\n0 <= d <= 10^9", "difficulty": "medium", "starter_code": "class Solution:\n    def maxPossibleScore(self, start: List[int], d: int) -> int:\n        ", "public_test_cases": "[{\"input\": \"[6, 0, 3]\\n2\", \"output\": \"4\", \"testtype\": \"functional\"}, {\"input\": \"[2, 6, 13, 13]\\n5\", \"output\": \"5\", \"testtype\": \"functional\"}]"}
